<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-06-09T18:57:59+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">ljf12825’s Blog</title><subtitle>Efficient &amp; Elegant</subtitle><author><name>Jeff Lee</name><email>2548278761@qq.com</email></author><entry><title type="html">Scene System</title><link href="http://localhost:4000/posts/2025-06-08-Scene-System/" rel="alternate" type="text/html" title="Scene System" /><published>2025-06-01T00:00:00+08:00</published><updated>2025-06-01T00:00:00+08:00</updated><id>http://localhost:4000/posts/Scene-System</id><content type="html" xml:base="http://localhost:4000/posts/2025-06-08-Scene-System/"><![CDATA[]]></content><author><name>ljf12825</name></author><category term="笔记" /><category term="Unity" /><category term="Unity System" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Coroutine</title><link href="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Coroutine.html" rel="alternate" type="text/html" title="Coroutine" /><published>2025-06-01T00:00:00+08:00</published><updated>2025-06-01T00:00:00+08:00</updated><id>http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Coroutine</id><content type="html" xml:base="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Coroutine.html"><![CDATA[]]></content><author><name>ljf12825</name></author><category term="笔记" /><category term="Unity" /><category term="Unity Engine" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">UI System</title><link href="http://localhost:4000/posts/2025-06-07-UI-System/" rel="alternate" type="text/html" title="UI System" /><published>2025-06-01T00:00:00+08:00</published><updated>2025-06-01T00:00:00+08:00</updated><id>http://localhost:4000/posts/UI-System</id><content type="html" xml:base="http://localhost:4000/posts/2025-06-07-UI-System/"><![CDATA[]]></content><author><name>ljf12825</name></author><category term="笔记" /><category term="Unity" /><category term="Unity System" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Joint</title><link href="http://localhost:4000/posts/2025-06-07-Joint/" rel="alternate" type="text/html" title="Joint" /><published>2025-06-01T00:00:00+08:00</published><updated>2025-06-01T00:00:00+08:00</updated><id>http://localhost:4000/posts/Joint</id><content type="html" xml:base="http://localhost:4000/posts/2025-06-07-Joint/"><![CDATA[<p>Joint（关节）系统是物理系统的一部分，用于将两个Rigidbody通过某种方式连接起来，从而形成如机械臂、门铰链、车轮悬挂等复杂的物理结构</p>

<h2 id="常见joint组件3d">常见Joint组件（3D）</h2>

<table>
  <thead>
    <tr>
      <th>Joint 类型</th>
      <th>功能简介</th>
      <th>应用场景</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>Fixed Joint</strong></td>
      <td>固定连接两个刚体（类似粘在一起）</td>
      <td>粘接物体，如断裂木桥</td>
    </tr>
    <tr>
      <td><strong>Hinge Joint</strong></td>
      <td>限制物体绕一个轴旋转</td>
      <td>门铰链、车轮</td>
    </tr>
    <tr>
      <td><strong>Spring Joint</strong></td>
      <td>使用弹簧连接两个物体</td>
      <td>弹簧、吊绳</td>
    </tr>
    <tr>
      <td><strong>Character Joint</strong></td>
      <td>模拟生物骨骼的铰接关节</td>
      <td>角色 ragdoll 系统</td>
    </tr>
    <tr>
      <td><strong>Configurable Joint</strong></td>
      <td>高级自定义关节，可设置自由度</td>
      <td>自定义复杂机械结构</td>
    </tr>
  </tbody>
</table>

<h2 id="使用joint基本原则">使用Joint基本原则</h2>
<ul>
  <li>Joint总是连接两个Rigidbody：当前GameObject上的Rigidbody与<code class="language-plaintext highlighter-rouge">Connected Body</code></li>
  <li>如果<code class="language-plaintext highlighter-rouge">Connected Body</code>为空，则连接的是世界坐标系</li>
  <li>添加Joint后，Unity会自动处理物理约束和力反馈</li>
</ul>

<p><strong>示例：Hinge Joint（门铰链）</strong></p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">HingeJoint</span> <span class="n">joint</span> <span class="p">=</span> <span class="n">gameObject</span><span class="p">.</span><span class="n">AddComponent</span><span class="p">&lt;</span><span class="n">HingeJoint</span><span class="p">&gt;();</span>
<span class="n">joint</span><span class="p">.</span><span class="n">connectedBody</span> <span class="p">=</span> <span class="n">otherRigidbody</span><span class="p">;</span>
<span class="n">joint</span><span class="p">.</span><span class="n">useLimits</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>

<span class="n">JointLimits</span> <span class="n">limits</span> <span class="p">=</span> <span class="n">joint</span><span class="p">.</span><span class="n">limits</span><span class="p">;</span>
<span class="n">limits</span><span class="p">.</span><span class="n">min</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
<span class="n">limits</span><span class="p">.</span><span class="n">max</span> <span class="p">=</span> <span class="m">90</span><span class="p">;</span>
<span class="n">joint</span><span class="p">.</span><span class="n">limits</span> <span class="p">=</span> <span class="n">limits</span><span class="p">;</span>
</code></pre></div></div>

<p><strong>示例：Spring Joint（弹簧连接）</strong></p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">SpringJoint</span> <span class="n">spring</span> <span class="p">=</span> <span class="n">gameObject</span><span class="p">.</span><span class="n">AddComponent</span><span class="p">&lt;</span><span class="n">SpringJoint</span><span class="p">&gt;();</span>
<span class="n">spring</span><span class="p">.</span><span class="n">connectedBody</span> <span class="p">=</span> <span class="n">targetRigidbody</span><span class="p">;</span>
<span class="n">spring</span><span class="p">.</span><span class="n">spring</span> <span class="p">=</span> <span class="m">100f</span><span class="p">;</span> <span class="c1">//弹力系数</span>
<span class="n">spring</span><span class="p">.</span><span class="n">damper</span> <span class="p">=</span> <span class="m">5f</span><span class="p">;</span> <span class="c1">//阻尼</span>
<span class="n">spring</span><span class="p">.</span><span class="n">minDistance</span> <span class="p">=</span> <span class="m">0.5f</span><span class="p">;</span>
<span class="n">spring</span><span class="p">.</span><span class="n">maxDistance</span> <span class="p">=</span> <span class="m">2f</span><span class="p">;</span>
</code></pre></div></div>

<h2 id="joint-api">Joint API</h2>

<h3 id="class-joint基类">class Joint（基类）</h3>

<table>
  <thead>
    <tr>
      <th>常用属性/方法</th>
      <th>功能说明</th>
      <th>适用场景</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">connectedBody</code></td>
      <td>要连接的 Rigidbody</td>
      <td>所有 Joint 都继承自它</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">anchor / connectedAnchor</code></td>
      <td>关节连接点（本地坐标）</td>
      <td>精确控制连接位置</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">breakForce / breakTorque</code></td>
      <td>关节断裂阈值</td>
      <td>适用于破坏物体</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">enableCollision</code></td>
      <td>是否允许连接物体间碰撞</td>
      <td>物理交互</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">autoConfigureConnectedAnchor</code></td>
      <td>是否自动计算锚点</td>
      <td>初学者友好</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">OnJointBreak(float force)</code></td>
      <td>关节断裂事件</td>
      <td>检测爆破等效果</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">currentForce / currentTorque</code></td>
      <td>当前受力/扭矩（只读）</td>
      <td>运行时调试</td>
    </tr>
  </tbody>
</table>

<h3 id="hingejoint铰链关节">HingeJoint（铰链关节）</h3>

<table>
  <thead>
    <tr>
      <th>属性</th>
      <th>功能</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">useLimits</code></td>
      <td>是否启用旋转角限制</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">limits</code></td>
      <td>设置最小/最大角度（<code class="language-plaintext highlighter-rouge">JointLimits</code>）</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">useMotor</code></td>
      <td>是否启用电机</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">motor</code></td>
      <td>电机参数（<code class="language-plaintext highlighter-rouge">JointMotor</code>）</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">useSpring</code></td>
      <td>是否启用旋转弹簧</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">spring</code></td>
      <td>弹簧参数（<code class="language-plaintext highlighter-rouge">JointSpring</code>）</td>
    </tr>
  </tbody>
</table>

<h3 id="springjoint弹簧关节">SpringJoint（弹簧关节）</h3>

<table>
  <thead>
    <tr>
      <th>属性</th>
      <th>功能</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">spring</code></td>
      <td>弹簧力常数（刚度）</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">damper</code></td>
      <td>阻尼系数（摩擦）</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">minDistance / maxDistance</code></td>
      <td>弹簧收缩/伸展范围</td>
    </tr>
  </tbody>
</table>

<h3 id="fixedjoint固定关节">FixedJoint（固定关节）</h3>

<table>
  <thead>
    <tr>
      <th>属性</th>
      <th>功能</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>无额外属性（仅继承自 <code class="language-plaintext highlighter-rouge">Joint</code>）</td>
      <td>完全粘连连接，像焊死一样</td>
    </tr>
  </tbody>
</table>

<h3 id="characterjoint角色关节">CharacterJoint（角色关节）</h3>

<table>
  <thead>
    <tr>
      <th>属性</th>
      <th>功能</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">swingAxis</code></td>
      <td>冲击方向（用于摇摆）</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">lowTwistLimit / highTwistLimit</code></td>
      <td>扭转角度限制</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">swing1Limit / swing2Limit</code></td>
      <td>摇摆角度限制</td>
    </tr>
  </tbody>
</table>

<h3 id="configurablejoint高级自定义关节">ConfigurableJoint（高级自定义关节）</h3>

<table>
  <thead>
    <tr>
      <th>属性</th>
      <th>功能</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">xMotion / yMotion / zMotion</code></td>
      <td>平移自由度控制</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">angularXMotion / Y / Z</code></td>
      <td>旋转自由度控制</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">targetPosition / targetRotation</code></td>
      <td>驱动目标</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">xDrive / yDrive / zDrive</code></td>
      <td>平移驱动</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">angularXDrive / YZDrive</code></td>
      <td>旋转驱动</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">secondaryAxis</code></td>
      <td>定义自定义轴方向</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">projectionMode</code></td>
      <td>矛盾时修正方式（位置/旋转）</td>
    </tr>
  </tbody>
</table>]]></content><author><name>ljf12825</name></author><category term="笔记" /><category term="Unity" /><category term="Unity Component" /><category term="Physics System" /><summary type="html"><![CDATA[Joint（关节）系统是物理系统的一部分，用于将两个Rigidbody通过某种方式连接起来，从而形成如机械臂、门铰链、车轮悬挂等复杂的物理结构]]></summary></entry><entry><title type="html">Character Controller</title><link href="http://localhost:4000/posts/2025-06-07-Character-Controller/" rel="alternate" type="text/html" title="Character Controller" /><published>2025-06-01T00:00:00+08:00</published><updated>2025-06-01T00:00:00+08:00</updated><id>http://localhost:4000/posts/Character-Controller</id><content type="html" xml:base="http://localhost:4000/posts/2025-06-07-Character-Controller/"><![CDATA[]]></content><author><name>ljf12825</name></author><category term="笔记" /><category term="Unity" /><category term="Unity Component" /><category term="Physics System" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Object Pooling</title><link href="http://localhost:4000/posts/2025-06-06-Object-Pooling/" rel="alternate" type="text/html" title="Object Pooling" /><published>2025-06-01T00:00:00+08:00</published><updated>2025-06-01T00:00:00+08:00</updated><id>http://localhost:4000/posts/Object-Pooling</id><content type="html" xml:base="http://localhost:4000/posts/2025-06-06-Object-Pooling/"><![CDATA[]]></content><author><name>ljf12825</name></author><category term="笔记" /><category term="Unity" /><category term="Unity System" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Articulation Body</title><link href="http://localhost:4000/posts/2025-06-07-Articulation-Body/" rel="alternate" type="text/html" title="Articulation Body" /><published>2025-06-01T00:00:00+08:00</published><updated>2025-06-01T00:00:00+08:00</updated><id>http://localhost:4000/posts/Articulation-Body</id><content type="html" xml:base="http://localhost:4000/posts/2025-06-07-Articulation-Body/"><![CDATA[]]></content><author><name>ljf12825</name></author><category term="笔记" /><category term="Unity" /><category term="Unity Component" /><category term="Physics System" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Addressables System</title><link href="http://localhost:4000/posts/2025-06-05-Addressables-System/" rel="alternate" type="text/html" title="Addressables System" /><published>2025-06-01T00:00:00+08:00</published><updated>2025-06-01T00:00:00+08:00</updated><id>http://localhost:4000/posts/Addressables-System</id><content type="html" xml:base="http://localhost:4000/posts/2025-06-05-Addressables-System/"><![CDATA[]]></content><author><name>ljf12825</name></author><category term="笔记" /><category term="Unity" /><category term="Unity System" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Import Assets</title><link href="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Import-assets.html" rel="alternate" type="text/html" title="Import Assets" /><published>2025-06-01T00:00:00+08:00</published><updated>2025-06-01T00:00:00+08:00</updated><id>http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Import-assets</id><content type="html" xml:base="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Import-assets.html"><![CDATA[<p>Unity支持多种格式的资源文件，并能自动识别并进行初步处理</p>

<h2 id="资源导入基本流程">资源导入基本流程</h2>
<p><strong>1.将资源文件拖入<code class="language-plaintext highlighter-rouge">Assets</code>目录中（Unity会自动导入）</strong><br />
<strong>2.在Inspector面板中查看导入设置</strong><br />
<strong>3.配置相关参数，比如压缩方式、贴图类型、是否生成碰撞体等</strong><br />
<strong>4.使用资源（拖到场景、作为材质贴图、挂到AudioSource等）</strong></p>

<h2 id="模型">模型</h2>

<h3 id="支持格式">支持格式</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">.fbx</code>推荐</li>
  <li><code class="language-plaintext highlighter-rouge">.obj</code></li>
  <li><code class="language-plaintext highlighter-rouge">.dae</code>（Collada）</li>
  <li><code class="language-plaintext highlighter-rouge">.blend</code>（需要Blender）</li>
</ul>

<h3 id="导入流程">导入流程</h3>
<p>1.拖拽<code class="language-plaintext highlighter-rouge">.fbx</code>文件到<code class="language-plaintext highlighter-rouge">Assets</code>文件夹<br />
2.选中模型文件，查看<code class="language-plaintext highlighter-rouge">Inspector</code>的导入设置</p>
<ul>
  <li>Scale Factor：缩放（一般保持默认）</li>
  <li>Import Animations：是否导入动画</li>
  <li>Import Materials：是否导入材质</li>
  <li>Generate Colliders：是否自动生成碰撞体</li>
</ul>

<h3 id="导入后组成">导入后组成</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Model</code>: 3D网格</li>
  <li><code class="language-plaintext highlighter-rouge">Rig</code>（如果有骨骼）：用于动画绑定</li>
  <li><code class="language-plaintext highlighter-rouge">Animation</code>：包含的动画片段</li>
  <li><code class="language-plaintext highlighter-rouge">Materials</code>：自动生成或关联的材质</li>
</ul>

<h2 id="贴图">贴图</h2>

<h3 id="支持格式-1">支持格式</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">.png</code>、<code class="language-plaintext highlighter-rouge">.jpg</code>、<code class="language-plaintext highlighter-rouge">.tga</code>、<code class="language-plaintext highlighter-rouge">.psd</code>（支持图层）等</li>
</ul>

<h3 id="导入流程-1">导入流程</h3>

<p>1.拖入图片文件
2.在Inspector中设置：</p>
<ul>
  <li>sRGB（Color Texture）：颜色贴图用，法线贴图需取消勾选</li>
  <li>Alpha Is Transparency：如果使用透明通道</li>
  <li>Wrap Mode：Repeat（平铺）或Clamp（拉伸）</li>
  <li>Filter Mode：Bilinear、Trilinear、Point（像素风）</li>
  <li>Compression：高压缩（小体积）还是高质量（清晰）</li>
  <li>Texture Type:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">Default</code>（通用）</li>
      <li><code class="language-plaintext highlighter-rouge">Sprite</code>（用于UI）</li>
      <li><code class="language-plaintext highlighter-rouge">Normal map</code>（法线贴图）</li>
      <li><code class="language-plaintext highlighter-rouge">Lightmap</code>（光照图）</li>
    </ul>
  </li>
</ul>

<h2 id="音频">音频</h2>

<h3 id="支持格式-2">支持格式</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">.mp3</code>（压缩）</li>
  <li><code class="language-plaintext highlighter-rouge">.wav</code>（无损）</li>
  <li><code class="language-plaintext highlighter-rouge">.ogg</code>（高效）</li>
  <li><code class="language-plaintext highlighter-rouge">.aiff</code></li>
</ul>

<h2 id="导入流程-2">导入流程</h2>

<p>1.拖入音频文件<br />
2.在<code class="language-plaintext highlighter-rouge">Inspector</code>中设置：</p>
<ul>
  <li>Load Type：
    <ul>
      <li><code class="language-plaintext highlighter-rouge">Decompress On Load</code>（加载时解压，适合短音效）</li>
      <li><code class="language-plaintext highlighter-rouge">Streaming</code>（边播放边加载，适合背景音乐）</li>
    </ul>
  </li>
  <li>Compression Format:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">Vorbis</code>、<code class="language-plaintext highlighter-rouge">ADPCM</code>、<code class="language-plaintext highlighter-rouge">PCM</code></li>
    </ul>
  </li>
  <li>3D Sound：是否启用3D空间化</li>
  <li>Loop：是否循环播放</li>
</ul>

<blockquote>
  <p><strong>资源组织建议：</strong> 使用好的文件夹结构和命名习惯，可以极大提高开发效率</p>
</blockquote>]]></content><author><name>ljf12825</name></author><category term="笔记" /><category term="Unity" /><summary type="html"><![CDATA[Unity支持多种格式的资源文件，并能自动识别并进行初步处理]]></summary></entry><entry><title type="html">Layer</title><link href="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Layer.html" rel="alternate" type="text/html" title="Layer" /><published>2025-06-01T00:00:00+08:00</published><updated>2025-06-01T00:00:00+08:00</updated><id>http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Layer</id><content type="html" xml:base="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Layer.html"><![CDATA[<p>在Unity中，Layer是要给非常重要的系统<br />
它主要用于：</p>
<ul>
  <li>控制物体的渲染与相机的可见性</li>
  <li>控制物理碰撞（配合Layer Collision Matrix）</li>
  <li>通过脚本进行物体分类和筛选</li>
</ul>

<h2 id="什么是layer">什么是Layer</h2>

<p>Layer是给GameObject打的“标签”，但它和<code class="language-plaintext highlighter-rouge">Tag</code>不一样，Layer是用于功能性控制的，特别在：</p>
<ul>
  <li>摄像机的Culling Mask</li>
  <li>光照影响（Light Culling）</li>
  <li>物理碰撞（Physics Layer）</li>
  <li>射线检测（Raycast Layer）</li>
</ul>

<h2 id="layer的使用场景">Layer的使用场景</h2>
<h3 id="1摄像机视野控制culling-mask">1.摄像机视野控制（Culling Mask）</h3>
<p>在Camera组件中，你可以设置</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Culling Mask -&gt; 选择哪些Layer可以被该相机看到
</code></pre></div></div>

<p><strong>用途：</strong></p>
<ul>
  <li>UI相机只看UI层</li>
  <li>小地图相机只看敌人层</li>
  <li>分屏镜头每个只看自己的部分</li>
</ul>

<h3 id="2物理碰撞控制layer-collision-matrix">2.物理碰撞控制（Layer Collision Matrix）</h3>
<p>在菜单中：</p>

<div class="language-nginx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">Edit</span> <span class="s">-&gt;</span> <span class="s">Project</span> <span class="s">Settings</span> <span class="s">-&gt;</span> <span class="s">Physics</span>
</code></pre></div></div>

<p>你可以看到Layer Collision Matrix，它控制：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>哪些Layer和哪些Layer能发生物理碰撞
</code></pre></div></div>

<p><strong>用途：</strong></p>
<ul>
  <li>玩家层与敌人层可以碰撞，但不和自身碰撞</li>
  <li>子弹不撞自己</li>
  <li>角色不被UI的Collider打断</li>
</ul>

<h3 id="3射线检测">3.射线检测</h3>
<p>可以通过Layer来控制射线是否命中某个对象</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">layerMask</span> <span class="p">=</span> <span class="m">1</span> <span class="p">&lt;&lt;</span> <span class="n">LayerMask</span><span class="p">.</span><span class="nf">NameToLayer</span><span class="p">(</span><span class="s">"Enemy"</span><span class="p">);</span>
<span class="k">if</span> <span class="p">(</span><span class="n">Physics</span><span class="p">.</span><span class="nf">Raycast</span><span class="p">(</span><span class="n">ray</span><span class="p">,</span> <span class="k">out</span> <span class="n">hit</span><span class="p">,</span> <span class="m">100f</span><span class="p">,</span> <span class="n">layerMask</span><span class="p">))</span> <span class="n">Debug</span><span class="p">.</span><span class="nf">Log</span><span class="p">(</span><span class="s">"Hit enemy"</span><span class="p">);</span>
</code></pre></div></div>

<p>也可以多层合并：</p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">mask</span> <span class="p">=</span> <span class="p">(</span><span class="m">1</span> <span class="p">&lt;&lt;</span> <span class="n">LayerMask</span><span class="p">.</span><span class="nf">NameToLayer</span><span class="p">(</span><span class="s">"Enemy"</span><span class="p">))</span> <span class="p">|</span> <span class="p">(</span><span class="m">1</span> <span class="p">&lt;&lt;</span> <span class="n">LayerMask</span><span class="p">.</span><span class="nf">NameToLayer</span><span class="p">(</span><span class="s">"NPC"</span><span class="p">));</span>
</code></pre></div></div>
<h2 id="内置与自定义layer">内置与自定义Layer</h2>

<h3 id="内置layerunity默认的">内置Layer（Unity默认的）</h3>

<table>
  <thead>
    <tr>
      <th>编号</th>
      <th>名称</th>
      <th>说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>Default</td>
      <td>默认层</td>
    </tr>
    <tr>
      <td>4</td>
      <td>Water</td>
      <td>水体特效</td>
    </tr>
    <tr>
      <td>5</td>
      <td>UI</td>
      <td>UI 专用</td>
    </tr>
  </tbody>
</table>

<h3 id="自定义layer">自定义Layer</h3>
<p>Unity允许你最多使用32个Layer（编号 0~31），其中前几个是保留的<br />
自定义方式：</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">选中</span> <span class="n">GameObject</span> <span class="o">-&gt;</span> <span class="n">Inspector</span> <span class="o">-&gt;</span> <span class="n">Layer</span> <span class="o">-&gt;</span> <span class="k">Add</span> <span class="n">Layer</span><span class="p">...</span>
</code></pre></div></div>
<p>添加后可为GameObject设置：</p>
<div class="language-nginx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">Layer</span> <span class="s">-&gt;</span> <span class="s">你刚添加的层名</span>
</code></pre></div></div>
<h2 id="layer与tag的区别">Layer与Tag的区别</h2>

<table>
  <thead>
    <tr>
      <th>特性</th>
      <th>Layer</th>
      <th>Tag</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>数量限制</td>
      <td>最多 32 个</td>
      <td>无限制</td>
    </tr>
    <tr>
      <td>用于渲染控制</td>
      <td>✅</td>
      <td>❌</td>
    </tr>
    <tr>
      <td>用于物理控制</td>
      <td>✅</td>
      <td>❌</td>
    </tr>
    <tr>
      <td>用于分类查找</td>
      <td>有限制（用 LayerMask）</td>
      <td>✅（用 CompareTag 等）</td>
    </tr>
    <tr>
      <td>性能优化</td>
      <td>✅（用于剔除、射线过滤）</td>
      <td>❌</td>
    </tr>
  </tbody>
</table>

<h3 id="建议">建议</h3>
<ul>
  <li>给每种功能的对象分配专属Layer</li>
  <li>摄像机、光源、UI、Trigger检测都应依赖Layer控制逻辑</li>
</ul>]]></content><author><name>ljf12825</name></author><category term="笔记" /><category term="Unity" /><category term="Unity System" /><summary type="html"><![CDATA[在Unity中，Layer是要给非常重要的系统 它主要用于： 控制物体的渲染与相机的可见性 控制物理碰撞（配合Layer Collision Matrix） 通过脚本进行物体分类和筛选]]></summary></entry></feed>