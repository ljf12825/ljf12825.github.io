<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-06-05T22:10:55+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">ljf12825’s Blog</title><subtitle>Efficient &amp; Elegant</subtitle><author><name>Jeff Lee</name><email>2548278761@qq.com</email></author><entry><title type="html">Collider &amp;amp; Trigger</title><link href="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Collider-and-Trigger.html" rel="alternate" type="text/html" title="Collider &amp;amp; Trigger" /><published>2025-06-01T00:00:00+08:00</published><updated>2025-06-01T00:00:00+08:00</updated><id>http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Collider-and-Trigger</id><content type="html" xml:base="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Collider-and-Trigger.html"><![CDATA[<p>Unity中的碰撞体是物理系统的重要组成部分，负责定义游戏对象的形状以进行碰撞检测。简单来说，Collider是一个无形的边界，用于检测物体是否接触或重叠，从而触发碰撞事件和物理响应</p>

<h2 id="什么是collider">什么是Collider</h2>
<p>Collider是附加在游戏对象上的组件，用于告诉物理引擎这个对象的碰撞范围。Collider本身不会渲染形状，只是一个隐形的物理边界</p>

<h2 id="常见的collider类型">常见的Collider类型</h2>
<ul>
  <li>BoxCollider<br />
立方体形状的碰撞体，适合方形或长方体物体</li>
  <li>SphereCollider
球形碰撞体，适合球形或圆形物体</li>
  <li>CapsuleCollider
胶囊碰撞体，适合人物、柱子等</li>
  <li>MeshCollider
使用自定义网格模型做碰撞体，适合复杂形状，性能较差，且通常用于静态物体</li>
  <li>WheelCollider
专门用于车辆轮胎的碰撞和物理模拟</li>
</ul>

<h2 id="collider和rigidbody的关系">Collider和Rigidbody的关系</h2>
<ul>
  <li>Collider只负责检测碰撞，不会自定产生物理运动</li>
  <li>Rigidbody组件负责物理运动和动力学</li>
  <li>一个没有Rigidbody的物体的Collider会被当作“静态碰撞体”使用（静态障碍物），不会移动也不响应物理力</li>
  <li>一个有Rigidbody的物体可以在物理引擎驱动下移动，Collider会随物体运动</li>
</ul>

<h2 id="collider-panel">Collider Panel</h2>
<h3 id="box-collider">Box Collider</h3>
<p><img src="/assets/images/BoxColliderPanel.jpg" alt="BoxColliderPanel" /></p>
<ul>
  <li>IsTrigger
默认false，此时Collider是实体碰撞体，会阻挡其他物体，发生物理碰撞和反弹<br />
勾选时，Collider变成Trigger，不会阻挡其他物体，但会检测进入、离开和停留事件，可以用来做区域检测、事件触发等</li>
  <li>Provides Contacts
用于物理引擎的碰撞检测和接触点信息提供<br />
默认false，Collider可能只报告碰撞发生，但不提供详细的接触点信息，这样可以节省一些计算资源<br />
勾选后，Collider会提供详细的碰撞接触点信息，这样物理引擎在碰撞时，可以把碰撞的具体接触点信息暴露出来，供脚本或物理系统使用
    <div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">UnityEngine</span><span class="p">;</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">CollisionPointExample</span> <span class="p">:</span> <span class="n">MonoBehaviour</span>
<span class="p">{</span>
  <span class="k">void</span> <span class="nf">OnCollisionEnter</span><span class="p">(</span><span class="n">Collision</span> <span class="n">collision</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="k">foreach</span> <span class="p">(</span><span class="n">ContactPoint</span> <span class="n">contact</span> <span class="k">in</span> <span class="n">collision</span><span class="p">.</span><span class="n">contacts</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="c1">//接触点位置</span>
      <span class="n">Vector3</span> <span class="n">contactPoint</span> <span class="p">=</span> <span class="n">contact</span><span class="p">.</span><span class="n">point</span><span class="p">;</span>
      <span class="c1">//接触点法线方向</span>
      <span class="n">Vector3</span> <span class="n">contactNormal</span> <span class="p">=</span> <span class="n">contact</span><span class="p">.</span><span class="n">normal</span><span class="p">;</span>

      <span class="n">Debug</span><span class="p">.</span><span class="nf">Log</span><span class="p">(</span><span class="s">$"</span><span class="p">{</span><span class="n">contactPoint</span><span class="p">}</span><span class="s">, </span><span class="p">{</span><span class="n">contactNormal</span><span class="p">}</span><span class="s">"</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <p>如果时触发碰撞，IsTrigger勾选情况下，用的是OnTriggerEnter(Collider other)，这个回调中没有接触点信息，只能检测触发</p>
  </li>
  <li>Material
指的是Physics Material，用于控制物理行为的材质<br />
Create -&gt; Physics Material，编辑后拖入使用<br />
作用：Physics Material用于定义物体在碰撞时的物理特性，比如摩擦力（Friction）、弹性（Bounciness）
常用属性
    <ul>
      <li>Dynamic Friction 动摩擦力</li>
      <li>Static Friction 静摩擦力</li>
      <li>Bounciness 弹力（0到1之间，1表示完全反弹）</li>
      <li>Friction Combine 摩擦组合方式（与另一个碰撞体交互时如何合成摩擦）</li>
      <li>Bounce Combine 弹性组合方式（与另一个碰撞体交互时如何合成弹性）</li>
    </ul>
  </li>
  <li>Center
    <ul>
      <li>指的是碰撞体在物体局部坐标系中的中心点位置</li>
      <li>类型是Vector3</li>
      <li>不会移动GameObject本身，只会改变碰撞体的位置</li>
    </ul>
  </li>
  <li>Size
    <ul>
      <li>指碰撞体的尺寸</li>
      <li>类型是Vector3</li>
      <li>控制这个碰撞盒子的大小</li>
    </ul>
  </li>
  <li>Layer Overrides
    <ul>
      <li>Layer Override Priority
用于控制多个Collider在同一物体或子物体上时，哪个Collider的物理层优先生效<br />
如果一个物体上有多个Collider，并且它们分别设置了不同的Layer，Unity需要一个优先级来判断最终物体的碰撞行为应该归属哪个Layer<br />
When 2 Colliders have conflicting overrides, the settings of the collider with the higher priority are taken</li>
      <li>Include Layers
Layers to include when producing collisions</li>
      <li>Exclude Layers
Layers to exclude when producing collisions</li>
    </ul>
  </li>
</ul>

<h3 id="capsulecollider">CapsuleCollider</h3>
<p><img src="/assets/images/CapsuleColliderPanel.jpg" alt="CapsuleColliderPanel" /></p>
<ul>
  <li>Edit Collider
显示Collider边界<br />
Hold Alt after clicking control handle to pin center in place（中心缩放） 
Hold Shift after clicking control handle to scale uniformly（等比缩放）</li>
  <li>Direction
The axis of the capsule’s lengthwise orientation in the GameObject’s local space</li>
</ul>

<h2 id="对齐collider和gameobject">对齐Collider和GameObject</h2>
<p>要保证Collider与GameObject完全重合，要让Collider的Center对准模型的中心，并让他的Size或Radius匹配模型的尺寸</p>

<h3 id="方法一使用mesh-renderer的bounds手动对齐">方法一：使用Mesh Renderer的Bounds手动对齐</h3>
<p>1.选中GameObject<br />
2.查看Inspector面板中的Mesh Renderer或Mesh Filter：</p>
<ul>
  <li>记下它的Bounds和Center</li>
</ul>

<p>3.在Collider中手动设置</p>

<h3 id="方法二使用unity自动对齐">方法二：使用Unity自动对齐</h3>
<p>在Inspector面板中，点击组件右上角的菜单-&gt;<code class="language-plaintext highlighter-rouge">Reset</code><br />
或删除后重新添加Box Collider，Unity会自动用Mesh尺寸初始化</p>
<blockquote>
  <p>注意：自动添加只对Unity支持的标志Mesh效果好，对导入模型FBX有时不准确</p>
</blockquote>

<h3 id="方法三通过脚本自动匹配mesh-bounds">方法三：通过脚本自动匹配Mesh Bounds</h3>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">UnityEngine</span><span class="p">;</span>

<span class="p">[</span><span class="nf">RequireComponent</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">BoxCollider</span><span class="p">))]</span>
<span class="k">public</span> <span class="k">class</span> <span class="nc">FitColliderToMesh</span> <span class="p">:</span> <span class="n">MonoBehaviour</span>
<span class="p">{</span>
  <span class="k">void</span> <span class="nf">Start</span><span class="p">()</span>
  <span class="p">{</span>
    <span class="kt">var</span> <span class="n">mesh</span> <span class="p">=</span> <span class="n">GetComponent</span><span class="p">&lt;</span><span class="n">MeshFilter</span><span class="p">&gt;().</span><span class="n">sharedMesh</span><span class="p">;</span>
    <span class="kt">var</span> <span class="n">bounds</span> <span class="p">=</span> <span class="n">mesh</span><span class="p">.</span><span class="n">bounds</span><span class="p">;</span>

    <span class="kt">var</span> <span class="n">collider</span> <span class="p">=</span> <span class="n">GetComponent</span><span class="p">&lt;</span><span class="n">BoxCollider</span><span class="p">&gt;();</span>
    <span class="n">collider</span><span class="p">.</span><span class="n">center</span> <span class="p">=</span> <span class="n">bounds</span><span class="p">.</span><span class="n">center</span><span class="p">;</span>
    <span class="n">collider</span><span class="p">.</span><span class="n">size</span> <span class="p">=</span> <span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>注意：<code class="language-plaintext highlighter-rouge">mesh.bounds</code>是局部坐标系下的范围<br />
如果模型被缩放，需要做缩放修正</p>

<h3 id="检查是否重合的方法">检查是否重合的方法</h3>
<p>1.Gizmo显示：Scene视图中选中物体，勾选Gizmo，可以看到Collider的框是否保住模型<br />
2.调试代码验证接触：你可以在运行是打印<code class="language-plaintext highlighter-rouge">Collider.contacts[0].point</code>看碰撞点位置是否符合预期<br />
3.把Mesh设成透明或关闭渲染，观察Collider是否贴合</p>]]></content><author><name>ljf12825</name></author><category term="笔记" /><category term="Unity" /><category term="Unity Component" /><category term="Physics System" /><summary type="html"><![CDATA[Unity中的碰撞体是物理系统的重要组成部分，负责定义游戏对象的形状以进行碰撞检测。简单来说，Collider是一个无形的边界，用于检测物体是否接触或重叠，从而触发碰撞事件和物理响应]]></summary></entry><entry><title type="html">Rigibody</title><link href="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Rigidbody.html" rel="alternate" type="text/html" title="Rigibody" /><published>2025-06-01T00:00:00+08:00</published><updated>2025-06-01T00:00:00+08:00</updated><id>http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Rigidbody</id><content type="html" xml:base="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Rigidbody.html"><![CDATA[<p>在Unity中，<code class="language-plaintext highlighter-rouge">Rigidbody</code>是一个用于实现物理行为的组件，它允许你的游戏对象受力、重力、碰撞等真实世界的物理规则影响</p>

<h2 id="rigidbody的基本功能">Rigidbody的基本功能</h2>
<p>当你给一个<code class="language-plaintext highlighter-rouge">GameObject</code>添加Rigibody后，它具备以下能力：</p>

<table>
  <thead>
    <tr>
      <th>功能</th>
      <th>描述</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>重力</td>
      <td>会受到 Unity 世界的重力影响。</td>
    </tr>
    <tr>
      <td>力作用</td>
      <td>可通过 <code class="language-plaintext highlighter-rouge">AddForce()</code> 施加力。</td>
    </tr>
    <tr>
      <td>碰撞</td>
      <td>可与带有 <code class="language-plaintext highlighter-rouge">Collider</code> 的物体发生物理碰撞。</td>
    </tr>
    <tr>
      <td>移动</td>
      <td>可通过物理方式（而不是直接修改 transform）移动。</td>
    </tr>
  </tbody>
</table>

<h3 id="rigidbodypanel">RigidbodyPanel</h3>

<p><img src="/assets/images/RigidbodyPanel.jpg" alt="RigidbodyPanel" /></p>

<p><strong>基础物理参数</strong></p>

<table>
  <thead>
    <tr>
      <th>参数名</th>
      <th>作用</th>
      <th>默认值</th>
      <th>建议用法</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>Mass</strong>（质量）</td>
      <td>控制惯性、碰撞反应</td>
      <td><code class="language-plaintext highlighter-rouge">1</code></td>
      <td>设为真实世界比例（如车 1000、人 70）</td>
    </tr>
    <tr>
      <td><strong>Drag</strong>（线性阻力）</td>
      <td>模拟空气/水的阻力（减速）</td>
      <td><code class="language-plaintext highlighter-rouge">0</code></td>
      <td>移动物体逐渐停止，可设为 <code class="language-plaintext highlighter-rouge">1~5</code></td>
    </tr>
    <tr>
      <td><strong>Angular Drag</strong>（角阻力）</td>
      <td>减缓旋转速度</td>
      <td><code class="language-plaintext highlighter-rouge">0.05</code></td>
      <td>防止物体无限旋转，常设为 <code class="language-plaintext highlighter-rouge">0.1~0.5</code></td>
    </tr>
  </tbody>
</table>

<ul>
  <li><strong>Automatic Center Of Mass</strong>（自动质心，默认为true）
    <ul>
      <li>Unity会根据物体的形状（Collider）和质量分布，自动计算Rigidbody的中心点</li>
      <li>通常质心在物体的几何中心，但加多个Collider后可能偏移</li>
      <li>这是大多数情况下推荐的方式，因为它物理上是合理的</li>
    </ul>
  </li>
</ul>

<p><strong>手动设置质心</strong></p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">rb</span><span class="p">.</span><span class="n">centerOfMass</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Vector3</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="p">-</span><span class="m">1f</span><span class="p">,</span> <span class="m">0</span><span class="p">);</span> <span class="c1">//手动设一个偏移量</span>
</code></pre></div></div>
<blockquote>
  <p>设置后将覆盖自动计算值，适用于如车辆、飞船平衡优化、ragdoll调整等高级用途</p>
</blockquote>

<p>可视化质心方法：</p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">void</span> <span class="nf">OnDrawGizmo</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">rb</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">Gizmos</span><span class="p">.</span><span class="n">color</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">red</span><span class="p">;</span>
        <span class="n">Gizmos</span><span class="p">.</span><span class="nf">DrawSphere</span><span class="p">(</span><span class="n">rb</span><span class="p">.</span><span class="n">worldCenterOfMess</span><span class="p">,</span> <span class="m">0.1f</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>为什么质心重要</strong></p>

<table>
  <thead>
    <tr>
      <th>应用场景</th>
      <th>影响</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>飞船 / 载具</td>
      <td>若质心偏上，容易翻车或晃动</td>
    </tr>
    <tr>
      <td>摆锤 / 吊挂物体</td>
      <td>旋转效果中心点取决于质心</td>
    </tr>
    <tr>
      <td>多 Collider 组合物体</td>
      <td>自动质心可能不在视觉中心</td>
    </tr>
    <tr>
      <td>被力击打（AddForce）</td>
      <td>力不作用在质心会引起旋转（力矩）</td>
    </tr>
  </tbody>
</table>

<p><strong>Automatic Tensor</strong>（自动惯性张量，默认为true）</p>

<p><strong>什么是Tensor</strong></p>
<ul>
  <li>在物理学中，惯性张量是描述刚体如何响应旋转力（力矩）的数学结构</li>
  <li>它是质量分布的一个三维矩阵，决定了刚体绕每个轴的旋转惯性</li>
  <li>简单理解：惯性张量 = “旋转版的质量”</li>
</ul>

<p><strong>默认自动计算惯性张量</strong></p>
<ul>
  <li>Unity默认根据物体的<code class="language-plaintext highlighter-rouge">Collider</code>形状和<code class="language-plaintext highlighter-rouge">Mass</code>自动计算惯性张量</li>
  <li>这就是<code class="language-plaintext highlighter-rouge">Rigidbody.inertiaTensor</code>和<code class="language-plaintext highlighter-rouge">inertiaTensorRotation</code>的来源</li>
  <li>所以刚体自然会表现出“越大越难转”“形状影响旋转惯性”等真实行为</li>
</ul>

<p><strong>手动设置惯性张量（自动覆盖）</strong></p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">rb</span><span class="p">.</span><span class="n">inertiaTensor</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Vector3</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">1</span><span class="p">);</span> <span class="c1">//自定义旋转惯性</span>
<span class="n">rb</span><span class="p">.</span><span class="n">inertiaTensorRotation</span> <span class="p">=</span> <span class="n">Quaternion</span><span class="p">.</span><span class="n">identity</span><span class="p">;</span> <span class="c1">//张量方向</span>
</code></pre></div></div>
<p>但这样做有前提条件：</p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">rb</span><span class="p">.</span><span class="nf">ResetInertiaTensor</span><span class="p">();</span> <span class="c1">//可重置为自动计算值</span>
</code></pre></div></div>
<blockquote>
  <p>设置之前你要禁用自动张量</p>
</blockquote>

<p><strong>什么情况需要自定义惯性张量</strong></p>

<table>
  <thead>
    <tr>
      <th>应用</th>
      <th>目的</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>物理模拟器 / 实验工具</td>
      <td>精确控制旋转行为</td>
    </tr>
    <tr>
      <td>异形刚体（如飞船、复杂机器人）</td>
      <td>人为调整旋转惯性，防止旋转太快或不稳定</td>
    </tr>
    <tr>
      <td>某些游戏设计</td>
      <td>让角色或物体转得更“重”或更“灵活”</td>
    </tr>
    <tr>
      <td>制作旋转玩具 / 陀螺仪</td>
      <td>可控惯性带来物理可玩性</td>
    </tr>
  </tbody>
</table>

<p><strong>运动状态设置</strong></p>

<table>
  <thead>
    <tr>
      <th>参数</th>
      <th>作用</th>
      <th>默认</th>
      <th>使用场景</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>Use Gravity</strong></td>
      <td>是否受重力影响</td>
      <td>true</td>
      <td>用于自由下落、角色跳跃等</td>
    </tr>
    <tr>
      <td><strong>Is Kinematic</strong></td>
      <td>是否由代码控制，不参与物理</td>
      <td>false</td>
      <td>静态平台、动画控制角色等</td>
    </tr>
  </tbody>
</table>

<p><strong>Interpolate（插值）</strong></p>

<table>
  <thead>
    <tr>
      <th>选项</th>
      <th>说明</th>
      <th>使用场景</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>None</strong></td>
      <td>不插值，可能抖动</td>
      <td>一般默认</td>
    </tr>
    <tr>
      <td><strong>Interpolate</strong></td>
      <td>使用上一帧数据进行平滑</td>
      <td>摄像机跟随刚体时防抖动</td>
    </tr>
    <tr>
      <td><strong>Extrapolate</strong></td>
      <td>使用下一帧数据预测位置</td>
      <td>一般不推荐，容易导致位置错误</td>
    </tr>
  </tbody>
</table>

<blockquote>
  <p>插值仅影响视觉表现，不影响物理逻辑，适合处理低帧率时的视觉平滑</p>
</blockquote>

<p><strong>Collision Detection（碰撞检测模式）</strong></p>

<table>
  <thead>
    <tr>
      <th>模式</th>
      <th>描述</th>
      <th>使用场景</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>Discrete</strong></td>
      <td>默认，普通对象</td>
      <td>慢速运动、低精度要求</td>
    </tr>
    <tr>
      <td><strong>Continuous</strong></td>
      <td>防穿透</td>
      <td>快速移动物体（如子弹）</td>
    </tr>
    <tr>
      <td><strong>Continuous Dynamic</strong></td>
      <td>防止快速刚体穿过静态物体</td>
      <td>用于导弹、飞行物</td>
    </tr>
    <tr>
      <td><strong>Continuous Speculative</strong></td>
      <td>预测未来路径是否碰撞</td>
      <td>用于需要超高稳定性的对象</td>
    </tr>
  </tbody>
</table>

<blockquote>
  <p>连续检测会增加计算量，不建议用于大量物体</p>
</blockquote>

<p><strong>Constraints（冻结轴向）</strong>
用于锁定物体的移动或旋转，防止不受控的漂移或翻滚</p>

<table>
  <thead>
    <tr>
      <th>选项</th>
      <th>说明</th>
      <th>常用组合</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Freeze Position X/Y/Z</td>
      <td>锁定对应轴上的移动</td>
      <td>冻住平台等静态物体</td>
    </tr>
    <tr>
      <td>Freeze Rotation X/Y/Z</td>
      <td>锁定对应轴上的旋转</td>
      <td>防止角色倒地、车轮翻转</td>
    </tr>
    <tr>
      <td>Freeze All</td>
      <td>锁定所有轴</td>
      <td>彻底不动，用于静态物体</td>
    </tr>
  </tbody>
</table>

<p><strong>Layer Overrides（图层覆盖）</strong><br />
允许刚体在物理世界中临时使用不同的Layer设置进行碰撞和检测计算，不会影响物体本身的Layer<br />
影响范围：物理模拟（碰撞、Raycast、Force、Overlap等），不会影响渲染、标签识别、脚本逻辑</p>
<ul>
  <li>Include Layers
    <ul>
      <li>表示允许此刚体与哪些Layer的对象发生物理交互</li>
      <li>这实质上是一个LayerMask</li>
    </ul>
  </li>
  <li>Exclude Layers
    <ul>
      <li>表示在物理交互中忽略的Layer
        <blockquote>
          <p>Exclude Layers优先于Include Layers</p>
        </blockquote>
      </li>
    </ul>
  </li>
</ul>

<h2 id="rigidbody常见用法">Rigidbody常见用法：</h2>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Rigidbody</span> <span class="n">rb</span> <span class="p">=</span> <span class="n">GetComponent</span><span class="p">&lt;</span><span class="n">Rigidbody</span><span class="p">&gt;();</span>

<span class="n">rb</span><span class="p">.</span><span class="nf">AddForce</span><span class="p">(</span><span class="n">Vector3</span><span class="p">.</span><span class="n">forward</span> <span class="p">*</span> <span class="m">10f</span><span class="p">);</span> <span class="c1">//施加一个向前的力</span>
<span class="n">rb</span><span class="p">.</span><span class="nf">AddTorque</span><span class="p">(</span><span class="n">Vector3</span><span class="p">.</span><span class="n">up</span> <span class="p">*</span> <span class="m">5f</span><span class="p">);</span> <span class="c1">//添加一个旋转力</span>
<span class="n">rb</span><span class="p">.</span><span class="nf">MovePosition</span><span class="p">(</span><span class="n">newPos</span><span class="p">);</span> <span class="c1">//平滑低移动Rigidbody</span>
<span class="n">rb</span><span class="p">.</span><span class="n">velocity</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Vector3</span><span class="p">(</span><span class="m">5</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">);</span> <span class="c1">//设置线速度</span>
</code></pre></div></div>

<h3 id="iskinematic-和-非-kinematic">isKinematic 和 非 Kinematic</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">isKinematic = false</code>（默认）：受物理引擎控制（例如重力、碰撞、AddForce）</li>
  <li><code class="language-plaintext highlighter-rouge">isKinematic = true</code>：完全由你控制<code class="language-plaintext highlighter-rouge">transform</code>或<code class="language-plaintext highlighter-rouge">MovePosition()</code>，不会被物理引擎影响</li>
</ul>

<p>用途：</p>
<ul>
  <li>Kinematic常用于移动平台、动画角色骨骼、摄像机跟随等</li>
</ul>

<h3 id="rigidbody-vs-transform控制">Rigidbody vs Transform控制</h3>
<p><strong>不要在有Rigidbody的物体上直接用<code class="language-plaintext highlighter-rouge">transform.position += ...</code>来移动，这会跳过物理系统，导致碰撞问题</strong></p>

<p>正确做法：</p>
<ul>
  <li>用<code class="language-plaintext highlighter-rouge">Rigidbody.MovePosition()</code>移动</li>
  <li>或使用<code class="language-plaintext highlighter-rouge">AddForce()</code>、<code class="language-plaintext highlighter-rouge">velocity</code>等物理方式</li>
</ul>

<p>问题本质：
在Unity中，Rigidbody是由物理系统控制的，一旦你给GameObject添加了Rigidbody，它的位置和旋转应该只通过物理系统来控制。</p>

<p>使用<code class="language-plaintext highlighter-rouge">transform.position += ...</code>会出现的问题</p>

<table>
  <thead>
    <tr>
      <th>问题</th>
      <th>说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>绕过物理引擎</strong></td>
      <td><code class="language-plaintext highlighter-rouge">transform.position += ...</code> 是<strong>立即改变 Transform 的位置</strong>，Unity 物理系统（PhysX）对此毫不知情</td>
    </tr>
    <tr>
      <td><strong>不会产生碰撞检测</strong></td>
      <td>物体“穿越”其他碰撞体而不产生物理响应（穿模）</td>
    </tr>
    <tr>
      <td><strong>不会产生力或速度变化</strong></td>
      <td><code class="language-plaintext highlighter-rouge">Rigidbody.velocity</code> 不会更新，你也不能检测运动趋势</td>
    </tr>
    <tr>
      <td><strong>打乱内部物理状态</strong></td>
      <td>会破坏 Rigidbody 的睡眠状态、插值、运动预测等机制，造成 jitter（抖动）或奇怪弹跳</td>
    </tr>
    <tr>
      <td><strong>失去重力/摩擦等作用</strong></td>
      <td>物体移动但没有物理感，导致操作不自然</td>
    </tr>
  </tbody>
</table>

<p>只有在以下三种情况中可以使用<code class="language-plaintext highlighter-rouge">transform.position</code>:<br />
1.没有<code class="language-plaintext highlighter-rouge">Rigidbody</code>的对象（纯UI/特效/场景物体）</p>

<p>2.临时调整位置，如传送、重置</p>

<p>3.<code class="language-plaintext highlighter-rouge">isKinematic = true</code></p>

<h3 id="示例角色控制器使用rigidbody">示例：角色控制器使用Rigidbody</h3>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">class</span> <span class="nc">PlayerMovement</span> <span class="p">:</span> <span class="n">MonoBehaviour</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="kt">float</span> <span class="n">speed</span> <span class="p">=</span> <span class="m">5f</span><span class="p">;</span>
    <span class="k">private</span> <span class="n">Rigidbody</span> <span class="n">rb</span><span class="p">;</span>

    <span class="k">void</span> <span class="nf">Start</span><span class="p">()</span> <span class="p">=&gt;</span> <span class="n">rb</span> <span class="p">=</span> <span class="n">GetComponent</span><span class="p">&lt;</span><span class="n">Rigidbody</span><span class="p">&gt;();</span>

    <span class="k">void</span> <span class="nf">FixedUpdate</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="kt">float</span> <span class="n">h</span> <span class="p">=</span> <span class="n">Input</span><span class="p">.</span><span class="nf">GetAxis</span><span class="p">(</span><span class="s">"Horizontal"</span><span class="p">);</span>
        <span class="kt">float</span> <span class="n">v</span> <span class="p">=</span> <span class="n">Input</span><span class="p">.</span><span class="nf">GetAxis</span><span class="p">(</span><span class="s">"Vertical"</span><span class="p">);</span>

        <span class="n">Vector3</span> <span class="n">move</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Vector3</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="n">v</span><span class="p">);</span>
        <span class="n">rb</span><span class="p">.</span><span class="nf">MovePosition</span><span class="p">(</span><span class="n">rb</span><span class="p">.</span><span class="n">position</span> <span class="p">+</span> <span class="n">move</span> <span class="p">*</span> <span class="n">speed</span> <span class="p">*</span> <span class="n">Time</span><span class="p">.</span><span class="n">fixedDeltaTime</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<h2 id="物理力应用的类型">物理力应用的类型</h2>
<p>Unity提供了多种物理力应用方式，你可以根据物理效果需求选择合适的模式</p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">rb</span><span class="p">.</span><span class="nf">AddForce</span><span class="p">(</span><span class="n">Vector3</span><span class="p">.</span><span class="n">force</span><span class="p">,</span> <span class="n">ForceMode</span><span class="p">.</span><span class="n">Force</span><span class="p">);</span>
</code></pre></div></div>

<table>
  <thead>
    <tr>
      <th>ForceMode</th>
      <th>作用</th>
      <th>适用场景</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Force</code></td>
      <td>持续施加力（受质量影响）</td>
      <td>模拟发动机、风力等持续力</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Impulse</code></td>
      <td>瞬时冲量（受质量影响）</td>
      <td>子弹击中、跳跃、爆炸推动</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">VelocityChange</code></td>
      <td>改变速度（忽略质量）</td>
      <td>快速位移、瞬间反弹</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Acceleration</code></td>
      <td>施加加速度（不受质量影响）</td>
      <td>飞行器推进、不考虑质量时</td>
    </tr>
  </tbody>
</table>

<h2 id="爆炸力addexplosionforce">爆炸力：<code class="language-plaintext highlighter-rouge">AddExplosionForce</code></h2>
<p>模拟爆炸冲击力，自动考虑距离衰减和力方向</p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">rb</span><span class="p">.</span><span class="nf">AddExplosionForce</span><span class="p">(</span><span class="n">force</span><span class="p">,</span> <span class="n">explosionPosition</span><span class="p">,</span> <span class="n">radius</span><span class="p">,</span> <span class="n">upwardsModifier</span><span class="p">);</span>
</code></pre></div></div>
<ul>
  <li><code class="language-plaintext highlighter-rouge">force</code>:爆炸的最大力</li>
  <li><code class="language-plaintext highlighter-rouge">explosionPosition</code>:爆炸中心</li>
  <li><code class="language-plaintext highlighter-rouge">radius</code>:爆炸影响范围</li>
  <li><code class="language-plaintext highlighter-rouge">upwardsModifier</code>:向上的推力（可增强爆炸效果）</li>
</ul>

<h2 id="rigidbody-constraints锁定轴向">Rigidbody Constraints（锁定轴向）</h2>
<p>锁定位置或旋转，常用于平台类游戏角色防止翻滚</p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">rb</span><span class="p">.</span><span class="n">constraints</span> <span class="p">=</span> <span class="n">RigidbodyConstraints</span><span class="p">.</span><span class="n">FreezeRotationX</span> <span class="p">|</span> <span class="n">RigidbodyConstraints</span><span class="p">.</span><span class="n">FreezeRotationZ</span><span class="p">;</span>
</code></pre></div></div>
<ul>
  <li><code class="language-plaintext highlighter-rouge">FreezePositionX/Y/Z</code></li>
  <li><code class="language-plaintext highlighter-rouge">FreezeRotationX/Y/Z</code></li>
  <li><code class="language-plaintext highlighter-rouge">FreezeAll</code></li>
</ul>

<h2 id="rigidbody-interpolation插值">Rigidbody Interpolation（插值）</h2>
<p>用于缓解物体抖动或物理更新频率和渲染帧率不一致的问题<br />
插值实在渲染帧之间平滑显示刚体位置或旋转，防止因物理更新滞后造成的抖动或卡顿</p>

<blockquote>
  <p>渲染帧和物理帧
在Unity游戏循环中，渲染帧（Update）和物理帧（Fixed Update）是分开的
渲染帧率和物理帧率可能不同，这样一来，在两次物理更新之间可能要渲染一次或多次画面，此时刚体的位置还没更新，就会导致物体“跳跃”，摄像机跟随刚体时抖动</p>
</blockquote>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">rb</span><span class="p">.</span><span class="n">interpolation</span> <span class="p">=</span> <span class="n">RigidbodyInterpolation</span><span class="p">.</span><span class="n">Interpolate</span><span class="p">;</span>
</code></pre></div></div>

<table>
  <thead>
    <tr>
      <th>插值类型</th>
      <th>描述</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>None</td>
      <td>不插值，最性能优先</td>
    </tr>
    <tr>
      <td>Interpolate</td>
      <td>插值上一次位置</td>
    </tr>
    <tr>
      <td>Extrapolate</td>
      <td>预测下一帧位置</td>
    </tr>
  </tbody>
</table>

<p>适用于：摄像机跟随物体 + Rigidbody，平滑动画等</p>

<p><strong>插值不是同步手段</strong><br />
插值只影响视觉显示，不影响实际物理行为或碰撞检测</p>

<h2 id="rigidbody连接joint系统">Rigidbody连接（Joint系统）</h2>
<p>Unity提供了多个<code class="language-plaintext highlighter-rouge">Joint</code>来连接两个Rigidbody，来实现机械、吊挂、弹簧等效果</p>

<p>常用Joint类型</p>

<table>
  <thead>
    <tr>
      <th>Joint 类型</th>
      <th>功能</th>
      <th>应用</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">FixedJoint</code></td>
      <td>完全绑定两个刚体</td>
      <td>构建刚性结构</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">HingeJoint</code></td>
      <td>像门铰链一样旋转</td>
      <td>车轮、门</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">SpringJoint</code></td>
      <td>模拟弹簧连接</td>
      <td>弹簧、绳索末端</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">ConfigurableJoint</code></td>
      <td>自定义约束自由度</td>
      <td>高级物理装置</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">CharacterJoint</code></td>
      <td>模拟人体骨骼</td>
      <td>人物 ragdoll</td>
    </tr>
  </tbody>
</table>

<p><strong>示例：固定一个物体</strong></p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">var</span> <span class="n">joint</span> <span class="p">=</span> <span class="n">gameObject</span><span class="p">.</span><span class="n">AddComponent</span><span class="p">&lt;</span><span class="n">FixedJoint</span><span class="p">&gt;();</span>
<span class="n">joint</span><span class="p">.</span><span class="n">connectedBody</span> <span class="p">=</span> <span class="n">otherRigidbody</span><span class="p">;</span>
</code></pre></div></div>

<h2 id="刚体时间管理">刚体时间管理</h2>
<p>你可以临时控制刚体行为。例如冻结、暂停、缓动</p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">rb</span><span class="p">.</span><span class="n">isKinematic</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span> <span class="c1">// 暂停物理影响</span>
<span class="n">rb</span><span class="p">.</span><span class="n">detectCollisions</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span> <span class="c1">//禁用碰撞响应</span>
<span class="n">rb</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">();</span> <span class="c1">//进入“休眠”状态，除非外力唤醒</span>
<span class="n">rb</span><span class="p">.</span><span class="nf">WakeUp</span><span class="p">();</span> <span class="c1">//强制唤醒</span>
</code></pre></div></div>
<h2 id="手动模拟物理少见但强大">手动模拟物理（少见但强大）</h2>
<p>Unity默认每帧自动调用<code class="language-plaintext highlighter-rouge">Physics.Simulate()</code>，你可以关闭自动模拟并手动调用它</p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Physics</span><span class="p">.</span><span class="n">autoSimulation</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
<span class="n">Physics</span><span class="p">.</span><span class="nf">Simulate</span><span class="p">(</span><span class="n">Time</span><span class="p">.</span><span class="n">fixedDeltaTime</span><span class="p">);</span>
</code></pre></div></div>
<p>用于录制、回放、预测系统、AI训练等</p>

<h2 id="实践建议">实践建议</h2>
<h3 id="1性能优化">1.性能优化</h3>
<ul>
  <li>尽量使用<code class="language-plaintext highlighter-rouge">MovePosition</code>和<code class="language-plaintext highlighter-rouge">MoveRotation</code>代替直接设置<code class="language-plaintext highlighter-rouge">transform</code></li>
  <li>使用<code class="language-plaintext highlighter-rouge">Rigidbody.Sleep()</code>来节省性能，尤其是大量静态物体</li>
</ul>

<h3 id="2碰撞过滤">2.碰撞过滤</h3>
<ul>
  <li>使用<code class="language-plaintext highlighter-rouge">Layer</code> + <code class="language-plaintext highlighter-rouge">Physics.IngoreCollision()</code>或<code class="language-plaintext highlighter-rouge">Physics.IgnoreLayerCollision()</code>控制碰撞逻辑</li>
</ul>

<h3 id="3组合joint">3.组合Joint</h3>
<ul>
  <li>复杂角色物理（如ragdoll）可通过多个Joint配合约束自由度实现真实物理表现</li>
</ul>

<h3 id="4多刚体组合">4.多刚体组合</h3>
<ul>
  <li>使用空物体为父物体挂多个子物体加不同Rigidbody，用<code class="language-plaintext highlighter-rouge">Joint</code>连接</li>
</ul>

<h2 id="刚体不能直接禁用">刚体不能直接禁用</h2>
<h3 id="1刚体不是一个标准行为组件">1.刚体不是一个标准行为组件</h3>
<ul>
  <li>Unity中大多数组件都继承自<code class="language-plaintext highlighter-rouge">Behaviour</code>类，这类组件有一个通用的enable属性</li>
  <li>但Rigidbody继承自<code class="language-plaintext highlighter-rouge">Component</code>，因此没有<code class="language-plaintext highlighter-rouge">enable</code>属性4
    <h3 id="2rigidbody是物理系统的一部分关闭它的逻辑很复杂">2.Rigidbody是物理系统的一部分，关闭它的逻辑很复杂</h3>
    <p>Unity的Rigidbody是底层物理引擎（NVIDIA PhysX）注册的一个刚体对象，它包含大量复杂的状态（如质量、速度、力、碰撞状态等），不能简单“关掉”</p>
  </li>
</ul>

<p>如果允许直接<code class="language-plaintext highlighter-rouge">enabled = false</code>，Unity就得把它从物理世界中注销，可能会导致：</p>
<ul>
  <li>打乱碰撞检测状态</li>
  <li>丢失动力学状态</li>
  <li>导致其他与之交互的刚体行为出错</li>
</ul>

<p>替代方法：</p>

<table>
  <thead>
    <tr>
      <th>方法</th>
      <th>效果</th>
      <th>场景</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">rb.isKinematic = true</code></td>
      <td>不再受物理引擎驱动</td>
      <td>暂停物理交互，但可以通过 transform 控制</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">rb.detectCollisions = false</code></td>
      <td>不再检测碰撞</td>
      <td>让它“穿透”其他物体</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">rb.Sleep()</code></td>
      <td>让刚体进入休眠</td>
      <td>减少物理计算开销</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Destroy(rb)</code></td>
      <td>彻底移除刚体</td>
      <td>完全不再参与物理</td>
    </tr>
  </tbody>
</table>

<h2 id="rigidbody-api"><code class="language-plaintext highlighter-rouge">Rigidbody</code> API</h2>

<h3 id="常用字段属性">常用字段/属性</h3>

<table>
  <thead>
    <tr>
      <th>属性</th>
      <th>类型</th>
      <th>说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">mass</code></td>
      <td><code class="language-plaintext highlighter-rouge">float</code></td>
      <td>质量（默认 1）</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">drag</code></td>
      <td><code class="language-plaintext highlighter-rouge">float</code></td>
      <td>线性阻力</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">angularDrag</code></td>
      <td><code class="language-plaintext highlighter-rouge">float</code></td>
      <td>角阻力</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">useGravity</code></td>
      <td><code class="language-plaintext highlighter-rouge">bool</code></td>
      <td>是否启用重力</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">isKinematic</code></td>
      <td><code class="language-plaintext highlighter-rouge">bool</code></td>
      <td>是否受物理引擎影响</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">velocity</code></td>
      <td><code class="language-plaintext highlighter-rouge">Vector3</code></td>
      <td>当前线速度</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">angularVelocity</code></td>
      <td><code class="language-plaintext highlighter-rouge">Vector3</code></td>
      <td>当前角速度</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">position</code></td>
      <td><code class="language-plaintext highlighter-rouge">Vector3</code></td>
      <td>世界空间位置</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">rotation</code></td>
      <td><code class="language-plaintext highlighter-rouge">Quaternion</code></td>
      <td>世界旋转</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">centerOfMass</code></td>
      <td><code class="language-plaintext highlighter-rouge">Vector3</code></td>
      <td>质心位置</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">inertiaTensor</code></td>
      <td><code class="language-plaintext highlighter-rouge">Vector3</code></td>
      <td>惯性张量</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">constraints</code></td>
      <td><code class="language-plaintext highlighter-rouge">RigidbodyConstraints</code></td>
      <td>锁定移动或旋转轴</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">interpolation</code></td>
      <td><code class="language-plaintext highlighter-rouge">RigidbodyInterpolation</code></td>
      <td>插值方式</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">collisionDetectionMode</code></td>
      <td><code class="language-plaintext highlighter-rouge">CollisionDetectionMode</code></td>
      <td>碰撞检测模式</td>
    </tr>
  </tbody>
</table>

<h3 id="常用方法控制移动施加力">常用方法（控制移动、施加力）</h3>
<h4 id="施加力的方法力学模拟">施加力的方法（力学模拟）</h4>

<table>
  <thead>
    <tr>
      <th>方法</th>
      <th>描述</th>
      <th>常用参数说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">AddForce(Vector3 force, ForceMode mode = ForceMode.Force)</code></td>
      <td>向刚体施加一个世界空间的力</td>
      <td>- <code class="language-plaintext highlighter-rouge">ForceMode</code> 可选：<code class="language-plaintext highlighter-rouge">Force</code>, <code class="language-plaintext highlighter-rouge">Impulse</code>, <code class="language-plaintext highlighter-rouge">Acceleration</code>, <code class="language-plaintext highlighter-rouge">VelocityChange</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">AddRelativeForce(Vector3 force, ForceMode mode = ForceMode.Force)</code></td>
      <td>向刚体施加一个<strong>相对于自身方向</strong>的力</td>
      <td>用于局部方向推进，如飞船、角色局部移动</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">AddTorque(Vector3 torque, ForceMode mode = ForceMode.Force)</code></td>
      <td>添加一个旋转力（转矩）</td>
      <td>控制刚体的旋转，比如陀螺仪效果</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">AddRelativeTorque(Vector3 torque, ForceMode mode = ForceMode.Force)</code></td>
      <td>添加一个<strong>相对坐标</strong>的转矩</td>
      <td>以自身坐标轴方向旋转</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">AddExplosionForce(float force, Vector3 position, float radius, float upwardsModifier = 0.0f, ForceMode mode = ForceMode.Force)</code></td>
      <td>模拟爆炸力</td>
      <td>常用于爆炸、炸飞物体等效果</td>
    </tr>
  </tbody>
</table>

<h4 id="移动与旋转物理友好方式">移动与旋转（物理友好方式）</h4>
<p>这些方法在<code class="language-plaintext highlighter-rouge">FixedUpdate()</code>中调用，以物理方式平滑移动对象</p>

<table>
  <thead>
    <tr>
      <th>方法</th>
      <th>描述</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">MovePosition(Vector3 position)</code></td>
      <td>让刚体以物理方式移动到某位置（会产生碰撞）</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">MoveRotation(Quaternion rot)</code></td>
      <td>让刚体以物理方式旋转到目标旋转角度</td>
    </tr>
  </tbody>
</table>

<blockquote>
  <p>不要使用transform.position = … 替代移动刚体，会破坏物理系统</p>
</blockquote>

<h4 id="状态控制">状态控制</h4>

<table>
  <thead>
    <tr>
      <th>方法</th>
      <th>描述</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Sleep()</code></td>
      <td>让刚体休眠（不再进行物理更新，除非唤醒）</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">WakeUp()</code></td>
      <td>唤醒休眠的刚体</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">IsSleeping()</code></td>
      <td>检查当前是否处于休眠状态</td>
    </tr>
  </tbody>
</table>

<h4 id="速度与点速度获取">速度与点速度获取</h4>

<table>
  <thead>
    <tr>
      <th>方法</th>
      <th>描述</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">GetPointVelocity(Vector3 worldPoint)</code></td>
      <td>获取世界空间中某一点的实际速度</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">GetRelativePointVelocity(Vector3 relativePoint)</code></td>
      <td>获取某个相对位置的速度（少用）</td>
    </tr>
  </tbody>
</table>

<h3 id="状态检测与设置">状态检测与设置</h3>

<table>
  <thead>
    <tr>
      <th>方法 / 属性</th>
      <th>类型</th>
      <th>说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">IsSleeping()</code></td>
      <td><code class="language-plaintext highlighter-rouge">bool</code></td>
      <td>当前是否休眠</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">detectCollisions</code></td>
      <td><code class="language-plaintext highlighter-rouge">bool</code></td>
      <td>是否响应碰撞</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">maxDepenetrationVelocity</code></td>
      <td><code class="language-plaintext highlighter-rouge">float</code></td>
      <td>最大穿透修正速度（用于防止卡住）</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">solverIterations</code></td>
      <td><code class="language-plaintext highlighter-rouge">int</code></td>
      <td>物理求解器迭代次数（越高越精准）</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">sleepThreshold</code></td>
      <td><code class="language-plaintext highlighter-rouge">float</code></td>
      <td>控制何时休眠</td>
    </tr>
  </tbody>
</table>

<h3 id="高级设置">高级设置</h3>

<table>
  <thead>
    <tr>
      <th>属性 / 方法</th>
      <th>说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">inertiaTensorRotation</code></td>
      <td>惯性张量旋转</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">maxAngularVelocity</code></td>
      <td>最大角速度</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">centerOfMass</code></td>
      <td>自定义质心位置</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">ResetCenterOfMass()</code></td>
      <td>重置为默认质心</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">ResetInertiaTensor()</code></td>
      <td>重置惯性张量</td>
    </tr>
  </tbody>
</table>

<h3 id="与collider配合相关">与Collider配合相关</h3>
<p>Rigidbody本身不处理碰撞细节，但需配合<code class="language-plaintext highlighter-rouge">Collider</code>组件才能参与物理交互</p>

<table>
  <thead>
    <tr>
      <th>方法</th>
      <th>说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">ClosestPointOnBounds(Vector3 position)</code></td>
      <td>获取边界上最接近某点的位置</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">SweepTest(Vector3 direction, out RaycastHit hit, float maxDistance)</code></td>
      <td>模拟刚体沿方向运动是否会撞到东西</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">SweepTestAll(...)</code></td>
      <td>返回所有碰撞信息</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">GetRelativePointVelocity(Vector3 relativePoint)</code></td>
      <td>获取某点相对速度</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">GetPointVelocity(Vector3 worldPoint)</code></td>
      <td>获取世界空间下某点速度</td>
    </tr>
  </tbody>
</table>

<p><strong><a href="https://docs.unity3d.com/ScriptReference/Rigidbody.html">Unity官方文档（Rigidbody）</a></strong></p>]]></content><author><name>ljf12825</name></author><category term="笔记" /><category term="Unity" /><category term="Unity Component" /><category term="Physics System" /><summary type="html"><![CDATA[在Unity中，Rigidbody是一个用于实现物理行为的组件，它允许你的游戏对象受力、重力、碰撞等真实世界的物理规则影响]]></summary></entry><entry><title type="html">Unity Build-in Types</title><link href="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Unity-Build-in-Types.html" rel="alternate" type="text/html" title="Unity Build-in Types" /><published>2025-06-01T00:00:00+08:00</published><updated>2025-06-01T00:00:00+08:00</updated><id>http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Unity-Build-in-Types</id><content type="html" xml:base="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Unity-Build-in-Types.html"><![CDATA[<p>Unity内建类型</p>

<h2 id="常见unity内建类型按用途分">常见Unity内建类型（按用途分）</h2>
<h3 id="1空间几何类型transform相关">1.空间/几何类型（Transform相关）</h3>

<table>
  <thead>
    <tr>
      <th>类型</th>
      <th>说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Vector2</code>, <code class="language-plaintext highlighter-rouge">Vector3</code>, <code class="language-plaintext highlighter-rouge">Vector4</code></td>
      <td>表示二维/三维/四维向量</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Quaternion</code></td>
      <td>四元数，表示旋转</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Matrix4x4</code></td>
      <td>4×4 矩阵，常用于转换</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Bounds</code></td>
      <td>包围盒（中心+尺寸）</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Ray</code>, <code class="language-plaintext highlighter-rouge">RaycastHit</code></td>
      <td>射线检测相关类型</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Plane</code></td>
      <td>表示一个无限平面</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Rect</code></td>
      <td>二维矩形区域</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Color</code>, <code class="language-plaintext highlighter-rouge">Color32</code></td>
      <td>表示颜色（线性空间和 sRGB）</td>
    </tr>
  </tbody>
</table>

<h4 id="vector2--vector3--vector4"><strong>Vector2 &amp; Vector3 &amp; Vector4</strong></h4>
<p>它们是Unity提供的三个核心向量类型，广泛用于位置、方向、速度、缩放、颜色等各种场景</p>

<h5 id="基本定义">基本定义</h5>

<table>
  <thead>
    <tr>
      <th>向量类型</th>
      <th>维度</th>
      <th>作用</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Vector2</code></td>
      <td>2D 向量，包含 <code class="language-plaintext highlighter-rouge">x</code>, <code class="language-plaintext highlighter-rouge">y</code></td>
      <td>用于 2D 空间中的位置、速度等</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Vector3</code></td>
      <td>3D 向量，包含 <code class="language-plaintext highlighter-rouge">x</code>, <code class="language-plaintext highlighter-rouge">y</code>, <code class="language-plaintext highlighter-rouge">z</code></td>
      <td>用于 3D 空间中的大多数情况</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Vector4</code></td>
      <td>4D 向量，包含 <code class="language-plaintext highlighter-rouge">x</code>, <code class="language-plaintext highlighter-rouge">y</code>, <code class="language-plaintext highlighter-rouge">z</code>, <code class="language-plaintext highlighter-rouge">w</code></td>
      <td>用于更高级的计算，如齐次坐标、shader 编程</td>
    </tr>
  </tbody>
</table>

<p><strong>Vector2（二维向量）</strong></p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Vector2</span> <span class="n">position</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Vector2</span><span class="p">(</span><span class="m">1.5f</span><span class="p">,</span> <span class="m">3.0f</span><span class="p">);</span>
</code></pre></div></div>
<p>常见用途：</p>
<ul>
  <li>2D游戏中的对象位置、速度、加速度等</li>
  <li>屏幕空间坐标（如UI坐标）</li>
  <li>纹理坐标（UV mapping）</li>
</ul>

<p><strong>Vector3（三维向量）</strong></p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Vector3</span> <span class="n">direction</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Vector3</span><span class="p">(</span><span class="m">0f</span><span class="p">,</span> <span class="m">1f</span><span class="p">,</span> <span class="m">0f</span><span class="p">);</span> <span class="c1">//向上</span>
<span class="n">transform</span><span class="p">.</span><span class="n">position</span> <span class="p">+=</span> <span class="n">direction</span> <span class="p">*</span> <span class="n">Time</span><span class="p">.</span><span class="n">deltaTime</span><span class="p">;</span>
</code></pre></div></div>
<p>常见用途：</p>
<ul>
  <li>3D对象的位置、方向、缩放</li>
  <li>物理运动（速度、加速度）</li>
  <li>相机方向、光照方向</li>
</ul>

<p><strong>Vector3常用静态变量</strong></p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Vector3</span><span class="p">.</span><span class="n">zero</span>      <span class="c1">// (0, 0, 0)</span>
<span class="n">Vector3</span><span class="p">.</span><span class="n">one</span>       <span class="c1">// (1, 1, 1)</span>
<span class="n">Vector3</span><span class="p">.</span><span class="n">up</span>        <span class="c1">// (0, 1, 0)</span>
<span class="n">Vector3</span><span class="p">.</span><span class="n">down</span>      <span class="c1">// (0, -1, 0)</span>
<span class="n">Vector3</span><span class="p">.</span><span class="n">left</span>      <span class="c1">// (-1, 0, 0)</span>
<span class="n">Vector3</span><span class="p">.</span><span class="n">right</span>     <span class="c1">// (1, 0, 0)</span>
<span class="n">Vector3</span><span class="p">.</span><span class="n">forward</span>   <span class="c1">// (0, 0, 1)</span>
<span class="n">Vector3</span><span class="p">.</span><span class="n">back</span>      <span class="c1">// (0, 0, -1)</span>
</code></pre></div></div>

<p><strong>Vector3静态方法</strong></p>

<table>
  <thead>
    <tr>
      <th>Method</th>
      <th>Description</th>
      <th>Declaration</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Angel</td>
      <td>求两向量夹角</td>
      <td>public static float Angle(Vector3 from, Vector3 to);</td>
    </tr>
    <tr>
      <td>ClampMagnitude</td>
      <td>限制一个向量的长度，防止它超过maxLength，如果vector的长度小于等于maxLength返回原向量，否则返回一个等于maxLength的同向向量</td>
      <td>public static Vector3 ClampMagnitude(Vector3 vector, float maxLength);</td>
    </tr>
    <tr>
      <td>Cross</td>
      <td>求叉积</td>
      <td>public static Vector3 Cross(Vector3 lhs, Vector3 rhs);</td>
    </tr>
    <tr>
      <td>Distance</td>
      <td>求三维空间中两点的距离</td>
      <td>public static float Distance(Vector3 point1, Vector3 point2);</td>
    </tr>
    <tr>
      <td>Dot</td>
      <td>求点乘</td>
      <td>public static float Dot(Vector3 lhs, Vector3 rhs);</td>
    </tr>
    <tr>
      <td>Lerp</td>
      <td>求线插（不允许外推）,  t -&gt; [0, 1]</td>
      <td>public static Vector3 Lerp(Vector3 a, Vector3 b, float t);</td>
    </tr>
    <tr>
      <td>LerpUnclamped</td>
      <td>求线插（允许外推，产生超调）</td>
      <td>public static Vector3 LerpUnclamped(Vector3 a, Vector3 b, float t);</td>
    </tr>
    <tr>
      <td>Max</td>
      <td>返回两个向量所能组成的最大向量</td>
      <td>public static Vector3 Max(Vector3 lhs, Vector3 rhs);</td>
    </tr>
    <tr>
      <td>Min</td>
      <td>返回最小</td>
      <td>同上</td>
    </tr>
    <tr>
      <td>MoveTowards</td>
      <td>以恒定速度向目标位置靠近，直到到达</td>
      <td>public static Vector3 MoveTowards(Vector3 current, Vector3 target, float maxDistanceDelta);</td>
    </tr>
    <tr>
      <td>Normalize</td>
      <td>归一化</td>
      <td>public void Normalize();</td>
    </tr>
    <tr>
      <td>OrthoNormalize</td>
      <td>正交归一化</td>
      <td>public static void OrthoNormalize(ref Vector3 normal, ref Vector3 tangent);  public static void OrthoNormalize(ref Vector3 normal, ref Vector3 tangent, ref Vector3 binormal);</td>
    </tr>
    <tr>
      <td>Project</td>
      <td>投影到onNormal</td>
      <td>public static Vector3 Project(Vector3 vector, Vector3 onNormal);</td>
    </tr>
    <tr>
      <td>ProjectOnPlane</td>
      <td>投影到planeNormal</td>
      <td>public static Vector3 ProjectOnPlane(Vector3 vector, Vector3 planeNormal);</td>
    </tr>
    <tr>
      <td>Reflect</td>
      <td>反射线，inNormal是法线</td>
      <td>public static Vector3 Reflect(Vector3 inDirection, Vector3  inNormal);</td>
    </tr>
    <tr>
      <td>RotateTowards</td>
      <td>逐步旋转一个方向向量朝向另一个方向向量，maxRadiansDelta是每次最大允许旋转的角度（弧度），maxMagnitudeDelta是每次允许变化的向量长度</td>
      <td>public static Vector3 RotateTowards(Vector3 current, Vector3 target, float maxRadiansDelta, float maxMagnitudeDelta);</td>
    </tr>
    <tr>
      <td>Scale</td>
      <td>两个向量分量相乘组成新向量</td>
      <td>public static Vector3 Scale(Vector3 a, Vector3 b);</td>
    </tr>
    <tr>
      <td>SignedAngle</td>
      <td>求带符号夹角，axis是用于确定旋转方向的轴，正值是绕着axis左旋，负值是右旋</td>
      <td>public static float SignedAngle(Vector3 from, Vector3 to, Vector3 axis);</td>
    </tr>
    <tr>
      <td>Slerp</td>
      <td>球面插值，球面为a，b点所在大圆所在的球的球面，插值在a，b点所在的圆上取</td>
      <td>public static Vector3 Slerp(Vector3 a, Vector3 b, float t);</td>
    </tr>
    <tr>
      <td>SlerpUnclamped</td>
      <td>球面插值（允许外推，产生超调）</td>
      <td>public static Vector3 SlerpUnclamped(Vector3 a, Vector3 b, float t);</td>
    </tr>
    <tr>
      <td>SmoothDamp</td>
      <td>平滑插值； ref currentVelocity当前速度向量；smoothTime到达目标值所需的预期时间，越小越快越敏感；maxSpeed最大速度（可选）；deltaTime每帧间隔时间（可选）</td>
      <td>public static Vector3 SmoothDamp(Vector3 current, Vector3 target, ref Vector3 currentVelocity, float smoothTime, float maxSpeed = Mathf.Infinity, float deltaTime = Time.deltaTime);</td>
    </tr>
  </tbody>
</table>

<p><a href="https://docs.unity3d.com/ScriptReference/Vector3.html">Unity官方文档（Vector3）</a></p>

<p><strong>Vector4（四维向量）</strong></p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Vector4</span> <span class="n">v</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Vector4</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span> <span class="m">4</span><span class="p">);</span>
</code></pre></div></div>
<p>常见用途：</p>
<ul>
  <li>齐次坐标（矩阵变换常用）</li>
  <li>传递颜色（Color在底层可能是Vector4(r,g,b,a)）</li>
  <li>shader开发中用于高级数学运算（如平面方程、切线空间等）</li>
</ul>

<h4 id="quaternion--euler-angles">Quaternion &amp; Euler Angles</h4>
<p>在Unity中，Quaternion是用来表示旋转的核心数学结构，它避免了Euler Angles的万向节死锁问题，并且适用于平滑插值和复杂3D计算</p>

<h5 id="quaternion">Quaternion</h5>
<p>Quaternion表示绕某一条单位轴旋转一个角度的这个过程，简单来说：表示一个旋转</p>

<p><strong>数学本质</strong>
四元数是一种复数扩展：</p>
<div class="language-ini highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">Q</span> <span class="p">=</span> <span class="s">w + xi + yj + zk</span>
</code></pre></div></div>
<p>在Unity中被表示为：</p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">struct</span> <span class="nc">Quaternion</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="kt">float</span> <span class="n">x</span><span class="p">;</span>
    <span class="k">public</span> <span class="kt">float</span> <span class="n">y</span><span class="p">;</span>
    <span class="k">public</span> <span class="kt">float</span> <span class="n">z</span><span class="p">;</span>
    <span class="k">public</span> <span class="kt">float</span> <span class="n">w</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">x, y, z</code>表示旋转轴的向量部分（方向）<br />
<code class="language-plaintext highlighter-rouge">w</code>表示旋转的角度部分(cos(θ/2))</p>

<p>四元数不是角度 + 轴直接拼成的，是通过以下方式构造：</p>
<div class="language-ini highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">x</span><span class="p">=</span><span class="s">axis.x⋅sin(θ/2)</span>
<span class="py">y</span><span class="p">=</span><span class="s">axis.y⋅sin(θ/2)</span>
<span class="py">z</span><span class="p">=</span><span class="s">axis.z⋅sin(θ/2)</span>
<span class="py">w</span><span class="p">=</span><span class="s">cos(θ/2)</span>
</code></pre></div></div>
<p>其中<code class="language-plaintext highlighter-rouge">axis</code>是归一化的旋转轴向量<br />
<code class="language-plaintext highlighter-rouge">θ</code>是旋转角度（弧度）</p>

<p>你可以把四元数想象成一个旋转操作，它编码了两个信息：</p>
<ul>
  <li>1.绕哪个轴旋转</li>
  <li>2.旋转多少角度</li>
</ul>

<p><strong>Quaternion用途</strong></p>

<table>
  <thead>
    <tr>
      <th>用途场景</th>
      <th>描述</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>表示物体旋转</td>
      <td>替代 <code class="language-plaintext highlighter-rouge">transform.rotation = new Vector3(...)</code>，更稳定</td>
    </tr>
    <tr>
      <td>做平滑旋转（Slerp/Lerp）</td>
      <td>保持插值平滑、不跳跃、不变形</td>
    </tr>
    <tr>
      <td>实现摄像机跟随</td>
      <td>平滑跟随目标的朝向</td>
    </tr>
    <tr>
      <td>构建旋转动画</td>
      <td>可结合 Timeline、Animator 使用</td>
    </tr>
    <tr>
      <td>控制角色面向</td>
      <td>看向目标、追踪方向等</td>
    </tr>
  </tbody>
</table>

<p><strong>Quaternion API</strong></p>

<table>
  <thead>
    <tr>
      <th>方法/属性</th>
      <th>说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Quaternion.identity</code></td>
      <td>零旋转（即不旋转）</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Quaternion.Euler(x, y, z)</code></td>
      <td>从欧拉角创建旋转</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Quaternion.LookRotation(dir)</code></td>
      <td>让对象朝向某个方向</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Quaternion.Angle(a, b)</code></td>
      <td>计算两个旋转之间的角度</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Quaternion.AngleAxis(float angle, Vector3 axis)</code></td>
      <td>围绕axis旋转angle度</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Quaternion.Slerp(a, b, t)</code></td>
      <td>在两个旋转之间平滑插值（匀速）</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Quaternion.Lerp(a, b, t)</code></td>
      <td>线性插值旋转（不推荐用于大角度）</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Quaternion.RotateTowards(a, b, maxDegreesDelta)</code></td>
      <td>限制最大旋转角度的平滑旋转</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">* 运算符</code>（例如 <code class="language-plaintext highlighter-rouge">rot * vector</code>）</td>
      <td>将旋转应用于向量，旋转该方向向量</td>
    </tr>
  </tbody>
</table>

<p><strong>构建方式</strong></p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Quaternion</span> <span class="n">q</span> <span class="p">=</span> <span class="n">Quaternion</span><span class="p">.</span><span class="nf">AngleAxis</span><span class="p">(</span><span class="m">90</span><span class="p">,</span> <span class="n">Vector3</span><span class="p">.</span><span class="n">up</span><span class="p">);</span> <span class="c1">//绕Y轴旋转90°</span>
</code></pre></div></div>
<p>使用欧拉角构建：</p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Quaternion</span> <span class="n">q</span> <span class="p">=</span> <span class="n">Quaternion</span><span class="p">.</span><span class="nf">Euler</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">90</span><span class="p">,</span> <span class="m">0</span><span class="p">);</span> <span class="c1">//XYZ分别是绕X Y Z轴的角度</span>
</code></pre></div></div>
<h5 id="euler-angles">Euler Angles</h5>

<p><strong>欧拉角的定义</strong><br />
欧拉角是用三个角度来描述3D空间中的一个旋转变换，每个角度表示围绕一个坐标轴的旋转量。<br />
在Unity中，欧拉角就是一个<code class="language-plaintext highlighter-rouge">Vector3</code></p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">transform</span><span class="p">.</span><span class="n">eulerAngles</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Vector3</span><span class="p">(</span><span class="m">30</span><span class="p">,</span> <span class="m">45</span><span class="p">,</span> <span class="m">0</span><span class="p">);</span>
</code></pre></div></div>
<p>这表示：</p>
<ul>
  <li>绕X轴旋转30°</li>
  <li>然后绕Y轴旋转45°</li>
  <li>然后绕Z轴旋转0°
    <blockquote>
      <p>欧拉角的本质是「分轴顺序旋转」，三个角度 + 一个旋转顺序（X -&gt; Y -&gt; Z），顺序不能出现问题，否则结果不同</p>
    </blockquote>
  </li>
</ul>

<p><strong>欧拉角的特点</strong></p>

<table>
  <thead>
    <tr>
      <th>特点</th>
      <th>描述</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>直观</td>
      <td>直接写角度，容易理解和调试</td>
    </tr>
    <tr>
      <td>顺序敏感</td>
      <td>顺序不同，结果不同（ZYX ≠ XYZ）</td>
    </tr>
    <tr>
      <td>有死锁</td>
      <td>当某个轴旋转到特定位置时，另一个轴“失效”——<strong>万向节死锁（Gimbal Lock）</strong></td>
    </tr>
    <tr>
      <td>插值难</td>
      <td>在两个角度之间插值时可能会突然“跳动”或绕远路</td>
    </tr>
  </tbody>
</table>

<p><strong>欧拉角适用于：</strong></p>
<ul>
  <li>手动设置角度</li>
  <li>UI显示</li>
  <li>编辑器中拖拽角度时</li>
  <li>简单旋转动画、摄像机控制</li>
</ul>

<p><strong>实际旋转逻辑中，建议使用Quaternion</strong></p>

<p><strong>Euler Angels和Quaternion的关系</strong><br />
Unity内部几乎不直接用欧拉角进行旋转运算，它会自动把你设置的欧拉角转换为四元数</p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">transform</span><span class="p">.</span><span class="n">eulerAngles</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Vector3</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">90</span><span class="p">,</span> <span class="m">0</span><span class="p">);</span>
<span class="c1">// 实际上自动转换为：</span>
<span class="n">transform</span><span class="p">.</span><span class="n">rotation</span> <span class="p">=</span> <span class="n">Quaternion</span><span class="p">.</span><span class="nf">Euler</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">90</span><span class="p">,</span> <span class="m">0</span><span class="p">);</span>
</code></pre></div></div>

<p><strong>欧拉角插值出现的问题</strong></p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Vector3</span> <span class="k">from</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Vector3</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">);</span>
<span class="n">Vector3</span> <span class="n">to</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Vector3</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">360</span><span class="p">,</span> <span class="m">0</span><span class="p">);</span>

<span class="n">Vector3</span> <span class="n">result</span> <span class="p">=</span> <span class="n">Vector3</span><span class="p">.</span><span class="nf">Lerp</span><span class="p">(</span><span class="k">from</span><span class="p">,</span> <span class="n">to</span><span class="p">,</span> <span class="m">0.5f</span><span class="p">);</span> <span class="c1">//会插值到180°</span>
</code></pre></div></div>
<p>实际上，从0°到360°最短路径时0°，这就是欧拉角插值跳变的问题<br />
使用四元数可以避免</p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Quaternion</span> <span class="n">q1</span> <span class="p">=</span> <span class="n">Quaternion</span><span class="p">.</span><span class="nf">Euler</span><span class="p">(</span><span class="k">from</span><span class="p">);</span>
<span class="n">Quaternion</span> <span class="n">q2</span> <span class="p">=</span> <span class="n">Quaternion</span><span class="p">.</span><span class="nf">Euler</span><span class="p">(</span><span class="n">to</span><span class="p">);</span>

<span class="n">Quaternion</span> <span class="n">qResult</span> <span class="p">=</span> <span class="n">Quaternion</span><span class="p">.</span><span class="nf">Slerp</span><span class="p">(</span><span class="n">q1</span><span class="p">,</span> <span class="n">q2</span><span class="p">,</span> <span class="m">0.5f</span><span class="p">);</span>
</code></pre></div></div>

<p><strong>Euler Angles和Quaternion的转换</strong><br />
欧拉角 -&gt; 四元数</p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Quaternion</span> <span class="n">q</span> <span class="p">=</span> <span class="n">Quaternion</span><span class="p">.</span><span class="nf">Euler</span><span class="p">(</span><span class="m">30</span><span class="p">,</span> <span class="m">45</span><span class="p">,</span> <span class="m">60</span><span class="p">);</span>
</code></pre></div></div>
<p>四元数 -&gt; 欧拉角</p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Vector3</span> <span class="n">euler</span> <span class="p">=</span> <span class="n">q</span><span class="p">.</span><span class="n">eulerAngles</span><span class="p">;</span>
</code></pre></div></div>
<blockquote>
  <p>四元数本身不会存储旋转顺序和原始角度，这个反转换可能会出现不寻常的角度，比如-180°、350°等</p>
</blockquote>

<p>欧拉角和四元数的关系：三次独立的XYZ轴旋转（Euler Angle）相当于对于某个特定轴旋转特定角度（Quaternion）<br />
<strong>深入原理</strong>
给定欧拉角 (𝛼, 𝛽, 𝛾)，表示绕 X、Y、Z 旋转，四元数变换公式如下（XYZ顺序）：</p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Quaternion</span> <span class="n">q</span> <span class="p">=</span> <span class="n">Quaternion</span><span class="p">.</span><span class="nf">Euler</span><span class="p">(</span><span class="n">alpha</span><span class="p">,</span> <span class="n">beta</span><span class="p">,</span> <span class="n">gamma</span><span class="p">);</span>
</code></pre></div></div>
<p>等价于</p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Quaternion</span> <span class="n">qx</span> <span class="p">=</span> <span class="n">Quaternion</span><span class="p">.</span><span class="nf">AngleAxis</span><span class="p">(</span><span class="n">alpha</span><span class="p">,</span> <span class="n">Vector3</span><span class="p">.</span><span class="n">right</span><span class="p">);</span>
<span class="n">Quaternion</span> <span class="n">qy</span> <span class="p">=</span> <span class="n">Quaternion</span><span class="p">.</span><span class="nf">AngleAxis</span><span class="p">(</span><span class="n">beta</span><span class="p">,</span> <span class="n">Vector3</span><span class="p">.</span><span class="n">up</span><span class="p">);</span>
<span class="n">Quaternion</span> <span class="n">qz</span> <span class="p">=</span> <span class="n">Quaternion</span><span class="p">.</span><span class="nf">AngleAxis</span><span class="p">(</span><span class="n">gamma</span><span class="p">,</span> <span class="n">Vector3</span><span class="p">.</span><span class="n">forward</span><span class="p">);</span>
<span class="n">Quaternion</span> <span class="n">q</span> <span class="p">=</span> <span class="n">qy</span> <span class="p">*</span> <span class="n">qx</span> <span class="p">*</span> <span class="n">qz</span><span class="p">;</span> <span class="c1">//组合旋转，顺序重要；Unity为左乘</span>
</code></pre></div></div>

<p><strong>万向节死锁（Gimbal Lock）</strong><br />
Gimbal Lock是指使用欧拉角进行三维旋转时，当两个旋转轴重合，导致自由度从3变成2，某个方向的旋转无法表达的情况<br />
产生Gimbal Lock的核心原因是欧拉角的特性:<br />
一组欧拉角描述一个旋转过程：即，围绕每个轴的旋转角度和围绕每个轴旋转的顺序，顺序很重要，不同的顺序会带来不同的结果
Gimbal Lock产生的核心是：先执行旋转的轴会带动后执行旋转的轴转动，即产生新轴；但后执行旋转的轴不会带动先执行旋转的轴转动，即一个轴旋转过后就不会出现新轴了，这就会出现轴重合问题，即导致万向节死锁的产生<br />
<strong>数学本质是矩阵乘法的非交换性</strong><br />
旋转在数学上是用矩阵表示的：</p>
<ul>
  <li>旋转操作使用矩阵乘法实现的</li>
  <li>矩阵乘法不满足交换律，也就是说：Rx × Ry != Ry × Rx</li>
</ul>

<p><strong>核心关键是为什么后旋转的轴不能带动先旋转的轴？</strong><br />
这个问题涉及到旋转的执行顺序本质上是“嵌套变换”，而不是“同步协商”的。这就像流水线的工序，是不可逆和不可交错的<br />
核心结论：<br />
每一步旋转都是在“当前局部坐标系”下完成的，而不是回头修改前面坐标系的历史状态<br />
后面的旋转只是在前面旋转结果基础上叠加，它并不会“回头影响”之前已经旋转过的坐标系<br />
举个例子：
假设做一个蛋糕：<br />
第一步：打鸡蛋  <br />
第二步：加牛奶<br />
第三步：搅拌<br />
现在你问：为什么我搅拌的时候不能回头改变我打鸡蛋这个过程？<br />
因为：打鸡蛋已经做完了，是个不可逆的状态变换，你在搅拌的时候，只能处理“鸡蛋 + 牛奶”的混合物，不能改变已经打完的蛋</p>

<p><strong>数学视角：矩阵乘法是方向性的</strong>
旋转是通过矩阵来表示的，顺序matters： <code class="language-plaintext highlighter-rouge">FinalRotation = Rz · Ry · Rx</code><br />
你先执行Rx，然后再执行Ry,再执行Rz<br />
每个旋转操作都是将当前状态乘上一个旋转矩阵<br />
一旦Rx被应用，坐标系就已经变了<br />
之后的Ry是在这个变了的坐标系下进行的<br />
Ry不会也无法回头修改Rx的效果<br />
因为矩阵乘法不是可交换的，所以这个顺序是“单向嵌套”，不是“双向影响”</p>

<p><strong>欧拉角是旋转变换，每次旋转变换都是叠加了上次旋转的状态后再进行的，也就是说，虽然每次变换都是独立的，但都要经历从初始状态按顺序旋转，绕轴旋转角度达到目标状态这一系列流程，这就把时序包含在其中了</strong><br />
<strong>初始状态是（0，0，0）</strong></p>

<p><strong>为什么看到的变换是连续的</strong><br />
欧拉角变换虽然顺序嵌套，但它们构成的是一个连续函数映射<br />
欧拉角 → 四元数 → 变换矩阵 → 渲染出模型的姿态
整个链条中：</p>

<p>欧拉角：你手动输入的 (X, Y, Z) 是连续的（例如你拖动滑块）</p>

<p>四元数：Unity 把欧拉角转换成一个四元数，这是一个连续光滑的旋转表示</p>

<p>矩阵：四元数再转成 3×3 旋转矩阵，依然是平滑的</p>

<p>模型：在世界中展示的姿态是自然旋转、连贯变化的</p>

<p>所以你看到的旋转是连续的、平滑的。</p>

<p><strong>哪些地方是不连续的</strong><br />
1.万向节死锁，当某个周旋转到90°，两个轴重合，自由度减少，Unity为了保持“姿态”，可能会自动调整其他轴的值，此时Rotation的值再Inspector中跳变，但物体并没有跳<br />
2.四元数存在加减号不唯一（180°对称）问题，一个方向可以由两个四元数表示：q和-q，它们作用在物体上是一样的，Unity在背后自动选择最短路径，所以视觉上依旧是连续旋转路径上的最短旋转</p>

<h3 id="2游戏对象相关">2.游戏对象相关</h3>

<table>
  <thead>
    <tr>
      <th>类型</th>
      <th>说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">GameObject</code></td>
      <td>场景中所有对象的基本单元</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Component</code></td>
      <td>所有组件的基类</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Transform</code></td>
      <td>表示物体的位置、旋转、缩放</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">MonoBehaviour</code></td>
      <td>用户自定义脚本的基类</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">ScriptableObject</code></td>
      <td>可创建的资产类，用于数据管理</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Object</code></td>
      <td>Unity 所有对象的基类（包括资源）</td>
    </tr>
  </tbody>
</table>

<h3 id="3图形和渲染">3.图形和渲染</h3>

<table>
  <thead>
    <tr>
      <th>类型</th>
      <th>说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Mesh</code>, <code class="language-plaintext highlighter-rouge">MeshRenderer</code></td>
      <td>网格和其渲染组件</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Material</code></td>
      <td>材质资源</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Shader</code></td>
      <td>控制材质渲染效果的程序</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Texture</code>, <code class="language-plaintext highlighter-rouge">Texture2D</code>, <code class="language-plaintext highlighter-rouge">RenderTexture</code></td>
      <td>贴图资源</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Camera</code></td>
      <td>摄像机组件</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Light</code></td>
      <td>灯光组件</td>
    </tr>
  </tbody>
</table>

<h3 id="4物理相关">4.物理相关</h3>

<table>
  <thead>
    <tr>
      <th>类型</th>
      <th>说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Rigidbody</code>, <code class="language-plaintext highlighter-rouge">Rigidbody2D</code></td>
      <td>刚体，驱动物体物理行为</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Collider</code>, <code class="language-plaintext highlighter-rouge">BoxCollider</code>, <code class="language-plaintext highlighter-rouge">SphereCollider</code>, 等</td>
      <td>碰撞器</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Physics</code>, <code class="language-plaintext highlighter-rouge">Physics2D</code></td>
      <td>提供物理检测和操作的静态类</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Joint</code> 系列</td>
      <td>链接两个刚体（如 HingeJoint）</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">ContactPoint</code></td>
      <td>碰撞点信息结构体</td>
    </tr>
  </tbody>
</table>

<h3 id="5输入和事件">5.输入和事件</h3>

<table>
  <thead>
    <tr>
      <th>类型</th>
      <th>说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Input</code></td>
      <td>输入系统静态类</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">KeyCode</code></td>
      <td>键盘按键枚举</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Touch</code>, <code class="language-plaintext highlighter-rouge">TouchPhase</code></td>
      <td>触摸输入相关</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Event</code>, <code class="language-plaintext highlighter-rouge">EventType</code></td>
      <td>GUI 系统事件类型</td>
    </tr>
  </tbody>
</table>

<h3 id="6资源与序列化">6.资源与序列化</h3>

<table>
  <thead>
    <tr>
      <th>类型</th>
      <th>说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Resources</code>, <code class="language-plaintext highlighter-rouge">AssetBundle</code></td>
      <td>资源加载管理器</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">TextAsset</code></td>
      <td>文本资源，如 JSON、配置文件等</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">SerializableAttribute</code></td>
      <td>允许自定义类型序列化存储</td>
    </tr>
  </tbody>
</table>

<h3 id="7uiugui">7.UI（UGUI）</h3>

<table>
  <thead>
    <tr>
      <th>类型</th>
      <th>说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Canvas</code>, <code class="language-plaintext highlighter-rouge">CanvasRenderer</code></td>
      <td>UI 根组件</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">RectTransform</code></td>
      <td>用于 UI 布局的 Transform</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Image</code>, <code class="language-plaintext highlighter-rouge">Text</code>, <code class="language-plaintext highlighter-rouge">Button</code>, <code class="language-plaintext highlighter-rouge">Slider</code> 等</td>
      <td>基础 UI 组件</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">EventSystem</code></td>
      <td>管理 UI 输入事件</td>
    </tr>
  </tbody>
</table>

<h3 id="8时间协程与生命周期">8.时间、协程与生命周期</h3>

<table>
  <thead>
    <tr>
      <th>类型</th>
      <th>说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Time</code></td>
      <td>时间相关（如 deltaTime、timeScale）</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">WaitForSeconds</code>, <code class="language-plaintext highlighter-rouge">WaitUntil</code></td>
      <td>协程等待辅助类</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Coroutine</code></td>
      <td>协程对象类型</td>
    </tr>
  </tbody>
</table>]]></content><author><name>ljf12825</name></author><category term="笔记" /><category term="Unity" /><category term="Unity System" /><summary type="html"><![CDATA[Unity内建类型]]></summary></entry><entry><title type="html">Physics System</title><link href="http://localhost:4000/posts/2025-06-03-Physics-System/" rel="alternate" type="text/html" title="Physics System" /><published>2025-06-01T00:00:00+08:00</published><updated>2025-06-01T00:00:00+08:00</updated><id>http://localhost:4000/posts/Physics-System</id><content type="html" xml:base="http://localhost:4000/posts/2025-06-03-Physics-System/"><![CDATA[]]></content><author><name>ljf12825</name></author><category term="笔记" /><category term="Unity" /><category term="Unity System" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Multithread</title><link href="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Multithread.html" rel="alternate" type="text/html" title="Multithread" /><published>2025-06-01T00:00:00+08:00</published><updated>2025-06-01T00:00:00+08:00</updated><id>http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Multithread</id><content type="html" xml:base="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Multithread.html"><![CDATA[]]></content><author><name>ljf12825</name></author><category term="笔记" /><category term="Unity" /><category term="Unity System" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Gizmos</title><link href="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Gizmos.html" rel="alternate" type="text/html" title="Gizmos" /><published>2025-06-01T00:00:00+08:00</published><updated>2025-06-01T00:00:00+08:00</updated><id>http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Gizmos</id><content type="html" xml:base="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Gizmos.html"><![CDATA[]]></content><author><name>ljf12825</name></author><category term="笔记" /><category term="Unity" /><category term="Unity System" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Input System</title><link href="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Input-System.html" rel="alternate" type="text/html" title="Input System" /><published>2025-06-01T00:00:00+08:00</published><updated>2025-06-01T00:00:00+08:00</updated><id>http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Input-System</id><content type="html" xml:base="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Input-System.html"><![CDATA[]]></content><author><name>ljf12825</name></author><category term="笔记" /><category term="Unity" /><category term="Unity System" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">FSM</title><link href="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/FSM.html" rel="alternate" type="text/html" title="FSM" /><published>2025-06-01T00:00:00+08:00</published><updated>2025-06-01T00:00:00+08:00</updated><id>http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/FSM</id><content type="html" xml:base="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/FSM.html"><![CDATA[]]></content><author><name>ljf12825</name></author><category term="笔记" /><category term="Unity" /><category term="Unity System" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Import Assets</title><link href="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Import-assets.html" rel="alternate" type="text/html" title="Import Assets" /><published>2025-06-01T00:00:00+08:00</published><updated>2025-06-01T00:00:00+08:00</updated><id>http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Import-assets</id><content type="html" xml:base="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Import-assets.html"><![CDATA[<p>Unity支持多种格式的资源文件，并能自动识别并进行初步处理</p>

<h2 id="资源导入基本流程">资源导入基本流程</h2>
<p><strong>1.将资源文件拖入<code class="language-plaintext highlighter-rouge">Assets</code>目录中（Unity会自动导入）</strong><br />
<strong>2.在Inspector面板中查看导入设置</strong><br />
<strong>3.配置相关参数，比如压缩方式、贴图类型、是否生成碰撞体等</strong><br />
<strong>4.使用资源（拖到场景、作为材质贴图、挂到AudioSource等）</strong></p>

<h2 id="模型">模型</h2>

<h3 id="支持格式">支持格式</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">.fbx</code>推荐</li>
  <li><code class="language-plaintext highlighter-rouge">.obj</code></li>
  <li><code class="language-plaintext highlighter-rouge">.dae</code>（Collada）</li>
  <li><code class="language-plaintext highlighter-rouge">.blend</code>（需要Blender）</li>
</ul>

<h3 id="导入流程">导入流程</h3>
<p>1.拖拽<code class="language-plaintext highlighter-rouge">.fbx</code>文件到<code class="language-plaintext highlighter-rouge">Assets</code>文件夹<br />
2.选中模型文件，查看<code class="language-plaintext highlighter-rouge">Inspector</code>的导入设置</p>
<ul>
  <li>Scale Factor：缩放（一般保持默认）</li>
  <li>Import Animations：是否导入动画</li>
  <li>Import Materials：是否导入材质</li>
  <li>Generate Colliders：是否自动生成碰撞体</li>
</ul>

<h3 id="导入后组成">导入后组成</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Model</code>: 3D网格</li>
  <li><code class="language-plaintext highlighter-rouge">Rig</code>（如果有骨骼）：用于动画绑定</li>
  <li><code class="language-plaintext highlighter-rouge">Animation</code>：包含的动画片段</li>
  <li><code class="language-plaintext highlighter-rouge">Materials</code>：自动生成或关联的材质</li>
</ul>

<h2 id="贴图">贴图</h2>

<h3 id="支持格式-1">支持格式</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">.png</code>、<code class="language-plaintext highlighter-rouge">.jpg</code>、<code class="language-plaintext highlighter-rouge">.tga</code>、<code class="language-plaintext highlighter-rouge">.psd</code>（支持图层）等</li>
</ul>

<h3 id="导入流程-1">导入流程</h3>

<p>1.拖入图片文件
2.在Inspector中设置：</p>
<ul>
  <li>sRGB（Color Texture）：颜色贴图用，法线贴图需取消勾选</li>
  <li>Alpha Is Transparency：如果使用透明通道</li>
  <li>Wrap Mode：Repeat（平铺）或Clamp（拉伸）</li>
  <li>Filter Mode：Bilinear、Trilinear、Point（像素风）</li>
  <li>Compression：高压缩（小体积）还是高质量（清晰）</li>
  <li>Texture Type:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">Default</code>（通用）</li>
      <li><code class="language-plaintext highlighter-rouge">Sprite</code>（用于UI）</li>
      <li><code class="language-plaintext highlighter-rouge">Normal map</code>（法线贴图）</li>
      <li><code class="language-plaintext highlighter-rouge">Lightmap</code>（光照图）</li>
    </ul>
  </li>
</ul>

<h2 id="音频">音频</h2>

<h3 id="支持格式-2">支持格式</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">.mp3</code>（压缩）</li>
  <li><code class="language-plaintext highlighter-rouge">.wav</code>（无损）</li>
  <li><code class="language-plaintext highlighter-rouge">.ogg</code>（高效）</li>
  <li><code class="language-plaintext highlighter-rouge">.aiff</code></li>
</ul>

<h2 id="导入流程-2">导入流程</h2>

<p>1.拖入音频文件<br />
2.在<code class="language-plaintext highlighter-rouge">Inspector</code>中设置：</p>
<ul>
  <li>Load Type：
    <ul>
      <li><code class="language-plaintext highlighter-rouge">Decompress On Load</code>（加载时解压，适合短音效）</li>
      <li><code class="language-plaintext highlighter-rouge">Streaming</code>（边播放边加载，适合背景音乐）</li>
    </ul>
  </li>
  <li>Compression Format:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">Vorbis</code>、<code class="language-plaintext highlighter-rouge">ADPCM</code>、<code class="language-plaintext highlighter-rouge">PCM</code></li>
    </ul>
  </li>
  <li>3D Sound：是否启用3D空间化</li>
  <li>Loop：是否循环播放</li>
</ul>

<blockquote>
  <p><strong>资源组织建议：</strong> 使用好的文件夹结构和命名习惯，可以极大提高开发效率</p>
</blockquote>]]></content><author><name>ljf12825</name></author><category term="笔记" /><category term="Unity" /><summary type="html"><![CDATA[Unity支持多种格式的资源文件，并能自动识别并进行初步处理]]></summary></entry><entry><title type="html">Layer</title><link href="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Layer.html" rel="alternate" type="text/html" title="Layer" /><published>2025-06-01T00:00:00+08:00</published><updated>2025-06-01T00:00:00+08:00</updated><id>http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Layer</id><content type="html" xml:base="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Layer.html"><![CDATA[<p>在Unity中，Layer是要给非常重要的系统<br />
它主要用于：</p>
<ul>
  <li>控制物体的渲染与相机的可见性</li>
  <li>控制物理碰撞（配合Layer Collision Matrix）</li>
  <li>通过脚本进行物体分类和筛选</li>
</ul>

<h2 id="什么是layer">什么是Layer</h2>

<p>Layer是给GameObject打的“标签”，但它和<code class="language-plaintext highlighter-rouge">Tag</code>不一样，Layer是用于功能性控制的，特别在：</p>
<ul>
  <li>摄像机的Culling Mask</li>
  <li>光照影响（Light Culling）</li>
  <li>物理碰撞（Physics Layer）</li>
  <li>射线检测（Raycast Layer）</li>
</ul>

<h2 id="layer的使用场景">Layer的使用场景</h2>
<h3 id="1摄像机视野控制culling-mask">1.摄像机视野控制（Culling Mask）</h3>
<p>在Camera组件中，你可以设置</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Culling Mask -&gt; 选择哪些Layer可以被该相机看到
</code></pre></div></div>

<p><strong>用途：</strong></p>
<ul>
  <li>UI相机只看UI层</li>
  <li>小地图相机只看敌人层</li>
  <li>分屏镜头每个只看自己的部分</li>
</ul>

<h3 id="2物理碰撞控制layer-collision-matrix">2.物理碰撞控制（Layer Collision Matrix）</h3>
<p>在菜单中：</p>

<div class="language-nginx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">Edit</span> <span class="s">-&gt;</span> <span class="s">Project</span> <span class="s">Settings</span> <span class="s">-&gt;</span> <span class="s">Physics</span>
</code></pre></div></div>

<p>你可以看到Layer Collision Matrix，它控制：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>哪些Layer和哪些Layer能发生物理碰撞
</code></pre></div></div>

<p><strong>用途：</strong></p>
<ul>
  <li>玩家层与敌人层可以碰撞，但不和自身碰撞</li>
  <li>子弹不撞自己</li>
  <li>角色不被UI的Collider打断</li>
</ul>

<h3 id="3射线检测">3.射线检测</h3>
<p>可以通过Layer来控制射线是否命中某个对象</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">layerMask</span> <span class="p">=</span> <span class="m">1</span> <span class="p">&lt;&lt;</span> <span class="n">LayerMask</span><span class="p">.</span><span class="nf">NameToLayer</span><span class="p">(</span><span class="s">"Enemy"</span><span class="p">);</span>
<span class="k">if</span> <span class="p">(</span><span class="n">Physics</span><span class="p">.</span><span class="nf">Raycast</span><span class="p">(</span><span class="n">ray</span><span class="p">,</span> <span class="k">out</span> <span class="n">hit</span><span class="p">,</span> <span class="m">100f</span><span class="p">,</span> <span class="n">layerMask</span><span class="p">))</span> <span class="n">Debug</span><span class="p">.</span><span class="nf">Log</span><span class="p">(</span><span class="s">"Hit enemy"</span><span class="p">);</span>
</code></pre></div></div>

<p>也可以多层合并：</p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">mask</span> <span class="p">=</span> <span class="p">(</span><span class="m">1</span> <span class="p">&lt;&lt;</span> <span class="n">LayerMask</span><span class="p">.</span><span class="nf">NameToLayer</span><span class="p">(</span><span class="s">"Enemy"</span><span class="p">))</span> <span class="p">|</span> <span class="p">(</span><span class="m">1</span> <span class="p">&lt;&lt;</span> <span class="n">LayerMask</span><span class="p">.</span><span class="nf">NameToLayer</span><span class="p">(</span><span class="s">"NPC"</span><span class="p">));</span>
</code></pre></div></div>
<h2 id="内置与自定义layer">内置与自定义Layer</h2>

<h3 id="内置layerunity默认的">内置Layer（Unity默认的）</h3>

<table>
  <thead>
    <tr>
      <th>编号</th>
      <th>名称</th>
      <th>说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>Default</td>
      <td>默认层</td>
    </tr>
    <tr>
      <td>4</td>
      <td>Water</td>
      <td>水体特效</td>
    </tr>
    <tr>
      <td>5</td>
      <td>UI</td>
      <td>UI 专用</td>
    </tr>
  </tbody>
</table>

<h3 id="自定义layer">自定义Layer</h3>
<p>Unity允许你最多使用32个Layer（编号 0~31），其中前几个是保留的<br />
自定义方式：</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">选中</span> <span class="n">GameObject</span> <span class="o">-&gt;</span> <span class="n">Inspector</span> <span class="o">-&gt;</span> <span class="n">Layer</span> <span class="o">-&gt;</span> <span class="k">Add</span> <span class="n">Layer</span><span class="p">...</span>
</code></pre></div></div>
<p>添加后可为GameObject设置：</p>
<div class="language-nginx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">Layer</span> <span class="s">-&gt;</span> <span class="s">你刚添加的层名</span>
</code></pre></div></div>
<h2 id="layer与tag的区别">Layer与Tag的区别</h2>

<table>
  <thead>
    <tr>
      <th>特性</th>
      <th>Layer</th>
      <th>Tag</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>数量限制</td>
      <td>最多 32 个</td>
      <td>无限制</td>
    </tr>
    <tr>
      <td>用于渲染控制</td>
      <td>✅</td>
      <td>❌</td>
    </tr>
    <tr>
      <td>用于物理控制</td>
      <td>✅</td>
      <td>❌</td>
    </tr>
    <tr>
      <td>用于分类查找</td>
      <td>有限制（用 LayerMask）</td>
      <td>✅（用 CompareTag 等）</td>
    </tr>
    <tr>
      <td>性能优化</td>
      <td>✅（用于剔除、射线过滤）</td>
      <td>❌</td>
    </tr>
  </tbody>
</table>

<h3 id="建议">建议</h3>
<ul>
  <li>给每种功能的对象分配专属Layer</li>
  <li>摄像机、光源、UI、Trigger检测都应依赖Layer控制逻辑</li>
</ul>]]></content><author><name>ljf12825</name></author><category term="笔记" /><category term="Unity" /><category term="Unity System" /><summary type="html"><![CDATA[在Unity中，Layer是要给非常重要的系统 它主要用于： 控制物体的渲染与相机的可见性 控制物理碰撞（配合Layer Collision Matrix） 通过脚本进行物体分类和筛选]]></summary></entry></feed>