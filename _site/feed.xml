<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-06-27T22:00:15+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">ljf12825’s Blog</title><subtitle>Efficient &amp; Elegant</subtitle><author><name>Jeff Lee</name><email>2548278761@qq.com</email></author><entry><title type="html">Unity Invisible Trap</title><link href="http://localhost:4000/debug/2025/06/01/Unity-Invisible-Trap.html" rel="alternate" type="text/html" title="Unity Invisible Trap" /><published>2025-06-01T00:00:00+08:00</published><updated>2025-06-01T00:00:00+08:00</updated><id>http://localhost:4000/debug/2025/06/01/Unity-Invisible-Trap</id><content type="html" xml:base="http://localhost:4000/debug/2025/06/01/Unity-Invisible-Trap.html"><![CDATA[<p>Unity实际开发中，有很多“看起来正常、实则容易出错”的<strong>奇怪问题</strong>（或称为<strong>隐形陷阱</strong>）</p>

<h1 id="class-1-交互相关">Class 1 交互相关</h1>
<h2 id="1多个可交互物体输入触发多个">1.多个可交互物体，输入触发多个</h2>
<ul>
  <li>场景：靠近多个箱子同时按下<code class="language-plaintext highlighter-rouge">E</code>，多个箱子一起打开</li>
  <li>原因：所有物体监听<code class="language-plaintext highlighter-rouge">E</code>，没有加距离或唯一判定</li>
  <li>解决方案：只响应最近/朝向前方的一个对象</li>
</ul>

<h2 id="2trigger触发多次enterexit">2.Trigger触发多次Enter/Exit</h2>
<ul>
  <li>场景：一个对象靠近某个Trigger区域，<code class="language-plaintext highlighter-rouge">OnTriggerEnter</code>被触发两次</li>
  <li>原因：
    <ul>
      <li>可能身上挂有多个Collider</li>
      <li>或包含子物体的Collider也触发了</li>
    </ul>
  </li>
  <li>解决方案：确认是否是重复触发，加入<code class="language-plaintext highlighter-rouge">other.gameObject == expectedObject</code>判断</li>
</ul>

<h2 id="3button-ui点击两次才响应">3.Button UI点击两次才响应</h2>
<ul>
  <li>原因：
    <ul>
      <li>UI按钮背后有透明/未关闭的UI元素挡住射线</li>
      <li>或者EventSystem被禁用、Canvas未设置正确Sorting Order</li>
    </ul>
  </li>
  <li>解决方案：调试Graphic Raycaster、Canvas排序、Raycast Target勾选项</li>
</ul>

<h1 id="class-2-物理系统相关">Class 2 物理系统相关</h1>]]></content><author><name>ljf12825</name></author><category term="Debug" /><category term="Unity" /><category term="Unity Trap" /><category term="Debug" /><summary type="html"><![CDATA[Unity实际开发中，有很多“看起来正常、实则容易出错”的奇怪问题（或称为隐形陷阱）]]></summary></entry><entry><title type="html">Collider &amp;amp; Trigger</title><link href="http://localhost:4000/posts/2025-06-04-Collider-and-Trigger/" rel="alternate" type="text/html" title="Collider &amp;amp; Trigger" /><published>2025-06-01T00:00:00+08:00</published><updated>2025-06-01T00:00:00+08:00</updated><id>http://localhost:4000/posts/Collider-and-Trigger</id><content type="html" xml:base="http://localhost:4000/posts/2025-06-04-Collider-and-Trigger/"><![CDATA[<p>Unity中的碰撞体是物理系统的重要组成部分，负责定义游戏对象的形状以进行碰撞检测。简单来说，Collider是一个无形的边界，用于检测物体是否接触或重叠，从而触发碰撞事件和物理响应</p>

<h2 id="什么是collider">什么是Collider</h2>
<p>Collider是附加在游戏对象上的组件，用于告诉物理引擎这个对象的碰撞范围。Collider本身不会渲染形状，只是一个隐形的物理边界</p>

<h2 id="常见的collider类型">常见的Collider类型</h2>
<ul>
  <li>BoxCollider<br />
立方体形状的碰撞体，适合方形或长方体物体</li>
  <li>SphereCollider
球形碰撞体，适合球形或圆形物体</li>
  <li>CapsuleCollider
胶囊碰撞体，适合人物、柱子等</li>
  <li>MeshCollider
使用自定义网格模型做碰撞体，适合复杂形状，性能较差，且通常用于静态物体</li>
  <li>WheelCollider
专门用于车辆轮胎的碰撞和物理模拟</li>
</ul>

<h2 id="collider和rigidbody的关系">Collider和Rigidbody的关系</h2>
<ul>
  <li>Collider只负责检测碰撞，不会自定产生物理运动</li>
  <li>Rigidbody组件负责物理运动和动力学</li>
  <li>一个没有Rigidbody的物体的Collider会被当作“静态碰撞体”使用（静态障碍物），不会移动也不响应物理力</li>
  <li>一个有Rigidbody的物体可以在物理引擎驱动下移动，Collider会随物体运动</li>
</ul>

<h2 id="collider-panel">Collider Panel</h2>
<h3 id="box-collider">Box Collider</h3>
<p><img src="/assets/images/BoxColliderPanel.jpg" alt="BoxColliderPanel" /></p>
<ul>
  <li>IsTrigger
默认false，此时Collider是实体碰撞体，会阻挡其他物体，发生物理碰撞和反弹<br />
勾选时，Collider变成Trigger，不会阻挡其他物体，但会检测进入、离开和停留事件，可以用来做区域检测、事件触发等</li>
  <li>Provides Contacts
用于物理引擎的碰撞检测和接触点信息提供<br />
默认false，Collider可能只报告碰撞发生，但不提供详细的接触点信息，这样可以节省一些计算资源<br />
勾选后，Collider会提供详细的碰撞接触点信息，这样物理引擎在碰撞时，可以把碰撞的具体接触点信息暴露出来，供脚本或物理系统使用
    <div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">UnityEngine</span><span class="p">;</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">CollisionPointExample</span> <span class="p">:</span> <span class="n">MonoBehaviour</span>
<span class="p">{</span>
  <span class="k">void</span> <span class="nf">OnCollisionEnter</span><span class="p">(</span><span class="n">Collision</span> <span class="n">collision</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="k">foreach</span> <span class="p">(</span><span class="n">ContactPoint</span> <span class="n">contact</span> <span class="k">in</span> <span class="n">collision</span><span class="p">.</span><span class="n">contacts</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="c1">//接触点位置</span>
      <span class="n">Vector3</span> <span class="n">contactPoint</span> <span class="p">=</span> <span class="n">contact</span><span class="p">.</span><span class="n">point</span><span class="p">;</span>
      <span class="c1">//接触点法线方向</span>
      <span class="n">Vector3</span> <span class="n">contactNormal</span> <span class="p">=</span> <span class="n">contact</span><span class="p">.</span><span class="n">normal</span><span class="p">;</span>

      <span class="n">Debug</span><span class="p">.</span><span class="nf">Log</span><span class="p">(</span><span class="s">$"</span><span class="p">{</span><span class="n">contactPoint</span><span class="p">}</span><span class="s">, </span><span class="p">{</span><span class="n">contactNormal</span><span class="p">}</span><span class="s">"</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <p>如果时触发碰撞，IsTrigger勾选情况下，用的是OnTriggerEnter(Collider other)，这个回调中没有接触点信息，只能检测触发</p>
  </li>
  <li>Material
指的是Physics Material，用于控制物理行为的材质<br />
Create -&gt; Physics Material，编辑后拖入使用<br />
作用：Physics Material用于定义物体在碰撞时的物理特性，比如摩擦力（Friction）、弹性（Bounciness）
常用属性
    <ul>
      <li>Dynamic Friction 动摩擦力</li>
      <li>Static Friction 静摩擦力</li>
      <li>Bounciness 弹力（0到1之间，1表示完全反弹）</li>
      <li>Friction Combine 摩擦组合方式（与另一个碰撞体交互时如何合成摩擦）</li>
      <li>Bounce Combine 弹性组合方式（与另一个碰撞体交互时如何合成弹性）</li>
    </ul>
  </li>
  <li>Center
    <ul>
      <li>指的是碰撞体在物体局部坐标系中的中心点位置</li>
      <li>类型是Vector3</li>
      <li>不会移动GameObject本身，只会改变碰撞体的位置</li>
    </ul>
  </li>
  <li>Size
    <ul>
      <li>指碰撞体的尺寸</li>
      <li>类型是Vector3</li>
      <li>控制这个碰撞盒子的大小</li>
    </ul>
  </li>
  <li>Layer Overrides
    <ul>
      <li>Layer Override Priority
用于控制多个Collider在同一物体或子物体上时，哪个Collider的物理层优先生效<br />
如果一个物体上有多个Collider，并且它们分别设置了不同的Layer，Unity需要一个优先级来判断最终物体的碰撞行为应该归属哪个Layer<br />
When 2 Colliders have conflicting overrides, the settings of the collider with the higher priority are taken</li>
      <li>Include Layers
Layers to include when producing collisions</li>
      <li>Exclude Layers
Layers to exclude when producing collisions</li>
    </ul>
  </li>
</ul>

<h3 id="capsulecollider">CapsuleCollider</h3>
<p><img src="/assets/images/CapsuleColliderPanel.jpg" alt="CapsuleColliderPanel" /></p>
<ul>
  <li>Edit Collider
显示Collider边界<br />
Hold Alt after clicking control handle to pin center in place（中心缩放） 
Hold Shift after clicking control handle to scale uniformly（等比缩放）</li>
  <li>Direction
The axis of the capsule’s lengthwise orientation in the GameObject’s local space</li>
</ul>

<h3 id="meshcollider">MeshCollider</h3>
<p><img src="/assets/images/MeshColliderPanel.jpg" alt="MeshColliderPanel" />
<code class="language-plaintext highlighter-rouge">MeshCollider</code>是Unity提供的一个基于Mesh的碰撞体组件，它允许你使用一个Mesh的集合外形作为碰撞体检测的形状<br />
它可以让你的碰撞体检测看起来和你的物体一样精细</p>

<ul>
  <li>Convex
是否把Mesh处理为凸包<br />
如果勾选了：
    <ul>
      <li>可以用于动态刚体</li>
      <li>可以用作Trigger</li>
      <li>不能太复杂（最多255个三角形）</li>
    </ul>

    <p>如果不勾选：</p>
    <ul>
      <li>可精确表示复杂网格，但只能用于静态物体</li>
      <li>不支持Trigger和Rigidbody</li>
    </ul>
  </li>
</ul>

<p><strong>MeshCollider Convex使用注意事项</strong></p>

<table>
  <thead>
    <tr>
      <th>场景</th>
      <th>是否适合用 MeshCollider</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>地形、建筑（静态）</td>
      <td>非 Convex MeshCollider</td>
    </tr>
    <tr>
      <td>可交互物体 + Rigidbody</td>
      <td>Convex MeshCollider</td>
    </tr>
    <tr>
      <td>复杂模型 + Trigger</td>
      <td>Convex MeshCollider（前提是够简单）</td>
    </tr>
    <tr>
      <td>移动物体 + 非 Convex</td>
      <td>不支持，会报错</td>
    </tr>
    <tr>
      <td>高性能要求的游戏</td>
      <td>尽量少用 MeshCollider，建议用简化碰撞体代替</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>Cooking Options
用于控制在碰撞体生成（或烘焙）过程中如何处理网格数据，以提高碰撞效率或调试准确性<br />
Unity在运行时将网格数据转换为物理引擎能使用的碰撞形式格式，这个过程叫做Mesh Cooking</li>
</ul>

<h3 id="terrian-collider">Terrian Collider</h3>
<ul>
  <li>Enable Tree Colliders
When selected, Tree Colliders will be enabled</li>
</ul>

<h3 id="wheel-collider">Wheel Collider</h3>
<p><img src="/assets/images/WheelColliderPanel.jpg" alt="WheelColliderPanel" /></p>
<ul>
  <li>Wheel Damping Rate
轮阻，轮子滚动时的摩擦衰减速度</li>
  <li>Suspension Distance
悬挂行程，表示悬挂系统允许轮子从默认位置向下延伸的最大距离，单位是米</li>
  <li>Force App Point Distance
力施加点距离，控制Unity向车体施加力的位置，距离轮子中心的垂直距离，单位是米；可以理解为手推玩具车的高度</li>
  <li>Suspension Spring
用于模拟汽车的避震器（弹簧 + 阻尼）
    <ul>
      <li>Spring
弹簧刚度，越大越硬</li>
      <li>Damper
阻尼，阻止弹簧震荡的速度，越大越稳定</li>
      <li>Target Position
悬挂初始压缩程度，0表示全伸展，1表示全压缩</li>
    </ul>
  </li>
  <li>Forward Friction &amp; Sideways Friction
控制轮子在前进方向/侧向的摩擦行为
<code class="language-plaintext highlighter-rouge">Forward Friction</code>：控制加速、刹车的打滑程度
<code class="language-plaintext highlighter-rouge">Sideways Friction</code>：控制漂移、转弯时的打滑程度
    <ul>
      <li>Extremum Slip
轮胎开始打滑时的滑动值阈值</li>
      <li>Extremum Value
极限摩擦力值（未打滑前）</li>
      <li>Asymptote Slip
完全失控打滑时的滑动值阈值</li>
      <li>Asymptote Value
极限打滑摩擦力值</li>
      <li>Stiffness
总体摩擦刚度系数（0-1）。调节摩擦强度的“乘法器”
<strong>Wheel Collider API</strong></li>
    </ul>
  </li>
  <li>Motor Torque
通过代码向轮子添加驱动力（加速）
    <div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">wheelCollider</span><span class="p">.</span><span class="n">motorTorque</span> <span class="p">=</span> <span class="m">200f</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
  <li>Brake Torque
刹车力
    <div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">wheelCollider</span><span class="p">.</span><span class="n">brakeTorque</span> <span class="p">=</span> <span class="m">500f</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
  <li>Steer Angle
控制论在（尤其是前轮）的转向角度
    <div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">wheelCollider</span><span class="p">.</span><span class="n">steerAngle</span> <span class="p">=</span> <span class="m">30f</span><span class="p">;</span>
</code></pre></div>    </div>
    <p><strong>使用WheelCollider</strong></p>
  </li>
</ul>

<p>在车体下放置空 GameObject，添加 <code class="language-plaintext highlighter-rouge">WheelCollider</code>。</p>

<p>设置合适的 <code class="language-plaintext highlighter-rouge">Radius</code> 和 <code class="language-plaintext highlighter-rouge">Suspension</code>。</p>

<p>使用一个轮胎模型作为视觉轮子（但它自己不加 Collider）。</p>

<p>每帧用代码同步 <code class="language-plaintext highlighter-rouge">WheelCollider.GetWorldPose()</code> 更新轮胎模型位置旋转。</p>

<p>用 <code class="language-plaintext highlighter-rouge">motorTorque</code>、<code class="language-plaintext highlighter-rouge">brakeTorque</code>、<code class="language-plaintext highlighter-rouge">steerAngle</code> 控制车轮。</p>

<p><strong>示例：同步轮子模型</strong></p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="n">WheelCollider</span> <span class="n">wheelCollider</span><span class="p">;</span>
<span class="k">public</span> <span class="n">Transform</span> <span class="n">wheelModel</span><span class="p">;</span>

<span class="k">void</span> <span class="nf">Update</span><span class="p">()</span>
<span class="p">{</span>
  <span class="n">Vector3</span> <span class="n">pos</span><span class="p">;</span>
  <span class="n">Quaternion</span> <span class="n">rot</span><span class="p">;</span>
  <span class="n">wheelCollider</span><span class="p">.</span><span class="nf">GetWorldPose</span><span class="p">(</span><span class="k">out</span> <span class="n">pos</span><span class="p">,</span> <span class="k">out</span> <span class="n">rot</span><span class="p">);</span>
  <span class="n">wheelModel</span><span class="p">.</span><span class="n">position</span> <span class="p">=</span> <span class="n">pos</span><span class="p">;</span>
  <span class="n">wheelModel</span><span class="p">.</span><span class="n">rotation</span> <span class="p">=</span> <span class="n">rot</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="对齐collider和gameobject">对齐Collider和GameObject</h2>
<p>要保证Collider与GameObject完全重合，要让Collider的Center对准模型的中心，并让他的Size或Radius匹配模型的尺寸</p>

<h3 id="方法一使用mesh-renderer的bounds手动对齐">方法一：使用Mesh Renderer的Bounds手动对齐</h3>
<p>1.选中GameObject<br />
2.查看Inspector面板中的Mesh Renderer或Mesh Filter：</p>
<ul>
  <li>记下它的Bounds和Center</li>
</ul>

<p>3.在Collider中手动设置</p>

<h3 id="方法二使用unity自动对齐">方法二：使用Unity自动对齐</h3>
<p>在Inspector面板中，点击组件右上角的菜单-&gt;<code class="language-plaintext highlighter-rouge">Reset</code><br />
或删除后重新添加Box Collider，Unity会自动用Mesh尺寸初始化</p>
<blockquote>
  <p>注意：自动添加只对Unity支持的标志Mesh效果好，对导入模型FBX有时不准确</p>
</blockquote>

<h3 id="方法三通过脚本自动匹配mesh-bounds">方法三：通过脚本自动匹配Mesh Bounds</h3>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">UnityEngine</span><span class="p">;</span>

<span class="p">[</span><span class="nf">RequireComponent</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">BoxCollider</span><span class="p">))]</span>
<span class="k">public</span> <span class="k">class</span> <span class="nc">FitColliderToMesh</span> <span class="p">:</span> <span class="n">MonoBehaviour</span>
<span class="p">{</span>
  <span class="k">void</span> <span class="nf">Start</span><span class="p">()</span>
  <span class="p">{</span>
    <span class="kt">var</span> <span class="n">mesh</span> <span class="p">=</span> <span class="n">GetComponent</span><span class="p">&lt;</span><span class="n">MeshFilter</span><span class="p">&gt;().</span><span class="n">sharedMesh</span><span class="p">;</span>
    <span class="kt">var</span> <span class="n">bounds</span> <span class="p">=</span> <span class="n">mesh</span><span class="p">.</span><span class="n">bounds</span><span class="p">;</span>

    <span class="kt">var</span> <span class="n">collider</span> <span class="p">=</span> <span class="n">GetComponent</span><span class="p">&lt;</span><span class="n">BoxCollider</span><span class="p">&gt;();</span>
    <span class="n">collider</span><span class="p">.</span><span class="n">center</span> <span class="p">=</span> <span class="n">bounds</span><span class="p">.</span><span class="n">center</span><span class="p">;</span>
    <span class="n">collider</span><span class="p">.</span><span class="n">size</span> <span class="p">=</span> <span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>注意：<code class="language-plaintext highlighter-rouge">mesh.bounds</code>是局部坐标系下的范围<br />
如果模型被缩放，需要做缩放修正</p>

<h3 id="检查是否重合的方法">检查是否重合的方法</h3>
<p>1.Gizmo显示：Scene视图中选中物体，勾选Gizmo，可以看到Collider的框是否保住模型<br />
2.调试代码验证接触：你可以在运行是打印<code class="language-plaintext highlighter-rouge">Collider.contacts[0].point</code>看碰撞点位置是否符合预期<br />
3.把Mesh设成透明或关闭渲染，观察Collider是否贴合</p>

<h3 id="collider基类-api">Collider基类 API</h3>
<p><strong>常用属性</strong></p>

<table>
  <thead>
    <tr>
      <th>属性名</th>
      <th>说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">enabled</code></td>
      <td>是否启用该碰撞体，禁用后不参与碰撞检测。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">isTrigger</code></td>
      <td>是否作为触发器（Trigger），开启后不阻挡，只触发事件。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">attachedRigidbody</code></td>
      <td>关联的 Rigidbody 组件（如果有的话）。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">bounds</code></td>
      <td>碰撞体的世界轴对齐包围盒（<code class="language-plaintext highlighter-rouge">Bounds</code> 类型）。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">sharedMaterial</code></td>
      <td>物理材质，控制摩擦力和弹力。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">material</code></td>
      <td>碰撞体当前使用的物理材质实例。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">contactOffset</code></td>
      <td>碰撞体接触判定的偏移距离，影响物理碰撞的灵敏度。</td>
    </tr>
  </tbody>
</table>

<p><strong>常用方法</strong></p>

<table>
  <thead>
    <tr>
      <th>方法名</th>
      <th>说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">ClosestPoint(Vector3 position)</code></td>
      <td>返回碰撞体表面上距离指定点最近的点。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Raycast(Ray ray, out RaycastHit hitInfo, float maxDistance)</code></td>
      <td>以射线检测碰撞体是否被击中，返回击中信息。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">GetComponent&lt;T&gt;()</code></td>
      <td>获取挂载在同一GameObject上的组件（Collider继承自Component，所以可用此方法）。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">OnCollisionEnter/OnTriggerEnter</code></td>
      <td>物理事件回调，不是Collider自带的方法，但Collider触发时会调用对应脚本方法。</td>
    </tr>
  </tbody>
</table>

<p><strong>事件相关</strong><br />
Collider本身没有事件接口，但它的物理交互会调用以下MonoBehaviour的回调方法</p>

<table>
  <thead>
    <tr>
      <th>事件名</th>
      <th>触发条件</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">OnCollisionEnter(Collision collision)</code></td>
      <td>碰撞开始</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">OnCollisionStay(Collision collision)</code></td>
      <td>碰撞持续</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">OnCollisionExit(Collision collision)</code></td>
      <td>碰撞结束</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">OnTriggerEnter(Collider other)</code></td>
      <td>触发器进入</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">OnTriggerStay(Collider other)</code></td>
      <td>触发器持续</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">OnTriggerExit(Collider other)</code></td>
      <td>触发器离开</td>
    </tr>
  </tbody>
</table>

<h2 id="什么是trigger">什么是Trigger</h2>
<p>Trigger是Collider组件的一个特殊状态，用来检测物体的进入、停留和离开事件，但不会产生物理碰撞和响应<br />
Trigger是Collider的感应区域模式</p>

<h3 id="trigger应用场景">Trigger应用场景</h3>
<ul>
  <li>检测角色进入某个区域（陷阱、传送门、对话触发区）</li>
  <li>收集物品（进入物品碰撞区域后触发拾取）</li>
  <li>触发游戏事件（比如开门、启动机关）</li>
  <li>检测敌人视野范围</li>
</ul>

<h3 id="注意事项">注意事项</h3>
<ul>
  <li>触发器本身不会组织物体移动，物体可以自由穿过</li>
  <li>要保证触发事件能被调用，涉及的GameObject至少一个带有Collider（且其中至少一个是Trigger）和Rigidbody组件，一般建议被检测的物体带Rigidbody</li>
  <li>如果两个物体都没有Rigidbody，触发事件不会发生</li>
</ul>

<p><strong>本模块仅讲Collider作为组件的使用，详细物理系统请参照：</strong><br />
<a href="/posts/2025-06-03-Physics-System/">Physics System</a></p>]]></content><author><name>ljf12825</name></author><category term="笔记" /><category term="Unity" /><category term="Unity Component" /><category term="Physics System" /><summary type="html"><![CDATA[Unity中的碰撞体是物理系统的重要组成部分，负责定义游戏对象的形状以进行碰撞检测。简单来说，Collider是一个无形的边界，用于检测物体是否接触或重叠，从而触发碰撞事件和物理响应]]></summary></entry><entry><title type="html">Skybox</title><link href="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Skybox.html" rel="alternate" type="text/html" title="Skybox" /><published>2025-06-01T00:00:00+08:00</published><updated>2025-06-01T00:00:00+08:00</updated><id>http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Skybox</id><content type="html" xml:base="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Skybox.html"><![CDATA[<p>Skybox是一种渲染技术，用于在3D场景中创建远景背景，例如天空、宇宙、城市天际线等<br />
它本质上是一种把纹理图贴在一个立方体（或球体）内侧的技巧，玩家看不到边界，只能看到包裹在四周的“天空”</p>

<h2 id="skybox的类型">Skybox的类型</h2>

<p>Unity中支持几种常见类型的Skybox材质（Shader）：</p>

<table>
  <thead>
    <tr>
      <th>Shader 类型</th>
      <th>描述</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>6 Sided</strong></td>
      <td>使用六张图片分别贴在立方体六个面上（一般来自 HDRI 贴图拆分）</td>
    </tr>
    <tr>
      <td><strong>Cubemap</strong></td>
      <td>使用一个立方体贴图（.cubemap）进行渲染</td>
    </tr>
    <tr>
      <td><strong>Procedural</strong></td>
      <td>程序化天空（可设置太阳、云层、颜色渐变）</td>
    </tr>
    <tr>
      <td><strong>HDRI Skybox (PBR)</strong></td>
      <td>用于高清真实感环境的 HDR 渲染，常用于 Unity HDRP</td>
    </tr>
  </tbody>
</table>

<h2 id="设置skybox的方法">设置Skybox的方法</h2>
<h3 id="1通过lighting设置全局skybox">1.通过Lighting设置全局Skybox</h3>
<p>1.创建一个Skybox材质：</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Assets</code>-&gt;右键-&gt;<code class="language-plaintext highlighter-rouge">Create &gt; Material</code></li>
  <li>Shader选择为<code class="language-plaintext highlighter-rouge">Skybox/6 Sided</code>或<code class="language-plaintext highlighter-rouge">Skybox/Cubemap</code>或<code class="language-plaintext highlighter-rouge">Skybox/Procedural</code></li>
</ul>

<p>2.在材质中设置贴图（textures）或参数</p>

<p>3.打开<code class="language-plaintext highlighter-rouge">Window &gt; Rendering &gt; Lighting</code>面板</p>

<p>4.在<code class="language-plaintext highlighter-rouge">Environment &gt; Skybox Material</code>中拖入刚刚的材质</p>

<p>这会将该Skybox应用于整个场景</p>

<h3 id="2通过摄像机设置局部skybox高级">2.通过摄像机设置局部Skybox（高级）</h3>
<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">RenderSettings</span><span class="p">.</span><span class="n">skybox</span> <span class="p">=</span> <span class="n">mySkyboxMaterial</span><span class="p">;</span>
</code></pre></div></div>
<p>或为相机设置<code class="language-plaintext highlighter-rouge">Skybox</code>组件并赋值</p>

<h3 id="skybox与lighting的关系">Skybox与Lighting的关系</h3>
<p>Skybox不只是视觉上的背景，它还影响了：</p>
<ul>
  <li>Ambient Lighting（环境光）</li>
  <li>Reflection Probe（反射探针）</li>
  <li>全局光照（GI）计算</li>
</ul>

<p>所以换Skybox后记得：</p>
<ul>
  <li>在Lighting界面点击“Generate Lighting”</li>
  <li>使用Reflection Probe重新采样环境反射</li>
</ul>]]></content><author><name>ljf12825</name></author><category term="笔记" /><category term="Unity" /><category term="Unity Component" /><category term="Light" /><category term="Render" /><category term="Graphics" /><summary type="html"><![CDATA[Skybox是一种渲染技术，用于在3D场景中创建远景背景，例如天空、宇宙、城市天际线等 它本质上是一种把纹理图贴在一个立方体（或球体）内侧的技巧，玩家看不到边界，只能看到包裹在四周的“天空”]]></summary></entry><entry><title type="html">Behaviour Tree</title><link href="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Behaviour-Tree.html" rel="alternate" type="text/html" title="Behaviour Tree" /><published>2025-06-01T00:00:00+08:00</published><updated>2025-06-01T00:00:00+08:00</updated><id>http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Behaviour-Tree</id><content type="html" xml:base="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Behaviour-Tree.html"><![CDATA[]]></content><author><name>ljf12825</name></author><category term="笔记" /><category term="Unity" /><category term="Unity System" /><category term="AI" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Unity Performance Tuning</title><link href="http://localhost:4000/posts/2025-06-13-Unity-Performance-Tuning/" rel="alternate" type="text/html" title="Unity Performance Tuning" /><published>2025-06-01T00:00:00+08:00</published><updated>2025-06-01T00:00:00+08:00</updated><id>http://localhost:4000/posts/Unity-Performance-Tuning</id><content type="html" xml:base="http://localhost:4000/posts/2025-06-13-Unity-Performance-Tuning/"><![CDATA[]]></content><author><name>ljf12825</name></author><category term="笔记" /><category term="Unity" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Unity NetWork</title><link href="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Unity-NetWork.html" rel="alternate" type="text/html" title="Unity NetWork" /><published>2025-06-01T00:00:00+08:00</published><updated>2025-06-01T00:00:00+08:00</updated><id>http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Unity-NetWork</id><content type="html" xml:base="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Unity-NetWork.html"><![CDATA[]]></content><author><name>ljf12825</name></author><category term="笔记" /><category term="Unity" /><category term="Unity NetWork" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Unity Profiler</title><link href="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Unity-Profiler.html" rel="alternate" type="text/html" title="Unity Profiler" /><published>2025-06-01T00:00:00+08:00</published><updated>2025-06-01T00:00:00+08:00</updated><id>http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Unity-Profiler</id><content type="html" xml:base="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Unity-Profiler.html"><![CDATA[]]></content><author><name>ljf12825</name></author><category term="笔记" /><category term="Unity" /><category term="Unity Tool" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">TileMap</title><link href="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/TileMap.html" rel="alternate" type="text/html" title="TileMap" /><published>2025-06-01T00:00:00+08:00</published><updated>2025-06-01T00:00:00+08:00</updated><id>http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/TileMap</id><content type="html" xml:base="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/TileMap.html"><![CDATA[]]></content><author><name>ljf12825</name></author><category term="笔记" /><category term="Unity" /><category term="Unity System" /><category term="Unity Component" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Import Assets</title><link href="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Import-Assets.html" rel="alternate" type="text/html" title="Import Assets" /><published>2025-06-01T00:00:00+08:00</published><updated>2025-06-01T00:00:00+08:00</updated><id>http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Import-Assets</id><content type="html" xml:base="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Import-Assets.html"><![CDATA[<p>Unity支持多种格式的资源文件，并能自动识别并进行初步处理</p>

<h2 id="资源导入基本流程">资源导入基本流程</h2>
<p><strong>1.将资源文件拖入<code class="language-plaintext highlighter-rouge">Assets</code>目录中（Unity会自动导入）</strong><br />
<strong>2.在Inspector面板中查看导入设置</strong><br />
<strong>3.配置相关参数，比如压缩方式、贴图类型、是否生成碰撞体等</strong><br />
<strong>4.使用资源（拖到场景、作为材质贴图、挂到AudioSource等）</strong></p>

<h2 id="模型">模型</h2>

<h3 id="支持格式">支持格式</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">.fbx</code>推荐</li>
  <li><code class="language-plaintext highlighter-rouge">.obj</code></li>
  <li><code class="language-plaintext highlighter-rouge">.dae</code>（Collada）</li>
  <li><code class="language-plaintext highlighter-rouge">.blend</code>（需要Blender）</li>
</ul>

<h3 id="导入流程">导入流程</h3>
<p>1.拖拽<code class="language-plaintext highlighter-rouge">.fbx</code>文件到<code class="language-plaintext highlighter-rouge">Assets</code>文件夹<br />
2.选中模型文件，查看<code class="language-plaintext highlighter-rouge">Inspector</code>的导入设置</p>
<ul>
  <li>Scale Factor：缩放（一般保持默认）</li>
  <li>Import Animations：是否导入动画</li>
  <li>Import Materials：是否导入材质</li>
  <li>Generate Colliders：是否自动生成碰撞体</li>
</ul>

<h3 id="导入后组成">导入后组成</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Model</code>: 3D网格</li>
  <li><code class="language-plaintext highlighter-rouge">Rig</code>（如果有骨骼）：用于动画绑定</li>
  <li><code class="language-plaintext highlighter-rouge">Animation</code>：包含的动画片段</li>
  <li><code class="language-plaintext highlighter-rouge">Materials</code>：自动生成或关联的材质</li>
</ul>

<h2 id="贴图">贴图</h2>

<h3 id="支持格式-1">支持格式</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">.png</code>、<code class="language-plaintext highlighter-rouge">.jpg</code>、<code class="language-plaintext highlighter-rouge">.tga</code>、<code class="language-plaintext highlighter-rouge">.psd</code>（支持图层）等</li>
</ul>

<h3 id="导入流程-1">导入流程</h3>

<p>1.拖入图片文件
2.在Inspector中设置：</p>
<ul>
  <li>sRGB（Color Texture）：颜色贴图用，法线贴图需取消勾选</li>
  <li>Alpha Is Transparency：如果使用透明通道</li>
  <li>Wrap Mode：Repeat（平铺）或Clamp（拉伸）</li>
  <li>Filter Mode：Bilinear、Trilinear、Point（像素风）</li>
  <li>Compression：高压缩（小体积）还是高质量（清晰）</li>
  <li>Texture Type:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">Default</code>（通用）</li>
      <li><code class="language-plaintext highlighter-rouge">Sprite</code>（用于UI）</li>
      <li><code class="language-plaintext highlighter-rouge">Normal map</code>（法线贴图）</li>
      <li><code class="language-plaintext highlighter-rouge">Lightmap</code>（光照图）</li>
    </ul>
  </li>
</ul>

<h2 id="音频">音频</h2>

<h3 id="支持格式-2">支持格式</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">.mp3</code>（压缩）</li>
  <li><code class="language-plaintext highlighter-rouge">.wav</code>（无损）</li>
  <li><code class="language-plaintext highlighter-rouge">.ogg</code>（高效）</li>
  <li><code class="language-plaintext highlighter-rouge">.aiff</code></li>
</ul>

<h2 id="导入流程-2">导入流程</h2>

<p>1.拖入音频文件<br />
2.在<code class="language-plaintext highlighter-rouge">Inspector</code>中设置：</p>
<ul>
  <li>Load Type：
    <ul>
      <li><code class="language-plaintext highlighter-rouge">Decompress On Load</code>（加载时解压，适合短音效）</li>
      <li><code class="language-plaintext highlighter-rouge">Streaming</code>（边播放边加载，适合背景音乐）</li>
    </ul>
  </li>
  <li>Compression Format:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">Vorbis</code>、<code class="language-plaintext highlighter-rouge">ADPCM</code>、<code class="language-plaintext highlighter-rouge">PCM</code></li>
    </ul>
  </li>
  <li>3D Sound：是否启用3D空间化</li>
  <li>Loop：是否循环播放</li>
</ul>

<blockquote>
  <p><strong>资源组织建议：</strong> 使用好的文件夹结构和命名习惯，可以极大提高开发效率</p>
</blockquote>]]></content><author><name>ljf12825</name></author><category term="笔记" /><category term="Unity" /><summary type="html"><![CDATA[Unity支持多种格式的资源文件，并能自动识别并进行初步处理]]></summary></entry><entry><title type="html">Layer</title><link href="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Layer.html" rel="alternate" type="text/html" title="Layer" /><published>2025-06-01T00:00:00+08:00</published><updated>2025-06-01T00:00:00+08:00</updated><id>http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Layer</id><content type="html" xml:base="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Layer.html"><![CDATA[<p>在Unity中，Layer是要给非常重要的系统<br />
它主要用于：</p>
<ul>
  <li>控制物体的渲染与相机的可见性</li>
  <li>控制物理碰撞（配合Layer Collision Matrix）</li>
  <li>通过脚本进行物体分类和筛选</li>
</ul>

<h2 id="什么是layer">什么是Layer</h2>

<p>Layer是给GameObject打的“标签”，但它和<code class="language-plaintext highlighter-rouge">Tag</code>不一样，Layer是用于功能性控制的，特别在：</p>
<ul>
  <li>摄像机的Culling Mask</li>
  <li>光照影响（Light Culling）</li>
  <li>物理碰撞（Physics Layer）</li>
  <li>射线检测（Raycast Layer）</li>
</ul>

<h2 id="layer的使用场景">Layer的使用场景</h2>
<h3 id="1摄像机视野控制culling-mask">1.摄像机视野控制（Culling Mask）</h3>
<p>在Camera组件中，你可以设置</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Culling Mask -&gt; 选择哪些Layer可以被该相机看到
</code></pre></div></div>

<p><strong>用途：</strong></p>
<ul>
  <li>UI相机只看UI层</li>
  <li>小地图相机只看敌人层</li>
  <li>分屏镜头每个只看自己的部分</li>
</ul>

<h3 id="2物理碰撞控制layer-collision-matrix">2.物理碰撞控制（Layer Collision Matrix）</h3>
<p>在菜单中：</p>

<div class="language-nginx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">Edit</span> <span class="s">-&gt;</span> <span class="s">Project</span> <span class="s">Settings</span> <span class="s">-&gt;</span> <span class="s">Physics</span>
</code></pre></div></div>

<p>你可以看到Layer Collision Matrix，它控制：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>哪些Layer和哪些Layer能发生物理碰撞
</code></pre></div></div>

<p><strong>用途：</strong></p>
<ul>
  <li>玩家层与敌人层可以碰撞，但不和自身碰撞</li>
  <li>子弹不撞自己</li>
  <li>角色不被UI的Collider打断</li>
</ul>

<h3 id="3射线检测">3.射线检测</h3>
<p>可以通过Layer来控制射线是否命中某个对象</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">layerMask</span> <span class="p">=</span> <span class="m">1</span> <span class="p">&lt;&lt;</span> <span class="n">LayerMask</span><span class="p">.</span><span class="nf">NameToLayer</span><span class="p">(</span><span class="s">"Enemy"</span><span class="p">);</span>
<span class="k">if</span> <span class="p">(</span><span class="n">Physics</span><span class="p">.</span><span class="nf">Raycast</span><span class="p">(</span><span class="n">ray</span><span class="p">,</span> <span class="k">out</span> <span class="n">hit</span><span class="p">,</span> <span class="m">100f</span><span class="p">,</span> <span class="n">layerMask</span><span class="p">))</span> <span class="n">Debug</span><span class="p">.</span><span class="nf">Log</span><span class="p">(</span><span class="s">"Hit enemy"</span><span class="p">);</span>
</code></pre></div></div>

<p>也可以多层合并：</p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">mask</span> <span class="p">=</span> <span class="p">(</span><span class="m">1</span> <span class="p">&lt;&lt;</span> <span class="n">LayerMask</span><span class="p">.</span><span class="nf">NameToLayer</span><span class="p">(</span><span class="s">"Enemy"</span><span class="p">))</span> <span class="p">|</span> <span class="p">(</span><span class="m">1</span> <span class="p">&lt;&lt;</span> <span class="n">LayerMask</span><span class="p">.</span><span class="nf">NameToLayer</span><span class="p">(</span><span class="s">"NPC"</span><span class="p">));</span>
</code></pre></div></div>
<h2 id="内置与自定义layer">内置与自定义Layer</h2>

<h3 id="内置layerunity默认的">内置Layer（Unity默认的）</h3>

<table>
  <thead>
    <tr>
      <th>编号</th>
      <th>名称</th>
      <th>说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>Default</td>
      <td>默认层</td>
    </tr>
    <tr>
      <td>4</td>
      <td>Water</td>
      <td>水体特效</td>
    </tr>
    <tr>
      <td>5</td>
      <td>UI</td>
      <td>UI 专用</td>
    </tr>
  </tbody>
</table>

<h3 id="自定义layer">自定义Layer</h3>
<p>Unity允许你最多使用32个Layer（编号 0~31），其中前几个是保留的<br />
自定义方式：</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">选中</span> <span class="n">GameObject</span> <span class="o">-&gt;</span> <span class="n">Inspector</span> <span class="o">-&gt;</span> <span class="n">Layer</span> <span class="o">-&gt;</span> <span class="k">Add</span> <span class="n">Layer</span><span class="p">...</span>
</code></pre></div></div>
<p>添加后可为GameObject设置：</p>
<div class="language-nginx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">Layer</span> <span class="s">-&gt;</span> <span class="s">你刚添加的层名</span>
</code></pre></div></div>
<h2 id="layer与tag的区别">Layer与Tag的区别</h2>

<table>
  <thead>
    <tr>
      <th>特性</th>
      <th>Layer</th>
      <th>Tag</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>数量限制</td>
      <td>最多 32 个</td>
      <td>无限制</td>
    </tr>
    <tr>
      <td>用于渲染控制</td>
      <td>✅</td>
      <td>❌</td>
    </tr>
    <tr>
      <td>用于物理控制</td>
      <td>✅</td>
      <td>❌</td>
    </tr>
    <tr>
      <td>用于分类查找</td>
      <td>有限制（用 LayerMask）</td>
      <td>✅（用 CompareTag 等）</td>
    </tr>
    <tr>
      <td>性能优化</td>
      <td>✅（用于剔除、射线过滤）</td>
      <td>❌</td>
    </tr>
  </tbody>
</table>

<h3 id="建议">建议</h3>
<ul>
  <li>给每种功能的对象分配专属Layer</li>
  <li>摄像机、光源、UI、Trigger检测都应依赖Layer控制逻辑</li>
</ul>]]></content><author><name>ljf12825</name></author><category term="笔记" /><category term="Unity" /><category term="Unity System" /><summary type="html"><![CDATA[在Unity中，Layer是要给非常重要的系统 它主要用于： 控制物体的渲染与相机的可见性 控制物理碰撞（配合Layer Collision Matrix） 通过脚本进行物体分类和筛选]]></summary></entry></feed>