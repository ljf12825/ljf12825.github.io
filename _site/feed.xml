<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-06-15T22:59:10+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">ljf12825’s Blog</title><subtitle>Efficient &amp; Elegant</subtitle><author><name>Jeff Lee</name><email>2548278761@qq.com</email></author><entry><title type="html">Behaviour Tree</title><link href="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Behaviour-Tree.html" rel="alternate" type="text/html" title="Behaviour Tree" /><published>2025-06-01T00:00:00+08:00</published><updated>2025-06-01T00:00:00+08:00</updated><id>http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Behaviour-Tree</id><content type="html" xml:base="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Behaviour-Tree.html"><![CDATA[]]></content><author><name>ljf12825</name></author><category term="笔记" /><category term="Unity" /><category term="Unity System" /><category term="AI" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Unity Build-in Types</title><link href="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Unity-Build-in-Types.html" rel="alternate" type="text/html" title="Unity Build-in Types" /><published>2025-06-01T00:00:00+08:00</published><updated>2025-06-01T00:00:00+08:00</updated><id>http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Unity-Build-in-Types</id><content type="html" xml:base="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Unity-Build-in-Types.html"><![CDATA[<p>Unity内建类型</p>

<h2 id="常见unity内建类型按用途分">常见Unity内建类型（按用途分）</h2>
<h3 id="1空间几何类型transform相关">1.空间/几何类型（Transform相关）</h3>

<table>
  <thead>
    <tr>
      <th>类型</th>
      <th>说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Vector2</code>, <code class="language-plaintext highlighter-rouge">Vector3</code>, <code class="language-plaintext highlighter-rouge">Vector4</code></td>
      <td>表示二维/三维/四维向量</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Quaternion</code></td>
      <td>四元数，表示旋转</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Matrix4x4</code></td>
      <td>4×4 矩阵，常用于转换</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Bounds</code></td>
      <td>包围盒（中心+尺寸）</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Ray</code>, <code class="language-plaintext highlighter-rouge">RaycastHit</code></td>
      <td>射线检测相关类型</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Plane</code></td>
      <td>表示一个无限平面</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Rect</code></td>
      <td>二维矩形区域</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Color</code>, <code class="language-plaintext highlighter-rouge">Color32</code></td>
      <td>表示颜色（线性空间和 sRGB）</td>
    </tr>
  </tbody>
</table>

<h4 id="vector2--vector3--vector4"><strong>Vector2 &amp; Vector3 &amp; Vector4</strong></h4>
<p>它们是Unity提供的三个核心向量类型，广泛用于位置、方向、速度、缩放、颜色等各种场景</p>

<h5 id="基本定义">基本定义</h5>

<table>
  <thead>
    <tr>
      <th>向量类型</th>
      <th>维度</th>
      <th>作用</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Vector2</code></td>
      <td>2D 向量，包含 <code class="language-plaintext highlighter-rouge">x</code>, <code class="language-plaintext highlighter-rouge">y</code></td>
      <td>用于 2D 空间中的位置、速度等</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Vector3</code></td>
      <td>3D 向量，包含 <code class="language-plaintext highlighter-rouge">x</code>, <code class="language-plaintext highlighter-rouge">y</code>, <code class="language-plaintext highlighter-rouge">z</code></td>
      <td>用于 3D 空间中的大多数情况</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Vector4</code></td>
      <td>4D 向量，包含 <code class="language-plaintext highlighter-rouge">x</code>, <code class="language-plaintext highlighter-rouge">y</code>, <code class="language-plaintext highlighter-rouge">z</code>, <code class="language-plaintext highlighter-rouge">w</code></td>
      <td>用于更高级的计算，如齐次坐标、shader 编程</td>
    </tr>
  </tbody>
</table>

<p><strong>Vector2（二维向量）</strong></p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Vector2</span> <span class="n">position</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Vector2</span><span class="p">(</span><span class="m">1.5f</span><span class="p">,</span> <span class="m">3.0f</span><span class="p">);</span>
</code></pre></div></div>
<p>常见用途：</p>
<ul>
  <li>2D游戏中的对象位置、速度、加速度等</li>
  <li>屏幕空间坐标（如UI坐标）</li>
  <li>纹理坐标（UV mapping）</li>
</ul>

<p><strong>Vector3（三维向量）</strong></p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Vector3</span> <span class="n">direction</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Vector3</span><span class="p">(</span><span class="m">0f</span><span class="p">,</span> <span class="m">1f</span><span class="p">,</span> <span class="m">0f</span><span class="p">);</span> <span class="c1">//向上</span>
<span class="n">transform</span><span class="p">.</span><span class="n">position</span> <span class="p">+=</span> <span class="n">direction</span> <span class="p">*</span> <span class="n">Time</span><span class="p">.</span><span class="n">deltaTime</span><span class="p">;</span>
</code></pre></div></div>
<p>常见用途：</p>
<ul>
  <li>3D对象的位置、方向、缩放</li>
  <li>物理运动（速度、加速度）</li>
  <li>相机方向、光照方向</li>
</ul>

<p><strong>Vector3常用静态变量</strong></p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Vector3</span><span class="p">.</span><span class="n">zero</span>      <span class="c1">// (0, 0, 0)</span>
<span class="n">Vector3</span><span class="p">.</span><span class="n">one</span>       <span class="c1">// (1, 1, 1)</span>
<span class="n">Vector3</span><span class="p">.</span><span class="n">up</span>        <span class="c1">// (0, 1, 0)</span>
<span class="n">Vector3</span><span class="p">.</span><span class="n">down</span>      <span class="c1">// (0, -1, 0)</span>
<span class="n">Vector3</span><span class="p">.</span><span class="n">left</span>      <span class="c1">// (-1, 0, 0)</span>
<span class="n">Vector3</span><span class="p">.</span><span class="n">right</span>     <span class="c1">// (1, 0, 0)</span>
<span class="n">Vector3</span><span class="p">.</span><span class="n">forward</span>   <span class="c1">// (0, 0, 1)</span>
<span class="n">Vector3</span><span class="p">.</span><span class="n">back</span>      <span class="c1">// (0, 0, -1)</span>
</code></pre></div></div>

<p><strong>Vector3静态方法</strong></p>

<table>
  <thead>
    <tr>
      <th>Method</th>
      <th>Description</th>
      <th>Declaration</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Angel</td>
      <td>求两向量夹角</td>
      <td>public static float Angle(Vector3 from, Vector3 to);</td>
    </tr>
    <tr>
      <td>ClampMagnitude</td>
      <td>限制一个向量的长度，防止它超过maxLength，如果vector的长度小于等于maxLength返回原向量，否则返回一个等于maxLength的同向向量</td>
      <td>public static Vector3 ClampMagnitude(Vector3 vector, float maxLength);</td>
    </tr>
    <tr>
      <td>Cross</td>
      <td>求叉积</td>
      <td>public static Vector3 Cross(Vector3 lhs, Vector3 rhs);</td>
    </tr>
    <tr>
      <td>Distance</td>
      <td>求三维空间中两点的距离</td>
      <td>public static float Distance(Vector3 point1, Vector3 point2);</td>
    </tr>
    <tr>
      <td>Dot</td>
      <td>求点乘</td>
      <td>public static float Dot(Vector3 lhs, Vector3 rhs);</td>
    </tr>
    <tr>
      <td>Lerp</td>
      <td>求线插（不允许外推）,  t -&gt; [0, 1]</td>
      <td>public static Vector3 Lerp(Vector3 a, Vector3 b, float t);</td>
    </tr>
    <tr>
      <td>LerpUnclamped</td>
      <td>求线插（允许外推，产生超调）</td>
      <td>public static Vector3 LerpUnclamped(Vector3 a, Vector3 b, float t);</td>
    </tr>
    <tr>
      <td>Max</td>
      <td>返回两个向量所能组成的最大向量</td>
      <td>public static Vector3 Max(Vector3 lhs, Vector3 rhs);</td>
    </tr>
    <tr>
      <td>Min</td>
      <td>返回最小</td>
      <td>同上</td>
    </tr>
    <tr>
      <td>MoveTowards</td>
      <td>以恒定速度向目标位置靠近，直到到达</td>
      <td>public static Vector3 MoveTowards(Vector3 current, Vector3 target, float maxDistanceDelta);</td>
    </tr>
    <tr>
      <td>Normalize</td>
      <td>归一化</td>
      <td>public void Normalize();</td>
    </tr>
    <tr>
      <td>OrthoNormalize</td>
      <td>正交归一化</td>
      <td>public static void OrthoNormalize(ref Vector3 normal, ref Vector3 tangent);  public static void OrthoNormalize(ref Vector3 normal, ref Vector3 tangent, ref Vector3 binormal);</td>
    </tr>
    <tr>
      <td>Project</td>
      <td>投影到onNormal</td>
      <td>public static Vector3 Project(Vector3 vector, Vector3 onNormal);</td>
    </tr>
    <tr>
      <td>ProjectOnPlane</td>
      <td>投影到planeNormal</td>
      <td>public static Vector3 ProjectOnPlane(Vector3 vector, Vector3 planeNormal);</td>
    </tr>
    <tr>
      <td>Reflect</td>
      <td>反射线，inNormal是法线</td>
      <td>public static Vector3 Reflect(Vector3 inDirection, Vector3  inNormal);</td>
    </tr>
    <tr>
      <td>RotateTowards</td>
      <td>逐步旋转一个方向向量朝向另一个方向向量，maxRadiansDelta是每次最大允许旋转的角度（弧度），maxMagnitudeDelta是每次允许变化的向量长度</td>
      <td>public static Vector3 RotateTowards(Vector3 current, Vector3 target, float maxRadiansDelta, float maxMagnitudeDelta);</td>
    </tr>
    <tr>
      <td>Scale</td>
      <td>两个向量分量相乘组成新向量</td>
      <td>public static Vector3 Scale(Vector3 a, Vector3 b);</td>
    </tr>
    <tr>
      <td>SignedAngle</td>
      <td>求带符号夹角，axis是用于确定旋转方向的轴，正值是绕着axis左旋，负值是右旋</td>
      <td>public static float SignedAngle(Vector3 from, Vector3 to, Vector3 axis);</td>
    </tr>
    <tr>
      <td>Slerp</td>
      <td>球面插值，球面为a，b点所在大圆所在的球的球面，插值在a，b点所在的圆上取</td>
      <td>public static Vector3 Slerp(Vector3 a, Vector3 b, float t);</td>
    </tr>
    <tr>
      <td>SlerpUnclamped</td>
      <td>球面插值（允许外推，产生超调）</td>
      <td>public static Vector3 SlerpUnclamped(Vector3 a, Vector3 b, float t);</td>
    </tr>
    <tr>
      <td>SmoothDamp</td>
      <td>平滑插值； ref currentVelocity当前速度向量；smoothTime到达目标值所需的预期时间，越小越快越敏感；maxSpeed最大速度（可选）；deltaTime每帧间隔时间（可选）</td>
      <td>public static Vector3 SmoothDamp(Vector3 current, Vector3 target, ref Vector3 currentVelocity, float smoothTime, float maxSpeed = Mathf.Infinity, float deltaTime = Time.deltaTime);</td>
    </tr>
  </tbody>
</table>

<p><a href="https://docs.unity3d.com/ScriptReference/Vector3.html">Unity官方文档（Vector3）</a></p>

<p><strong>Vector4（四维向量）</strong></p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Vector4</span> <span class="n">v</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Vector4</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span> <span class="m">4</span><span class="p">);</span>
</code></pre></div></div>
<p>常见用途：</p>
<ul>
  <li>齐次坐标（矩阵变换常用）</li>
  <li>传递颜色（Color在底层可能是Vector4(r,g,b,a)）</li>
  <li>shader开发中用于高级数学运算（如平面方程、切线空间等）</li>
</ul>

<h4 id="quaternion--euler-angles">Quaternion &amp; Euler Angles</h4>
<p>在Unity中，Quaternion是用来表示旋转的核心数学结构，它避免了Euler Angles的万向节死锁问题，并且适用于平滑插值和复杂3D计算</p>

<h5 id="quaternion">Quaternion</h5>
<p>Quaternion表示绕某一条单位轴旋转一个角度的这个过程，简单来说：表示一个旋转</p>

<p><strong>数学本质</strong>
四元数是一种复数扩展：</p>
<div class="language-ini highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">Q</span> <span class="p">=</span> <span class="s">w + xi + yj + zk</span>
</code></pre></div></div>
<p>在Unity中被表示为：</p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">struct</span> <span class="nc">Quaternion</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="kt">float</span> <span class="n">x</span><span class="p">;</span>
    <span class="k">public</span> <span class="kt">float</span> <span class="n">y</span><span class="p">;</span>
    <span class="k">public</span> <span class="kt">float</span> <span class="n">z</span><span class="p">;</span>
    <span class="k">public</span> <span class="kt">float</span> <span class="n">w</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">x, y, z</code>表示旋转轴的向量部分（方向）<br />
<code class="language-plaintext highlighter-rouge">w</code>表示旋转的角度部分(cos(θ/2))</p>

<p>四元数不是角度 + 轴直接拼成的，是通过以下方式构造：</p>
<div class="language-ini highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">x</span><span class="p">=</span><span class="s">axis.x⋅sin(θ/2)</span>
<span class="py">y</span><span class="p">=</span><span class="s">axis.y⋅sin(θ/2)</span>
<span class="py">z</span><span class="p">=</span><span class="s">axis.z⋅sin(θ/2)</span>
<span class="py">w</span><span class="p">=</span><span class="s">cos(θ/2)</span>
</code></pre></div></div>
<p>其中<code class="language-plaintext highlighter-rouge">axis</code>是归一化的旋转轴向量<br />
<code class="language-plaintext highlighter-rouge">θ</code>是旋转角度（弧度）</p>

<p>你可以把四元数想象成一个旋转操作，它编码了两个信息：</p>
<ul>
  <li>1.绕哪个轴旋转</li>
  <li>2.旋转多少角度</li>
</ul>

<p><strong>Quaternion用途</strong></p>

<table>
  <thead>
    <tr>
      <th>用途场景</th>
      <th>描述</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>表示物体旋转</td>
      <td>替代 <code class="language-plaintext highlighter-rouge">transform.rotation = new Vector3(...)</code>，更稳定</td>
    </tr>
    <tr>
      <td>做平滑旋转（Slerp/Lerp）</td>
      <td>保持插值平滑、不跳跃、不变形</td>
    </tr>
    <tr>
      <td>实现摄像机跟随</td>
      <td>平滑跟随目标的朝向</td>
    </tr>
    <tr>
      <td>构建旋转动画</td>
      <td>可结合 Timeline、Animator 使用</td>
    </tr>
    <tr>
      <td>控制角色面向</td>
      <td>看向目标、追踪方向等</td>
    </tr>
  </tbody>
</table>

<p><strong>Quaternion API</strong></p>

<table>
  <thead>
    <tr>
      <th>方法/属性</th>
      <th>说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Quaternion.identity</code></td>
      <td>零旋转（即不旋转）</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Quaternion.Euler(x, y, z)</code></td>
      <td>从欧拉角创建旋转</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Quaternion.LookRotation(dir)</code></td>
      <td>让对象朝向某个方向</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Quaternion.Angle(a, b)</code></td>
      <td>计算两个旋转之间的角度</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Quaternion.AngleAxis(float angle, Vector3 axis)</code></td>
      <td>围绕axis旋转angle度</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Quaternion.Slerp(a, b, t)</code></td>
      <td>在两个旋转之间平滑插值（匀速）</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Quaternion.Lerp(a, b, t)</code></td>
      <td>线性插值旋转（不推荐用于大角度）</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Quaternion.RotateTowards(a, b, maxDegreesDelta)</code></td>
      <td>限制最大旋转角度的平滑旋转</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">* 运算符</code>（例如 <code class="language-plaintext highlighter-rouge">rot * vector</code>）</td>
      <td>将旋转应用于向量，旋转该方向向量</td>
    </tr>
  </tbody>
</table>

<p><strong>构建方式</strong></p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Quaternion</span> <span class="n">q</span> <span class="p">=</span> <span class="n">Quaternion</span><span class="p">.</span><span class="nf">AngleAxis</span><span class="p">(</span><span class="m">90</span><span class="p">,</span> <span class="n">Vector3</span><span class="p">.</span><span class="n">up</span><span class="p">);</span> <span class="c1">//绕Y轴旋转90°</span>
</code></pre></div></div>
<p>使用欧拉角构建：</p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Quaternion</span> <span class="n">q</span> <span class="p">=</span> <span class="n">Quaternion</span><span class="p">.</span><span class="nf">Euler</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">90</span><span class="p">,</span> <span class="m">0</span><span class="p">);</span> <span class="c1">//XYZ分别是绕X Y Z轴的角度</span>
</code></pre></div></div>
<h5 id="euler-angles">Euler Angles</h5>

<p><strong>欧拉角的定义</strong><br />
欧拉角是用三个角度来描述3D空间中的一个旋转变换，每个角度表示围绕一个坐标轴的旋转量。<br />
在Unity中，欧拉角就是一个<code class="language-plaintext highlighter-rouge">Vector3</code></p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">transform</span><span class="p">.</span><span class="n">eulerAngles</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Vector3</span><span class="p">(</span><span class="m">30</span><span class="p">,</span> <span class="m">45</span><span class="p">,</span> <span class="m">0</span><span class="p">);</span>
</code></pre></div></div>
<p>这表示：</p>
<ul>
  <li>绕X轴旋转30°</li>
  <li>然后绕Y轴旋转45°</li>
  <li>然后绕Z轴旋转0°
    <blockquote>
      <p>欧拉角的本质是「分轴顺序旋转」，三个角度 + 一个旋转顺序（X -&gt; Y -&gt; Z），顺序不能出现问题，否则结果不同</p>
    </blockquote>
  </li>
</ul>

<p><strong>欧拉角的特点</strong></p>

<table>
  <thead>
    <tr>
      <th>特点</th>
      <th>描述</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>直观</td>
      <td>直接写角度，容易理解和调试</td>
    </tr>
    <tr>
      <td>顺序敏感</td>
      <td>顺序不同，结果不同（ZYX ≠ XYZ）</td>
    </tr>
    <tr>
      <td>有死锁</td>
      <td>当某个轴旋转到特定位置时，另一个轴“失效”——<strong>万向节死锁（Gimbal Lock）</strong></td>
    </tr>
    <tr>
      <td>插值难</td>
      <td>在两个角度之间插值时可能会突然“跳动”或绕远路</td>
    </tr>
  </tbody>
</table>

<p><strong>欧拉角适用于：</strong></p>
<ul>
  <li>手动设置角度</li>
  <li>UI显示</li>
  <li>编辑器中拖拽角度时</li>
  <li>简单旋转动画、摄像机控制</li>
</ul>

<p><strong>实际旋转逻辑中，建议使用Quaternion</strong></p>

<p><strong>Euler Angels和Quaternion的关系</strong><br />
Unity内部几乎不直接用欧拉角进行旋转运算，它会自动把你设置的欧拉角转换为四元数</p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">transform</span><span class="p">.</span><span class="n">eulerAngles</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Vector3</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">90</span><span class="p">,</span> <span class="m">0</span><span class="p">);</span>
<span class="c1">// 实际上自动转换为：</span>
<span class="n">transform</span><span class="p">.</span><span class="n">rotation</span> <span class="p">=</span> <span class="n">Quaternion</span><span class="p">.</span><span class="nf">Euler</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">90</span><span class="p">,</span> <span class="m">0</span><span class="p">);</span>
</code></pre></div></div>

<p><strong>欧拉角插值出现的问题</strong></p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Vector3</span> <span class="k">from</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Vector3</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">);</span>
<span class="n">Vector3</span> <span class="n">to</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Vector3</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">360</span><span class="p">,</span> <span class="m">0</span><span class="p">);</span>

<span class="n">Vector3</span> <span class="n">result</span> <span class="p">=</span> <span class="n">Vector3</span><span class="p">.</span><span class="nf">Lerp</span><span class="p">(</span><span class="k">from</span><span class="p">,</span> <span class="n">to</span><span class="p">,</span> <span class="m">0.5f</span><span class="p">);</span> <span class="c1">//会插值到180°</span>
</code></pre></div></div>
<p>实际上，从0°到360°最短路径时0°，这就是欧拉角插值跳变的问题<br />
使用四元数可以避免</p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Quaternion</span> <span class="n">q1</span> <span class="p">=</span> <span class="n">Quaternion</span><span class="p">.</span><span class="nf">Euler</span><span class="p">(</span><span class="k">from</span><span class="p">);</span>
<span class="n">Quaternion</span> <span class="n">q2</span> <span class="p">=</span> <span class="n">Quaternion</span><span class="p">.</span><span class="nf">Euler</span><span class="p">(</span><span class="n">to</span><span class="p">);</span>

<span class="n">Quaternion</span> <span class="n">qResult</span> <span class="p">=</span> <span class="n">Quaternion</span><span class="p">.</span><span class="nf">Slerp</span><span class="p">(</span><span class="n">q1</span><span class="p">,</span> <span class="n">q2</span><span class="p">,</span> <span class="m">0.5f</span><span class="p">);</span>
</code></pre></div></div>

<p><strong>Euler Angles和Quaternion的转换</strong><br />
欧拉角 -&gt; 四元数</p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Quaternion</span> <span class="n">q</span> <span class="p">=</span> <span class="n">Quaternion</span><span class="p">.</span><span class="nf">Euler</span><span class="p">(</span><span class="m">30</span><span class="p">,</span> <span class="m">45</span><span class="p">,</span> <span class="m">60</span><span class="p">);</span>
</code></pre></div></div>
<p>四元数 -&gt; 欧拉角</p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Vector3</span> <span class="n">euler</span> <span class="p">=</span> <span class="n">q</span><span class="p">.</span><span class="n">eulerAngles</span><span class="p">;</span>
</code></pre></div></div>
<blockquote>
  <p>四元数本身不会存储旋转顺序和原始角度，这个反转换可能会出现不寻常的角度，比如-180°、350°等</p>
</blockquote>

<p>欧拉角和四元数的关系：三次独立的XYZ轴旋转（Euler Angle）相当于对于某个特定轴旋转特定角度（Quaternion）<br />
<strong>深入原理</strong>
给定欧拉角 (𝛼, 𝛽, 𝛾)，表示绕 X、Y、Z 旋转，四元数变换公式如下（XYZ顺序）：</p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Quaternion</span> <span class="n">q</span> <span class="p">=</span> <span class="n">Quaternion</span><span class="p">.</span><span class="nf">Euler</span><span class="p">(</span><span class="n">alpha</span><span class="p">,</span> <span class="n">beta</span><span class="p">,</span> <span class="n">gamma</span><span class="p">);</span>
</code></pre></div></div>
<p>等价于</p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Quaternion</span> <span class="n">qx</span> <span class="p">=</span> <span class="n">Quaternion</span><span class="p">.</span><span class="nf">AngleAxis</span><span class="p">(</span><span class="n">alpha</span><span class="p">,</span> <span class="n">Vector3</span><span class="p">.</span><span class="n">right</span><span class="p">);</span>
<span class="n">Quaternion</span> <span class="n">qy</span> <span class="p">=</span> <span class="n">Quaternion</span><span class="p">.</span><span class="nf">AngleAxis</span><span class="p">(</span><span class="n">beta</span><span class="p">,</span> <span class="n">Vector3</span><span class="p">.</span><span class="n">up</span><span class="p">);</span>
<span class="n">Quaternion</span> <span class="n">qz</span> <span class="p">=</span> <span class="n">Quaternion</span><span class="p">.</span><span class="nf">AngleAxis</span><span class="p">(</span><span class="n">gamma</span><span class="p">,</span> <span class="n">Vector3</span><span class="p">.</span><span class="n">forward</span><span class="p">);</span>
<span class="n">Quaternion</span> <span class="n">q</span> <span class="p">=</span> <span class="n">qy</span> <span class="p">*</span> <span class="n">qx</span> <span class="p">*</span> <span class="n">qz</span><span class="p">;</span> <span class="c1">//组合旋转，顺序重要；Unity为左乘</span>
</code></pre></div></div>

<p><strong>万向节死锁（Gimbal Lock）</strong><br />
Gimbal Lock是指使用欧拉角进行三维旋转时，当两个旋转轴重合，导致自由度从3变成2，某个方向的旋转无法表达的情况<br />
产生Gimbal Lock的核心原因是欧拉角的特性:<br />
一组欧拉角描述一个旋转过程：即，围绕每个轴的旋转角度和围绕每个轴旋转的顺序，顺序很重要，不同的顺序会带来不同的结果
Gimbal Lock产生的核心是：先执行旋转的轴会带动后执行旋转的轴转动，即产生新轴；但后执行旋转的轴不会带动先执行旋转的轴转动，即一个轴旋转过后就不会出现新轴了，这就会出现轴重合问题，即导致万向节死锁的产生<br />
<strong>数学本质是矩阵乘法的非交换性</strong><br />
旋转在数学上是用矩阵表示的：</p>
<ul>
  <li>旋转操作使用矩阵乘法实现的</li>
  <li>矩阵乘法不满足交换律，也就是说：Rx × Ry != Ry × Rx</li>
</ul>

<p><strong>核心关键是为什么后旋转的轴不能带动先旋转的轴？</strong><br />
这个问题涉及到旋转的执行顺序本质上是“嵌套变换”，而不是“同步协商”的。这就像流水线的工序，是不可逆和不可交错的<br />
核心结论：<br />
每一步旋转都是在“当前局部坐标系”下完成的，而不是回头修改前面坐标系的历史状态<br />
后面的旋转只是在前面旋转结果基础上叠加，它并不会“回头影响”之前已经旋转过的坐标系<br />
举个例子：
假设做一个蛋糕：<br />
第一步：打鸡蛋  <br />
第二步：加牛奶<br />
第三步：搅拌<br />
现在你问：为什么我搅拌的时候不能回头改变我打鸡蛋这个过程？<br />
因为：打鸡蛋已经做完了，是个不可逆的状态变换，你在搅拌的时候，只能处理“鸡蛋 + 牛奶”的混合物，不能改变已经打完的蛋</p>

<p><strong>数学视角：矩阵乘法是方向性的</strong>
旋转是通过矩阵来表示的，顺序matters： <code class="language-plaintext highlighter-rouge">FinalRotation = Rz · Ry · Rx</code><br />
你先执行Rx，然后再执行Ry,再执行Rz<br />
每个旋转操作都是将当前状态乘上一个旋转矩阵<br />
一旦Rx被应用，坐标系就已经变了<br />
之后的Ry是在这个变了的坐标系下进行的<br />
Ry不会也无法回头修改Rx的效果<br />
因为矩阵乘法不是可交换的，所以这个顺序是“单向嵌套”，不是“双向影响”</p>

<p><strong>欧拉角是旋转变换，每次旋转变换都是叠加了上次旋转的状态后再进行的，也就是说，虽然每次变换都是独立的，但都要经历从初始状态按顺序旋转，绕轴旋转角度达到目标状态这一系列流程，这就把时序包含在其中了</strong><br />
<strong>初始状态是（0，0，0）</strong></p>

<p><strong>为什么看到的变换是连续的</strong><br />
欧拉角变换虽然顺序嵌套，但它们构成的是一个连续函数映射<br />
欧拉角 → 四元数 → 变换矩阵 → 渲染出模型的姿态
整个链条中：</p>

<p>欧拉角：你手动输入的 (X, Y, Z) 是连续的（例如你拖动滑块）</p>

<p>四元数：Unity 把欧拉角转换成一个四元数，这是一个连续光滑的旋转表示</p>

<p>矩阵：四元数再转成 3×3 旋转矩阵，依然是平滑的</p>

<p>模型：在世界中展示的姿态是自然旋转、连贯变化的</p>

<p>所以你看到的旋转是连续的、平滑的。</p>

<p><strong>哪些地方是不连续的</strong><br />
1.万向节死锁，当某个周旋转到90°，两个轴重合，自由度减少，Unity为了保持“姿态”，可能会自动调整其他轴的值，此时Rotation的值再Inspector中跳变，但物体并没有跳<br />
2.四元数存在加减号不唯一（180°对称）问题，一个方向可以由两个四元数表示：q和-q，它们作用在物体上是一样的，Unity在背后自动选择最短路径，所以视觉上依旧是连续旋转路径上的最短旋转</p>

<h3 id="2游戏对象相关">2.游戏对象相关</h3>

<table>
  <thead>
    <tr>
      <th>类型</th>
      <th>说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">GameObject</code></td>
      <td>场景中所有对象的基本单元</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Component</code></td>
      <td>所有组件的基类</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Transform</code></td>
      <td>表示物体的位置、旋转、缩放</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">MonoBehaviour</code></td>
      <td>用户自定义脚本的基类</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">ScriptableObject</code></td>
      <td>可创建的资产类，用于数据管理</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Object</code></td>
      <td>Unity 所有对象的基类（包括资源）</td>
    </tr>
  </tbody>
</table>

<h3 id="3图形和渲染">3.图形和渲染</h3>

<table>
  <thead>
    <tr>
      <th>类型</th>
      <th>说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Mesh</code>, <code class="language-plaintext highlighter-rouge">MeshRenderer</code></td>
      <td>网格和其渲染组件</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Material</code></td>
      <td>材质资源</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Shader</code></td>
      <td>控制材质渲染效果的程序</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Texture</code>, <code class="language-plaintext highlighter-rouge">Texture2D</code>, <code class="language-plaintext highlighter-rouge">RenderTexture</code></td>
      <td>贴图资源</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Camera</code></td>
      <td>摄像机组件</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Light</code></td>
      <td>灯光组件</td>
    </tr>
  </tbody>
</table>

<h3 id="4物理相关">4.物理相关</h3>

<table>
  <thead>
    <tr>
      <th>类型</th>
      <th>说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Rigidbody</code>, <code class="language-plaintext highlighter-rouge">Rigidbody2D</code></td>
      <td>刚体，驱动物体物理行为</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Collider</code>, <code class="language-plaintext highlighter-rouge">BoxCollider</code>, <code class="language-plaintext highlighter-rouge">SphereCollider</code>, 等</td>
      <td>碰撞器</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Physics</code>, <code class="language-plaintext highlighter-rouge">Physics2D</code></td>
      <td>提供物理检测和操作的静态类</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Joint</code> 系列</td>
      <td>链接两个刚体（如 HingeJoint）</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">ContactPoint</code></td>
      <td>碰撞点信息结构体</td>
    </tr>
  </tbody>
</table>

<h3 id="5输入和事件">5.输入和事件</h3>

<table>
  <thead>
    <tr>
      <th>类型</th>
      <th>说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Input</code></td>
      <td>输入系统静态类</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">KeyCode</code></td>
      <td>键盘按键枚举</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Touch</code>, <code class="language-plaintext highlighter-rouge">TouchPhase</code></td>
      <td>触摸输入相关</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Event</code>, <code class="language-plaintext highlighter-rouge">EventType</code></td>
      <td>GUI 系统事件类型</td>
    </tr>
  </tbody>
</table>

<h3 id="6资源与序列化">6.资源与序列化</h3>

<table>
  <thead>
    <tr>
      <th>类型</th>
      <th>说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Resources</code>, <code class="language-plaintext highlighter-rouge">AssetBundle</code></td>
      <td>资源加载管理器</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">TextAsset</code></td>
      <td>文本资源，如 JSON、配置文件等</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">SerializableAttribute</code></td>
      <td>允许自定义类型序列化存储</td>
    </tr>
  </tbody>
</table>

<h3 id="7uiugui">7.UI（UGUI）</h3>

<table>
  <thead>
    <tr>
      <th>类型</th>
      <th>说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Canvas</code>, <code class="language-plaintext highlighter-rouge">CanvasRenderer</code></td>
      <td>UI 根组件</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">RectTransform</code></td>
      <td>用于 UI 布局的 Transform</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Image</code>, <code class="language-plaintext highlighter-rouge">Text</code>, <code class="language-plaintext highlighter-rouge">Button</code>, <code class="language-plaintext highlighter-rouge">Slider</code> 等</td>
      <td>基础 UI 组件</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">EventSystem</code></td>
      <td>管理 UI 输入事件</td>
    </tr>
  </tbody>
</table>

<h3 id="8时间协程与生命周期">8.时间、协程与生命周期</h3>

<table>
  <thead>
    <tr>
      <th>类型</th>
      <th>说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Time</code></td>
      <td>时间相关（如 deltaTime、timeScale）</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">WaitForSeconds</code>, <code class="language-plaintext highlighter-rouge">WaitUntil</code></td>
      <td>协程等待辅助类</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Coroutine</code></td>
      <td>协程对象类型</td>
    </tr>
  </tbody>
</table>]]></content><author><name>ljf12825</name></author><category term="笔记" /><category term="Unity" /><category term="Unity System" /><summary type="html"><![CDATA[Unity内建类型]]></summary></entry><entry><title type="html">Unity Performance Tuning</title><link href="http://localhost:4000/posts/2025-06-13-Unity-Performance-Tuning/" rel="alternate" type="text/html" title="Unity Performance Tuning" /><published>2025-06-01T00:00:00+08:00</published><updated>2025-06-01T00:00:00+08:00</updated><id>http://localhost:4000/posts/Unity-Performance-Tuning</id><content type="html" xml:base="http://localhost:4000/posts/2025-06-13-Unity-Performance-Tuning/"><![CDATA[]]></content><author><name>ljf12825</name></author><category term="笔记" /><category term="Unity" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Unity Profiler</title><link href="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Unity-Profiler.html" rel="alternate" type="text/html" title="Unity Profiler" /><published>2025-06-01T00:00:00+08:00</published><updated>2025-06-01T00:00:00+08:00</updated><id>http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Unity-Profiler</id><content type="html" xml:base="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Unity-Profiler.html"><![CDATA[]]></content><author><name>ljf12825</name></author><category term="笔记" /><category term="Unity" /><category term="Unity Tool" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Unity NetWork</title><link href="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Unity-NetWork.html" rel="alternate" type="text/html" title="Unity NetWork" /><published>2025-06-01T00:00:00+08:00</published><updated>2025-06-01T00:00:00+08:00</updated><id>http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Unity-NetWork</id><content type="html" xml:base="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Unity-NetWork.html"><![CDATA[]]></content><author><name>ljf12825</name></author><category term="笔记" /><category term="Unity" /><category term="Unity NetWork" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Terrain</title><link href="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Terrain.html" rel="alternate" type="text/html" title="Terrain" /><published>2025-06-01T00:00:00+08:00</published><updated>2025-06-01T00:00:00+08:00</updated><id>http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Terrain</id><content type="html" xml:base="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Terrain.html"><![CDATA[<p>在Unity中，Terrain是一个专门用于制作大规模、自然风格场景的强大工具</p>

<h2 id="什么是terrain">什么是Terrain</h2>
<p>Terrain是Unity提供的一个内置组件，用于在场景中创建可编辑的地形<br />
它由多个部分组成：</p>
<ul>
  <li>地形本体（高度图控制的网格）</li>
  <li>纹理涂层（地表材质贴图）</li>
  <li>植被/树木/草</li>
  <li>光照支持（光照贴图、探针）</li>
  <li>LOD和剔除</li>
</ul>

<h2 id="terrain的核心结构">Terrain的核心结构</h2>

<table>
  <thead>
    <tr>
      <th>模块</th>
      <th>功能</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>高度图（Heightmap）</strong></td>
      <td>决定地形的高低起伏</td>
    </tr>
    <tr>
      <td><strong>绘制材质（Layers）</strong></td>
      <td>地面纹理（如草地、岩石、雪）混合涂刷</td>
    </tr>
    <tr>
      <td><strong>细节对象（Details）</strong></td>
      <td>草、石头、花等低多边形细节（大量渲染优化）</td>
    </tr>
    <tr>
      <td><strong>树木系统（Trees）</strong></td>
      <td>批量放置支持 LOD 的树</td>
    </tr>
    <tr>
      <td><strong>碰撞体</strong></td>
      <td>自动生成地形碰撞</td>
    </tr>
    <tr>
      <td><strong>光照支持</strong></td>
      <td>支持烘焙光照图、Light Probe、反射探针</td>
    </tr>
  </tbody>
</table>

<h2 id="terrain-data">Terrain Data</h2>
<p><code class="language-plaintext highlighter-rouge">Terrain Data</code>是地形的“后端数据容器”，和<code class="language-plaintext highlighter-rouge">Terrain</code>组件一起工作，一个<code class="language-plaintext highlighter-rouge">Terrain</code>组件绑定一个<code class="language-plaintext highlighter-rouge">TerrainData</code>资源</p>
<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Terrain</span> <span class="n">terrain</span> <span class="p">=</span> <span class="n">GetComponent</span><span class="p">&lt;</span><span class="n">Terrain</span><span class="p">&gt;();</span>
<span class="n">TerrainData</span> <span class="n">data</span> <span class="p">=</span> <span class="n">terrain</span><span class="p">.</span><span class="n">terrainData</span><span class="p">;</span>
</code></pre></div></div>
<h3 id="terraindata保存的内容"><code class="language-plaintext highlighter-rouge">TerrainData</code>保存的内容</h3>
<h4 id="高度图heightmap">高度图（Heightmap）</h4>
<ul>
  <li>用灰度图(float[,])描述地形的高度</li>
  <li>控制地形表面的形状
    <div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">float</span><span class="p">[,]</span> <span class="n">heights</span> <span class="p">=</span> <span class="n">terrainData</span><span class="p">.</span><span class="nf">GetHeights</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">);</span>
</code></pre></div>    </div>
  </li>
</ul>

<h4 id="纹理图层splatmaps">纹理图层（Splatmaps）</h4>
<ul>
  <li>每层纹理混合信息</li>
  <li>用来混合多个地形材质（如泥土、草地、雪）
    <div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">float</span><span class="p">[,,]</span> <span class="n">alphamaps</span> <span class="p">=</span> <span class="n">terrainData</span><span class="p">.</span><span class="nf">GetAlphamaps</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">);</span>
</code></pre></div>    </div>
  </li>
</ul>

<h4 id="细节对象detailsgrass">细节对象（Details/Grass）</h4>
<ul>
  <li>如草地、灌木，用细节地图存储
    <div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span><span class="p">[,]</span> <span class="n">detailMap</span> <span class="p">=</span> <span class="n">terrainData</span><span class="p">.</span><span class="nf">GetDetailLayer</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">,</span> <span class="n">detailLayerIndex</span><span class="p">);</span>
</code></pre></div>    </div>
  </li>
</ul>

<h4 id="树对象trees">树对象（Trees）</h4>
<ul>
  <li>存储每棵树的位置、缩放、原型类型
    <div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">TreeInstance</span><span class="p">[]</span> <span class="n">trees</span> <span class="p">=</span> <span class="n">terrainData</span><span class="p">.</span><span class="n">treeInstances</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
</ul>

<h4 id="分辨率信息">分辨率信息</h4>
<ul>
  <li>高度图分辨率：决定地形精细度</li>
  <li>控制图分辨率：纹理混合图精度</li>
  <li>细节图分辨率：草木布置精度
    <div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">terrainData</span><span class="p">.</span><span class="n">heightmapResolution</span>
<span class="n">terrainData</span><span class="p">.</span><span class="n">alphamapResolution</span>
<span class="n">terrainData</span><span class="p">.</span><span class="n">detailResolution</span>
</code></pre></div>    </div>
  </li>
</ul>

<p><strong>示例：运行时生成地形</strong></p>
<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">void</span> <span class="nf">GenerateTerrain</span><span class="p">()</span>
<span class="p">{</span>
  <span class="n">TerrainData</span> <span class="n">terrainData</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">TerrainData</span><span class="p">();</span>
  <span class="n">terrainData</span><span class="p">.</span><span class="n">heightmapResolution</span> <span class="p">=</span> <span class="m">513</span><span class="p">;</span>
  <span class="n">terrainData</span><span class="p">.</span><span class="n">size</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Vector3</span><span class="p">(</span><span class="m">1000</span><span class="p">,</span> <span class="m">100</span><span class="p">,</span> <span class="m">1000</span><span class="p">);</span>

  <span class="kt">float</span><span class="p">[,]</span> <span class="n">heights</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">float</span><span class="p">[</span><span class="m">513</span><span class="p">,</span> <span class="m">513</span><span class="p">];</span>
  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">x</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">x</span> <span class="p">&lt;</span> <span class="m">513</span><span class="p">;</span> <span class="p">++</span><span class="n">x</span><span class="p">)</span>
  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">y</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">y</span> <span class="p">&lt;</span> <span class="m">513</span><span class="p">;</span> <span class="p">++</span><span class="n">y</span><span class="p">)</span>
    <span class="n">heights</span><span class="p">[</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">]</span> <span class="p">=</span> <span class="n">Mathf</span><span class="p">.</span><span class="nf">PerlinNoise</span><span class="p">(</span><span class="n">x</span> <span class="p">*</span> <span class="m">0.01f</span><span class="p">,</span> <span class="n">y</span> <span class="p">*</span> <span class="m">0.01f</span><span class="p">)</span> <span class="p">*</span> <span class="m">0.2f</span><span class="p">;</span>
  
  <span class="n">terrainData</span><span class="p">.</span><span class="nf">SetHeights</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="n">heights</span><span class="p">);</span>

  <span class="n">GameObject</span> <span class="n">terrainGO</span> <span class="p">=</span> <span class="n">Terrain</span><span class="p">.</span><span class="nf">CreateTerrainGameObject</span><span class="p">(</span><span class="n">terrainData</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="注意事项">注意事项</h3>

<table>
  <thead>
    <tr>
      <th>限制</th>
      <th>说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>只能在主线程读写</td>
      <td>不支持多线程访问（除非用 <code class="language-plaintext highlighter-rouge">NativeArray</code> Hack）</td>
    </tr>
    <tr>
      <td>修改后需刷新</td>
      <td>修改 <code class="language-plaintext highlighter-rouge">terrainData</code> 后需设置给 <code class="language-plaintext highlighter-rouge">Terrain</code> 才生效</td>
    </tr>
    <tr>
      <td>不可跨 Terrain 共享贴图索引</td>
      <td>每个地形的 <code class="language-plaintext highlighter-rouge">TerrainLayer[]</code> 不能乱用，需要独立处理</td>
    </tr>
  </tbody>
</table>

<h2 id="terrain-in-inspector">Terrain in Inspector</h2>
<p>场景中的Terrain对象一般会包含以下模块</p>
<ul>
  <li>Terrain（主组件）</li>
  <li>Terrain Collider（自动附加）</li>
  <li>Terrain Tools（各种绘制工具）</li>
  <li>Terrain Settings（参数设置）</li>
</ul>

<h3 id="create-neighbor-terrains">Create Neighbor Terrains</h3>
<p><img src="/assets/images/CreateNeighborTerrains.jpg" alt="CreateNeighborTerrains" /></p>

<h4 id="这是什么">这是什么</h4>
<p>Unity的每一个Terrain是一个地形快（chunk），当你需要构建更大的世界地图时：</p>
<blockquote>
  <p>你可以将多个地形快拼接在一起，形成一个无缝连接的大地图
<code class="language-plaintext highlighter-rouge">Create Neighbor Terrains</code>就是一个快捷工具，让你快速在上下左右形成新的Terrain，并自动设置它们之间的连接关系（Neighbor）</p>
</blockquote>

<h4 id="unity会做什么">Unity会做什么</h4>
<ul>
  <li>自动创建一个或多个相邻的Terrain GameObject</li>
  <li>与当前的Terrain无缝拼接（边界贴合）</li>
  <li>自动设置每个地形的Neighbor引用（主要用于LOD过渡等）</li>
</ul>

<p><img src="/assets/images/TerrainNeighbor.jpg" alt="TerrainsNeighbor" /></p>

<h4 id="创建后的terrain有哪些特征">创建后的Terrain有哪些特征</h4>
<ul>
  <li>分辨率与当前Terrain一致</li>
  <li>初始高度图为空白</li>
  <li>材质/Detail Layer/树/Layer并不会自动继承，需要手动复制</li>
  <li>已经自动设置了<code class="language-plaintext highlighter-rouge">SetNeighbor</code>（Unity会在内部管理连接信息）</li>
</ul>

<h4 id="为什么需要neighbor信息">为什么需要Neighbor信息</h4>
<p>Unity Terrain在运行时做：</p>
<ul>
  <li>LOD边界融合（避免接缝）</li>
  <li>光照探针插值正确性</li>
  <li>寻路/NavMesh分布</li>
</ul>

<p>也就是说，如果你手动创建了多个Terrain，没有设置Neighbor，会出现：</p>
<ul>
  <li>LOD切换时断裂</li>
  <li>光照贴图不连续</li>
  <li>草树渲染突然中断</li>
</ul>

<h4 id="tips">Tips</h4>
<p>多Terrain的场景通常配合：</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Streaming</code>（按需加载块）</li>
  <li><code class="language-plaintext highlighter-rouge">Runtime Stitching</code>（连接边界）
可以使用插件如MicroSplat/Gaia等进行多地形管理</li>
</ul>

<h3 id="paintterrain">PaintTerrain</h3>
<p><img src="/assets/images/PaintTerrain.jpg" alt="PaintTerrain" /></p>

<p>这是Unity Terrain系统用于手动“绘制”地形的工具，类似PS中的笔刷，但是用于三维地形，可以用它来：</p>
<ul>
  <li>提升/降低地形</li>
  <li>涂抹纹理（比如：草、图、雪）</li>
  <li>铺设草和石头（Detail）</li>
  <li>放置树木（Tree）</li>
  <li>设置材质混合</li>
  <li>创建地形孔洞（如山洞入口）</li>
</ul>

<h4 id="sub-tools">Sub Tools</h4>
<h5 id="1raise-or-lower-terrain">1.Raise or Lower Terrain</h5>
<blockquote>
  <p>用笔刷将地形向上或向下推动</p>
</blockquote>

<ul>
  <li>Bursh Size：笔刷大小（影响范围）</li>
  <li>Opacity：强度（提升速度）</li>
  <li>Target Strength：单次推拉的力量</li>
  <li>可用于画山、丘陵、平原</li>
</ul>

<p>配合<code class="language-plaintext highlighter-rouge">Shift</code>反向操作</p>

<h5 id="2set-height">2.Set Height</h5>
<blockquote>
  <p>把地形调整到某个统一的高度（例如建平台）</p>
</blockquote>

<ul>
  <li>设置<code class="language-plaintext highlighter-rouge">Target Height</code>，然后绘制地形</li>
  <li>适合制作建筑平台、河面、平地道路</li>
</ul>

<p>可以使用<code class="language-plaintext highlighter-rouge">Flatten</code>一键铺平当前Terrain</p>

<h5 id="3smooth-height平滑地形">3.Smooth Height（平滑地形）</h5>
<blockquote>
  <p>平滑地形的高低差，让地形更自然</p>
</blockquote>

<ul>
  <li>常用于锐利山峰边缘平滑处理</li>
  <li>减少单位移动时的突兀感</li>
</ul>

<h5 id="4paint-texture涂地表材质">4.Paint Texture（涂地表材质）</h5>
<blockquote>
  <p>把不同纹理“画”到地形上，实现草地、雪地、沙漠的混合过渡</p>
  <ul>
    <li>每个纹理时一个Terrain Layer</li>
    <li>Unity支持多图混合（最多8张）</li>
    <li>使用笔刷方式混合地表纹理</li>
  </ul>
</blockquote>

<p>示例层：</p>
<ul>
  <li>Layer1：Grass</li>
  <li>Layer2：Dirt</li>
  <li>Layer3：Rock</li>
</ul>

<p>支持自定义笔刷、混合过渡控制（Opacity）<br />
<code class="language-plaintext highlighter-rouge">Add Layer</code>添加纹理层，选用PBR材质（支持BaseMap、NormalMap）</p>

<h5 id="5terrain-holes">5.Terrain Holes</h5>
<blockquote>
  <p>画出洞，让地形有缺口（可用于洞穴、地道入口）</p>
</blockquote>

<ul>
  <li>类似“橡皮擦”，直接擦掉地形面片</li>
  <li>可用于：
    <ul>
      <li>做地下世界入口</li>
      <li>配合Portal、Volume、Trigger使用
默认不可通过地形下看见，需要你手动铺地板或连接其他网格模型</li>
    </ul>
  </li>
</ul>

<h3 id="paint-trees">Paint Trees</h3>
<p><img src="/assets/images/PaintTrees.jpg" alt="PaintTrees" /></p>

<p><code class="language-plaintext highlighter-rouge">Paint Trees</code>是Unity Terrain中用于批量种植树木的工具，它支持使用不同树模型的自动随机分布、缩放、选择、LOD显示等，是创建森林、山地植被的关键工具</p>
<h4 id="添加树模型">添加树模型</h4>
<p>点击 “Edit Trees” → “Add Tree…”：</p>
<ul>
  <li>在弹出的窗口中选择一个 树的 Prefab</li>
  <li>Unity 支持：
    <ul>
      <li>Tree Creator 制作的树（.tree 文件）</li>
      <li>SpeedTree 模型（.spm 文件）</li>
      <li>自己导入的 FBX/Prefab 模型（需带有 LOD/Collider）</li>
    </ul>
  </li>
</ul>

<p>要求：</p>
<ul>
  <li>树不能有刚体或Animator</li>
  <li>树Prefab中必须包含Mesh Renderer（或SpeedTree）</li>
</ul>

<h4 id="种树参数设置">种树参数设置</h4>
<p>添加好树之后，就可以开始“画树”了，主要参数如下：</p>

<table>
  <thead>
    <tr>
      <th>参数</th>
      <th>作用</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>Brush Size</strong></td>
      <td>控制笔刷直径（影响范围）</td>
    </tr>
    <tr>
      <td><strong>Tree Density</strong></td>
      <td>控制单位面积内种植的数量</td>
    </tr>
    <tr>
      <td><strong>Tree Height/Width</strong></td>
      <td>控制树的缩放范围（有最小和最大）</td>
    </tr>
    <tr>
      <td><strong>Color Variation</strong></td>
      <td>控制颜色的随机扰动（偏红、偏绿、偏亮等）</td>
    </tr>
    <tr>
      <td><strong>Random Rotation</strong></td>
      <td>勾选后自动随机 Y 轴旋转树（防止重复感）</td>
    </tr>
  </tbody>
</table>

<p>每画一次，就会在当前区域根据密度、大小、颜色等参数生成多个树</p>

<h4 id="树木渲染和性能优化">树木渲染和性能优化</h4>
<p>Unity的Terrain树有专门的渲染优化方案</p>
<h5 id="billboard看板树">Billboard（看板树）</h5>
<ul>
  <li>当树距离相机较远时，自动变成平面图片</li>
  <li>极大减少了远距离渲染负担</li>
</ul>

<h5 id="lod支持">LOD支持</h5>
<ul>
  <li>使用SpeedTree模型或LOD Group的树可自动切换模型精度</li>
  <li>可自定义LOD阶段</li>
</ul>

<h5 id="gpu-instancing">GPU Instancing</h5>
<ul>
  <li>大量相同的树会使用GPU Instancing批处理渲染</li>
  <li>极大提高性能，适合森林、大面积自然场景</li>
</ul>

<h4 id="树的碰撞">树的碰撞</h4>
<p>默认树时没有碰撞器的，但你可以启用碰撞</p>
<ul>
  <li>勾选<code class="language-plaintext highlighter-rouge">Tree Collider</code>（取决于添加的树的prefab）</li>
  <li>或者在Runtime中为某些特殊树添加<code class="language-plaintext highlighter-rouge">Capsule Collider</code>等</li>
</ul>

<p>适用于：</p>
<ul>
  <li>玩家可以撞到树</li>
  <li>砍树系统</li>
  <li>遮挡判断</li>
</ul>

<h4 id="几种树的比较">几种树的比较</h4>

<table>
  <thead>
    <tr>
      <th>工具</th>
      <th>特点</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>Tree Creator</strong></td>
      <td>Unity 内置的老式树编辑器，支持风、LOD，效率不高，（2022版本已弃用）</td>
    </tr>
    <tr>
      <td><strong>SpeedTree</strong></td>
      <td>高级树木生成工具，效果好，适合中大型项目（但是商业插件）</td>
    </tr>
    <tr>
      <td><strong>普通 Prefab 树</strong></td>
      <td>自己做的 FBX + LOD，灵活但需优化得当</td>
    </tr>
    <tr>
      <td><strong>Terrain 树</strong></td>
      <td>专为大量地形种树优化，性能最佳但不支持动画/刚体</td>
    </tr>
  </tbody>
</table>

<h3 id="paint-details">Paint Details</h3>
<p><img src="/assets/images/PaintDetails.jpg" alt="PaintDetails" /></p>

<p><code class="language-plaintext highlighter-rouge">Paint Details</code>是Unity Terrain系统中用于在地形上批量绘制“小型自然细节”的工具，它与<code class="language-plaintext highlighter-rouge">Paint Trees</code>类似，但用于体积更小、密度更高的细节对象，是构建自然场景的关键补充</p>

<h4 id="如何添加细节类型">如何添加细节类型</h4>
<p>点击面板中的：Edit Details → Add Detail Mesh / Add Grass Texture</p>

<p>Unity提供两种添加方式</p>

<table>
  <thead>
    <tr>
      <th>类型</th>
      <th>描述</th>
      <th>适用</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>Detail Mesh</strong></td>
      <td>3D Mesh 物体</td>
      <td>小石头、蘑菇、落叶、低模草</td>
    </tr>
    <tr>
      <td><strong>Grass Texture</strong></td>
      <td>Billboard（摄像机对面）草贴图</td>
      <td>草地、麦田、灌木等</td>
    </tr>
  </tbody>
</table>

<h5 id="add-grass-texture">Add Grass Texture</h5>
<p>用于画贴图式草，性能最高</p>
<ul>
  <li>你只需指定一个灰度图草纹理（通常带透明背景）</li>
  <li>Unity会使用Billboard模式渲染草</li>
  <li>草会随风飘动（可在Terrain Setting设置Wind参数）</li>
  <li>可调颜色混合范围、尺寸、透明度</li>
</ul>

<h5 id="add-detail-mesh">Add Detail Mesh</h5>
<ul>
  <li>可选一个Prefab（如石头、蘑菇、底模模型）</li>
  <li>用于3D小物件渲染</li>
  <li>可以勾选GPU Instancing以提升性能</li>
</ul>

<p>注意：</p>
<ul>
  <li>太复杂的Mesh会降低性能</li>
  <li>太密集的放置会导致Draw Call飙升</li>
</ul>

<h4 id="paint参数">Paint参数</h4>

<table>
  <thead>
    <tr>
      <th>参数</th>
      <th>描述</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>Brush Size</strong></td>
      <td>笔刷范围（单位为世界坐标）</td>
    </tr>
    <tr>
      <td><strong>Opacity</strong></td>
      <td>笔刷强度（一次能刷多少）</td>
    </tr>
    <tr>
      <td><strong>Target Strength</strong></td>
      <td>总体密度（越高越密）</td>
    </tr>
    <tr>
      <td><strong>Random Color / Size</strong></td>
      <td>自动扰动草的颜色、尺寸，提升自然感</td>
    </tr>
    <tr>
      <td><strong>Noise Spread</strong></td>
      <td>控制颜色/透明度变化分布程度（更逼真）</td>
    </tr>
  </tbody>
</table>

<h4 id="渲染与性能优化">渲染与性能优化</h4>

<h5 id="优化特性">优化特性</h5>

<table>
  <thead>
    <tr>
      <th>技术</th>
      <th>说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>Billboard 渲染</strong></td>
      <td>仅用平面草贴图，看起来像 3D 实际是贴图</td>
    </tr>
    <tr>
      <td><strong>GPU Instancing</strong></td>
      <td>Detail Mesh 会批处理，显著降低 Draw Call</td>
    </tr>
    <tr>
      <td><strong>LOD 剔除</strong></td>
      <td>距离过远会剔除渲染，节省性能</td>
    </tr>
  </tbody>
</table>

<p>注意：</p>
<ul>
  <li>草的渲染非常依赖显卡带宽，大量草可能拖慢帧率</li>
  <li>Detail Mesh应尽量简化为低面数模型</li>
  <li>尽量不要混用太多不同Detail类型</li>
</ul>

<h5 id="风动效果设置">风动效果设置</h5>
<ul>
  <li>草地的“飘动”来自于<code class="language-plaintext highlighter-rouge">Terrain Setting</code>中的Wind Settings for Grass</li>
  <li>可调：
    <ul>
      <li>Speed（速度）</li>
      <li>Size（波动幅度）</li>
      <li>Bending（弯曲度）</li>
      <li>Grass Tint（颜色偏移）</li>
    </ul>
  </li>
</ul>

<p>默认Terrain草是静态烘焙的，运行时不支持动态添加
但可以：</p>
<ul>
  <li>使用脚本控制<code class="language-plaintext highlighter-rouge">DetailPrototype</code>动态添加/刷新</li>
  <li>使用<code class="language-plaintext highlighter-rouge">GPU Instancing + Compute Shader</code>自制草系统</li>
</ul>

<h3 id="terrain-settings">Terrain Settings</h3>
<p><img src="/assets/images/TerrainSetting_1.jpg" alt="TerrainSetting_1" />
<img src="/assets/images/TerrainSetting_2.jpg" alt="TerrainSetting_2" /></p>

<h4 id="basic-terrain">Basic Terrain</h4>

<table>
  <thead>
    <tr>
      <th>参数</th>
      <th>说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>Grouping ID</strong></td>
      <td>地形自动拼接的组编号。多个地形设置相同 ID，可自动连接边界。</td>
    </tr>
    <tr>
      <td><strong>Auto Connect</strong></td>
      <td>自动连接相邻地形边缘（启用后根据 Grouping ID）。</td>
    </tr>
    <tr>
      <td><strong>Draw</strong></td>
      <td>控制地形是否可见。取消勾选可临时隐藏地形。</td>
    </tr>
    <tr>
      <td><strong>Draw Instanced</strong></td>
      <td>使用 GPU Instancing 渲染瓦片，节省 draw call，推荐开启。</td>
    </tr>
    <tr>
      <td><strong>Enable Ray Tracing Support</strong></td>
      <td>支持光线追踪（HDRP下使用）。</td>
    </tr>
    <tr>
      <td><strong>Pixel Error</strong></td>
      <td>地形 LOD 精度。数值越低越精细，越高越省性能（建议 PC: 1<del>5，移动端：5</del>15）。</td>
    </tr>
    <tr>
      <td><strong>Minimum/Maximum Detail Limit</strong></td>
      <td>限制 LOD 变化范围（较少使用，可保持默认）。</td>
    </tr>
    <tr>
      <td><strong>Base Map Dist.</strong></td>
      <td>多远使用低分辨率贴图（节省远处渲染消耗）。</td>
    </tr>
    <tr>
      <td><strong>Cast Shadows</strong></td>
      <td>地形是否投射阴影。</td>
    </tr>
    <tr>
      <td><strong>Reflection Probes</strong></td>
      <td>是否使用反射探针，推荐使用 <code class="language-plaintext highlighter-rouge">Blend Probes</code>。</td>
    </tr>
    <tr>
      <td><strong>Material</strong></td>
      <td>使用的地形材质，默认是 <code class="language-plaintext highlighter-rouge">TerrainLit</code> 或 <code class="language-plaintext highlighter-rouge">Default-Terrain-Standard</code>。</td>
    </tr>
  </tbody>
</table>

<h4 id="tree--detail-objects">Tree &amp; Detail Objects</h4>

<table>
  <thead>
    <tr>
      <th>参数</th>
      <th>说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>Draw</strong></td>
      <td>控制是否渲染树木和草丛等细节。</td>
    </tr>
    <tr>
      <td><strong>Bake Light Probes For Trees</strong></td>
      <td>树木是否参与光照探针烘焙。</td>
    </tr>
    <tr>
      <td><strong>Remove Light Probe Ringing</strong></td>
      <td>防止光照探针边界产生光晕伪影。</td>
    </tr>
    <tr>
      <td><strong>Preserve Tree Prototype</strong></td>
      <td>保持原始树模型设置。</td>
    </tr>
    <tr>
      <td><strong>Tree Motion Vectors</strong></td>
      <td>设置树木是否支持运动矢量（用于动效或后期处理）。</td>
    </tr>
    <tr>
      <td><strong>Detail Distance</strong></td>
      <td>草/细节渲染距离（推荐 60~100，性能关键）。</td>
    </tr>
    <tr>
      <td><strong>Detail Density Scale</strong></td>
      <td>草的密度百分比（1 = 全密度，调小省性能）。</td>
    </tr>
    <tr>
      <td><strong>Tree Distance</strong></td>
      <td>树木的最大渲染距离（推荐 PC: 500~1000）。</td>
    </tr>
    <tr>
      <td><strong>Billboard Start</strong></td>
      <td>多远开始使用看板树（节省性能）。</td>
    </tr>
    <tr>
      <td><strong>Fade Length</strong></td>
      <td>Billboard 淡入淡出的距离，提升视觉平滑度。</td>
    </tr>
    <tr>
      <td><strong>Max Mesh Trees</strong></td>
      <td>同屏最多渲染多少真实 Mesh 树，超过则不渲染。</td>
    </tr>
    <tr>
      <td><strong>Detail Scatter Mode</strong></td>
      <td>控制草丛分布策略（Coverage 更均匀，推荐）。</td>
    </tr>
  </tbody>
</table>

<h4 id="wind-settings-for-grass">Wind Settings for Grass</h4>

<table>
  <thead>
    <tr>
      <th>参数</th>
      <th>说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>Speed / Size / Bending</strong></td>
      <td>控制风的速度、大小、弯曲程度。</td>
    </tr>
    <tr>
      <td><strong>Grass Tint</strong></td>
      <td>草的全局色调调整（可以统一偏绿、偏黄）。</td>
    </tr>
  </tbody>
</table>

<h4 id="mesh-resolution">Mesh Resolution</h4>

<table>
  <thead>
    <tr>
      <th>参数</th>
      <th>说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>Terrain Width / Length / Height</strong></td>
      <td>地形尺寸（单位：米）</td>
    </tr>
    <tr>
      <td><strong>Detail Resolution Per Patch</strong></td>
      <td>每块 Detail Patch 中草的分布密度。</td>
    </tr>
    <tr>
      <td><strong>Detail Resolution</strong></td>
      <td>整体地形上草丛/细节的划分格子数。越高越细腻但越耗。</td>
    </tr>
  </tbody>
</table>

<h4 id="holes-settings">Holes Settings</h4>

<table>
  <thead>
    <tr>
      <th>参数</th>
      <th>说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>Compress Holes Texture</strong></td>
      <td>对地形挖洞贴图进行压缩，节省内存。</td>
    </tr>
  </tbody>
</table>

<h4 id="texture-resolutions">Texture Resolutions</h4>

<table>
  <thead>
    <tr>
      <th>参数</th>
      <th>说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>Heightmap Resolution</strong></td>
      <td>地形高度图精度，建议：513 或 1025（越高越细腻）</td>
    </tr>
    <tr>
      <td><strong>Control Texture Resolution</strong></td>
      <td>混合贴图精度，控制多种材质混合（如草+土+雪）</td>
    </tr>
    <tr>
      <td><strong>Base Texture Resolution</strong></td>
      <td>远距离使用的 Base Map 分辨率（节省远处性能）</td>
    </tr>
  </tbody>
</table>

<h4 id="lighting">Lighting</h4>

<table>
  <thead>
    <tr>
      <th>参数</th>
      <th>说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>Contribute Global Illumination</strong></td>
      <td>地形是否参与全局光照（用于 Lightmap/GI）</td>
    </tr>
    <tr>
      <td><strong>Receive Global Illumination</strong></td>
      <td>接收 GI 的方式：<code class="language-plaintext highlighter-rouge">Lightmaps</code> 或 <code class="language-plaintext highlighter-rouge">Light Probes</code></td>
    </tr>
  </tbody>
</table>

<h4 id="lightmapping">Lightmapping</h4>

<table>
  <thead>
    <tr>
      <th>参数</th>
      <th>说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>Scale In Lightmap</strong></td>
      <td>地形占 Lightmap 的比例。越高越清晰（但更占用空间）</td>
    </tr>
    <tr>
      <td><strong>Lightmap Parameters</strong></td>
      <td>控制烘焙时的精度、抗锯齿、间距等，可选低中高 preset。</td>
    </tr>
  </tbody>
</table>

<h4 id="quality-settings">Quality Settings</h4>

<table>
  <thead>
    <tr>
      <th>参数</th>
      <th>说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>Ignore Quality Settings</strong></td>
      <td>是否忽略当前全局 Quality 设置的控制，强制使用当前面板设定。</td>
    </tr>
  </tbody>
</table>

<h2 id="主要地形制作方式">主要地形制作方式</h2>
<h3 id="1手动笔刷绘制适用于小项目快速原型">1.手动笔刷绘制（适用于小项目、快速原型）</h3>
<ul>
  <li>Unity自带Terrain工具，支持高度、纹理、树、草等绘制</li>
  <li>优点：操作直观，上手快</li>
  <li>缺点：效率低、不易保持美术风格一致，细节靠人工修</li>
  <li>使用场景：教学演示、小型独立游戏、快速原型</li>
</ul>

<h3 id="2外部dcc工具制作---导入高度图专业项目常用">2.外部DCC工具制作 -&gt; 导入高度图（专业项目常用）</h3>
<ul>
  <li>使用专业地形软件或美术工具生成高质量地形，再导入Unity：</li>
</ul>

<table>
  <thead>
    <tr>
      <th>工具</th>
      <th>说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>World Machine</strong></td>
      <td>高级噪声算法，真实山脉地貌生成</td>
    </tr>
    <tr>
      <td><strong>Gaea</strong></td>
      <td>节点式地形设计工具，艺术控制更强</td>
    </tr>
    <tr>
      <td><strong>Blender / Houdini</strong></td>
      <td>使用建模 + 程序化节点生成复杂地形</td>
    </tr>
    <tr>
      <td><strong>Photoshop</strong></td>
      <td>手绘/合成灰度高度图</td>
    </tr>
    <tr>
      <td><strong>Substance Designer</strong></td>
      <td>高度图 + Splatmap生成</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>Unity支持将这些高度图作为<code class="language-plaintext highlighter-rouge">Raw</code>导入，并通过<code class="language-plaintext highlighter-rouge">TerrainData</code>生成地形</li>
</ul>

<h3 id="3程序生成地形runtime或编译器内">3.程序生成地形（Runtime或编译器内）</h3>
<ul>
  <li>常用于开放世界、沙盒、随机地图类型游戏</li>
  <li>通过代码控制<code class="language-plaintext highlighter-rouge">TerrainData</code>的高度图、纹理图、细节对象等
    <div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">float</span><span class="p">[,]</span> <span class="n">heights</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">float</span><span class="p">[</span><span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">];</span>
<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">x</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">x</span> <span class="p">&lt;</span> <span class="n">width</span><span class="p">;</span> <span class="p">++</span><span class="n">x</span><span class="p">)</span>
<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">y</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">y</span> <span class="p">&lt;</span> <span class="n">height</span><span class="p">;</span> <span class="p">++</span><span class="n">y</span><span class="p">)</span>
  <span class="n">heights</span><span class="p">[</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">]</span> <span class="p">=</span> <span class="n">Mathf</span><span class="p">.</span><span class="nf">PerlinNoise</span><span class="p">(</span><span class="n">x</span> <span class="p">*</span> <span class="m">0.05f</span><span class="p">,</span> <span class="n">y</span> <span class="p">*</span> <span class="m">0.05f</span><span class="p">);</span>
<span class="n">terrainData</span><span class="p">.</span><span class="nf">SetHeights</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="n">heights</span><span class="p">);</span>
</code></pre></div>    </div>
  </li>
  <li>可加入：
    <ul>
      <li>噪声函数（Perlin、Simplex）</li>
      <li>河流生成</li>
      <li>村庄、道路布置</li>
    </ul>
  </li>
</ul>

<h3 id="插件生成最强大的方式">插件生成（最强大的方式）</h3>
<p>Unity商城中有许多强大的地形插件：</p>

<table>
  <thead>
    <tr>
      <th>插件</th>
      <th>功能特色</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>Gaia Pro</strong></td>
      <td>一站式地形生成、生态系统、海洋、天气</td>
    </tr>
    <tr>
      <td><strong>MapMagic 2</strong></td>
      <td>节点图式、程序化地形、支持多地形拼接</td>
    </tr>
    <tr>
      <td><strong>Terrain Composer 2</strong></td>
      <td>高自由度、数据驱动生成</td>
    </tr>
    <tr>
      <td><strong>MicroSplat / MegaSplat</strong></td>
      <td>高级地形贴图混合、溶解、湿度等效果</td>
    </tr>
    <tr>
      <td><strong>Vegetation Studio Pro</strong></td>
      <td>大规模草木渲染优化</td>
    </tr>
  </tbody>
</table>

<h2 id="terrain-lod-编写调优">Terrain LOD 编写/调优</h2>
<p>在Unity中，Terrain的LOD是通过高度图分辨率、<code class="language-plaintext highlighter-rouge">Pixel Error</code>、以及细节分布分辨率来自动控制网格细分级别。</p>

<p>但Unity也允许通过Shader或代码进一步控制、调优甚至自定义LOD系统</p>

<h3 id="unity-terrain的lod原理">Unity Terrain的LOD原理</h3>
<p>Unity的内置Terrain使用以下机制实现LOD：</p>

<table>
  <thead>
    <tr>
      <th>控制项</th>
      <th>功能</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Pixel Error</code></td>
      <td>控制地形 LOD 变化的灵敏度（越高越糙但更快）。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Base Map Distance</code></td>
      <td>多远开始只用 base map 贴图（低分辨率预览）</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Detail Resolution Per Patch</code></td>
      <td>每块 patch 的细节分辨率，影响草和细节的 LOD。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Detail Distance / Tree Distance</code></td>
      <td>控制草木显示距离。</td>
    </tr>
  </tbody>
</table>

<p>Unity Terrain会自动把地形划分为多个Patch（块），并对每块Patch做LOD</p>

<h3 id="自定义地形lod-shader">自定义地形LOD Shader</h3>
<p>如果想完全控制地形LOD，特别是在自写Mesh Terrain时，可以通过<code class="language-plaintext highlighter-rouge">Shader + C#</code>实现</p>

<p><strong>示例：通过高度图动态LOD网格</strong></p>

<div class="language-hlsl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 顶点 shader 中使用 distance 控制 mesh LOD 精度</span>
<span class="n">float</span> <span class="n">distanceToCamera</span> <span class="o">=</span> <span class="nb">distance</span><span class="p">(</span><span class="n">_WorldSpaceCameraPos</span><span class="p">.</span><span class="n">xyz</span><span class="p">,</span> <span class="n">v</span><span class="p">.</span><span class="n">vertex</span><span class="p">.</span><span class="n">xyz</span><span class="p">);</span>
<span class="n">float</span> <span class="n">lodLevel</span> <span class="o">=</span> <span class="nb">saturate</span><span class="p">(</span><span class="n">distanceToCamera</span> <span class="o">/</span> <span class="n">_LodRange</span><span class="p">);</span> <span class="c1">// 0~1</span>
<span class="c1">// 然后根据lodLevel选择不同精度的高度图采样</span>
</code></pre></div></div>

<p>也可以用 Tessellation Shader 来实现更智能的细分控制</p>

<div class="language-hlsl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="nb">domain</span><span class="p">(</span><span class="s">"tri"</span><span class="p">)]</span>
<span class="p">[</span><span class="nb">partitioning</span><span class="p">(</span><span class="s">"fractional_even"</span><span class="p">)]</span>
<span class="p">[</span><span class="nb">outputtopology</span><span class="p">(</span><span class="s">"triangle_cw"</span><span class="p">)]</span>
<span class="p">[</span><span class="nb">patchconstantfunc</span><span class="p">(</span><span class="s">"PatchConstantFunction"</span><span class="p">)]</span>
<span class="p">[</span><span class="nb">outputcontrolpoints</span><span class="p">(</span><span class="mi">3</span><span class="p">)]</span>
<span class="kt">void</span> <span class="nf">TessellationHullFunction</span><span class="p">(...)</span>
<span class="p">{</span>
  <span class="c1">// 自定义 LOD 控制 tessellationFactor</span>
<span class="p">}</span>
</code></pre></div></div>
<h3 id="lod调优策略">LOD调优策略</h3>

<table>
  <thead>
    <tr>
      <th>调优目标</th>
      <th>技术手段</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>提高性能</td>
      <td>增大 Pixel Error、减小 Patch 分辨率、加大 base map 距离</td>
    </tr>
    <tr>
      <td>增加视觉质量</td>
      <td>减少 Pixel Error、开启实时阴影、使用高精度高度图</td>
    </tr>
    <tr>
      <td>跨平台支持</td>
      <td>低端设备禁用草地、禁用阴影、减少树距离</td>
    </tr>
    <tr>
      <td>编程控制</td>
      <td>使用 <code class="language-plaintext highlighter-rouge">terrain.detailObjectDistance = x</code>、<code class="language-plaintext highlighter-rouge">terrain.heightmapPixelError = x</code> 动态调节</td>
    </tr>
  </tbody>
</table>

<h2 id="terrain-gpu-instancing草树渲染优化">Terrain GPU Instancing（草、树渲染优化）</h2>
<p><code class="language-plaintext highlighter-rouge">Terrain GPU Instancing</code>是Unity用于优化草和树渲染性能的关键技术，它能显著减少Draw Call数量，加速大量重复物体的渲染，非常适合用于大场景、开放世界、森林等</p>

<h3 id="什么是gpu-instancing">什么是GPU Instancing</h3>
<p>GPU Instancing(GPU 实例化)是指：</p>
<blockquote>
  <p>一次提交，多次绘制相同物体，减少CPU-&gt;GPU的调用次数</p>
</blockquote>

<ul>
  <li>普通方式：每棵草都一次Draw Call（开销爆炸）</li>
  <li>Instancing：同一模型、不同位置-&gt;1次Draw Call，绘制所有实例</li>
</ul>

<h3 id="在unity-terrain中的应用">在Unity Terrain中的应用</h3>
<h4 id="details-gpu-instancing">Details GPU Instancing</h4>
<p>Unity 2018+起支持：</p>
<ul>
  <li>使用材质类型：Instanced Mesh 或 Grass Mesh</li>
  <li>并开启“Enable GPU Instancing”选项</li>
</ul>

<p>操作方法：<br />
1.打开Terrain面板-&gt;<code class="language-plaintext highlighter-rouge">Paint Details</code>工具</p>

<p>2.点击<code class="language-plaintext highlighter-rouge">Edit Details</code> -&gt; <code class="language-plaintext highlighter-rouge">Add Detail Mesh</code></p>

<p>3.在弹窗中：</p>
<ul>
  <li>选择一个小草模型（Mesh）</li>
  <li>勾选Use GPU Instancing</li>
  <li>设置距离、颜色、密度等参数</li>
</ul>

<p>4.Unity自动启用GPU实例渲染</p>
<blockquote>
  <p>注意：草贴图（billboard类型）默认不支持GPU Instancing，需改为Mesh类型或自定义Shader</p>
</blockquote>

<h4 id="trees-gpu-instancing">Trees GPU Instancing</h4>
<p>树的GPU Instancing 需要满足两个条件：</p>
<ul>
  <li>模型为Mesh（非SpeedTree）</li>
  <li>树的材质启用GPU Instancing</li>
</ul>

<p>操作：<br />
1.打开<code class="language-plaintext highlighter-rouge">Paint Trees</code>工具</p>

<p>2.添加树种时选择普通Mesh树（非SpeedTree）</p>

<p>3.确保其材质上开启GPU Instancing</p>

<h3 id="注意事项-1">注意事项</h3>

<table>
  <thead>
    <tr>
      <th>限制 / 要点</th>
      <th>说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>草的材质必须使用 <strong>支持 Instancing 的 Shader</strong>（如 URP Lit 或自写）</td>
      <td> </td>
    </tr>
    <tr>
      <td>Instancing 不等于合批，它是“并行绘制”，但仍然占用 GPU VRAM</td>
      <td> </td>
    </tr>
    <tr>
      <td>不支持完全随机模型或颜色（需通过 Shader 控制实例差异）</td>
      <td> </td>
    </tr>
    <tr>
      <td>若草量极大，结合 <strong>LOD、Culling、地形剔除工具</strong> 更有效</td>
      <td> </td>
    </tr>
  </tbody>
</table>

<h3 id="高阶优化">高阶优化</h3>

<table>
  <thead>
    <tr>
      <th>技术</th>
      <th>功能</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>LOD + Crossfade</strong></td>
      <td>减少远距离树模型复杂度</td>
    </tr>
    <tr>
      <td><strong>Vegetation Studio Pro / Nature Renderer</strong></td>
      <td>插件增强 GPU 草渲染（支持更远距离、风、阴影）</td>
    </tr>
    <tr>
      <td><strong>Compute Shader Grass（高级）</strong></td>
      <td>自己写草系统，全 GPU 控制，风、互动等</td>
    </tr>
  </tbody>
</table>

<p><strong>示例：自定义URP Shader支持Instancing</strong></p>
<pre><code class="language-shader">Tags {"RenderType" = "Opaque"}
Pass{
  ...
  CGPROGRAM
  #pragma vertex vert
  #pragma fragment frag
  #pragma multi_compile_instancing

  UNITY_INSTANCING_BUFFER_START(Props)
  UNITY_INSTANCING_BUFFER_END(Props)

  struct appdata
  {
    float4 vertex : POSITION;
    UNITY_VERTEX_INPUT_INSTANCE_ID
  };

  struct v2f
  {
    float4 pos : SV_POSITION;
    UNITY_VERTEX_INPUT_INSTANCE_ID
  };

  v2f vert(appdata v)
  {
    UNITY_SETUP_INSTANCE_ID(v);
    ...
  }
  ...
  ENDCG
}
</code></pre>

<h2 id="使用terrain-toolkit插件或gaia等地形生成工具">使用Terrain Toolkit插件或Gaia等地形生成工具</h2>
<p>TODO</p>

<h2 id="多地形拼接无缝过渡">多地形拼接、无缝过渡</h2>
<p>Unity的Terrain是单独的GameObject，每个最多4097*4097高度图/贴图分辨率，单地形很难承载整个世界，因此需要：</p>
<blockquote>
  <p>将世界划分为多个Terrain块，拼接形成一个整体大地图</p>
</blockquote>

<h3 id="拼接方式">拼接方式</h3>
<h4 id="方法一unity内建-create-neighbor-terrains">方法一：Unity内建 Create Neighbor Terrains</h4>
<p>见上文</p>

<h4 id="方法二代码方式设置neighbor">方法二：代码方式设置Neighbor</h4>
<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">terrain</span><span class="p">.</span><span class="nf">SetNeighbor</span><span class="p">(</span><span class="n">left</span><span class="p">,</span> <span class="n">top</span><span class="p">,</span> <span class="n">right</span><span class="p">,</span> <span class="n">bottom</span><span class="p">);</span>
</code></pre></div></div>
<p>Unity的渲染系统通过<code class="language-plaintext highlighter-rouge">SetNeighbors</code>方法了解哪些Terrain相邻，从而实现：</p>
<ul>
  <li>地形LOD平滑衔接</li>
  <li>避免裂缝/LOD跳跃</li>
  <li>正确生成相邻地形的阴影、光照探针等</li>
</ul>

<h3 id="如何实现高度无缝">如何实现高度无缝</h3>
<h4 id="方法一在编辑时使用同步工具">方法一：在编辑时使用同步工具</h4>
<ul>
  <li>用Terrain Tools插件中的<code class="language-plaintext highlighter-rouge">Terrain Stitch Tool</code></li>
  <li>或用插件（如Gaia、Wrold Creator）自动生成高度图并拼接</li>
</ul>

<h4 id="方法二手动同步边界高度">方法二：手动同步边界高度</h4>
<p>当你修改Terrain A的边缘时，要同步更新Terrain B相邻边缘的高度（可通过代码或工具完成）</p>

<h3 id="如何实现纹理无缝">如何实现纹理无缝</h3>
<p>使用相同的SplatMap（地形图层）</p>
<ul>
  <li>确保所有Terrain使用相同的Terrain Layer（纹理材质）</li>
  <li>地形混合时，使用相同规则的笔刷强度</li>
  <li>地图边缘刷贴图时过渡得要自然（如混合2~3中Layer）</li>
</ul>

<h3 id="生态系统草树边界过渡">生态系统（草/树）边界过渡</h3>
<ul>
  <li>插件会对自动边界进行生态镜像过渡</li>
  <li>自定义草系统需处理边界草的“半草”同步问题</li>
  <li>植被生成算法需考虑相邻Terrain的坐标范围</li>
</ul>

<h3 id="lod无缝过渡与裂缝问题crack">LOD无缝过渡与裂缝问题（Crack）</h3>
<p>Unity Terrain会自动处理LOD，但如果没有设置邻居关系或高度差距大，会出现裂缝<br />
解决办法：</p>
<ul>
  <li>一定调用<code class="language-plaintext highlighter-rouge">SetNeighbors</code></li>
  <li>保证相邻Terrain的边缘高度一致</li>
  <li>使用LOD抗裂缝策略（如添加额外边界顶点）</li>
</ul>

<h2 id="结合导航烘焙navmesh--terrain">结合导航烘焙（NavMesh + Terrain）</h2>
<p><a href="/posts/2025-06-11-Navigation/">Navigation</a></p>

<h2 id="runtime地形修改voxel地形破坏">Runtime地形修改（Voxel、地形破坏）</h2>

<h3 id="运行时地形修改的主流方案概览">运行时地形修改的主流方案概览</h3>

<table>
  <thead>
    <tr>
      <th>模式</th>
      <th>原理</th>
      <th>优点</th>
      <th>缺点</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>Voxel Terrain</strong></td>
      <td>使用体素数据构建地形并动态生成 Mesh</td>
      <td>灵活，可完全修改、破坏、挖掘</td>
      <td>实现复杂，需要自定义系统</td>
    </tr>
    <tr>
      <td><strong>Custom Mesh Terrain</strong></td>
      <td>自定义网格，允许直接编辑 Mesh 顶点</td>
      <td>控制精细，可用于挤压、凹陷</td>
      <td>不适合大地图或地形细节</td>
    </tr>
    <tr>
      <td><strong>Shader-Based Deformation</strong></td>
      <td>用 Shader 或 Compute Shader 动态修改高度图</td>
      <td>实时效率高，可 GPU 运算</td>
      <td>精度有限，修改不可永久保存</td>
    </tr>
    <tr>
      <td><strong>Unity Terrain Heightmap 修改</strong></td>
      <td>修改 <code class="language-plaintext highlighter-rouge">TerrainData.SetHeights()</code></td>
      <td>保留 Unity Terrain 优势</td>
      <td>修改粒度受限，效率较低</td>
    </tr>
  </tbody>
</table>

<h3 id="方案一体素地形voxel-terrain">方案一：体素地形（Voxel Terrain）</h3>
<p>类似<em>Minecraft</em>风格的可破坏地形</p>

<p>实现流程：<br />
1.创建体素数据结构（3D数组）</p>
<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">byte</span><span class="p">[,,]</span> <span class="n">voxels</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="p">[</span><span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">,</span> <span class="n">depth</span><span class="p">];</span>
</code></pre></div></div>

<p>2.定义每种方块类型（空气、土、石头等）</p>

<p>3.使用Marching Cubes或Greedy Mesh算法生成Mesh</p>

<p>4.实现挖掘、填充逻辑（修改数组，重新生成Mesh）</p>

<p>5.使用Chunk分块机制优化性能</p>

<h3 id="方案二修改unity-terrain高度图setheights">方案二：修改Unity Terrain高度图（SetHeights）</h3>
<p>适用于地形凹陷、爆炸坑、地形塑形</p>

<p><strong>示例</strong></p>
<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">void</span> <span class="nf">DigHole</span><span class="p">(</span><span class="n">Terrain</span> <span class="n">terrain</span><span class="p">,</span> <span class="n">Vector3</span> <span class="n">worldPos</span><span class="p">,</span> <span class="kt">float</span> <span class="n">radius</span><span class="p">,</span> <span class="kt">float</span> <span class="n">depth</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">TerrainData</span> <span class="n">tData</span> <span class="p">=</span> <span class="n">terrain</span><span class="p">.</span><span class="n">terrainData</span><span class="p">;</span>

  <span class="kt">int</span> <span class="n">xRes</span> <span class="p">=</span> <span class="n">tData</span><span class="p">.</span><span class="n">heightmapResolution</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">yRes</span> <span class="p">=</span> <span class="n">tData</span><span class="p">.</span><span class="n">heightmapResolution</span><span class="p">;</span>

  <span class="n">Vector3</span> <span class="n">terrainPos</span> <span class="p">=</span> <span class="n">worldPos</span> <span class="p">=</span> <span class="n">terrain</span><span class="p">.</span><span class="n">transform</span><span class="p">.</span><span class="n">position</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">x</span> <span class="p">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)((</span><span class="n">terrainPos</span><span class="p">.</span><span class="n">x</span> <span class="p">/</span> <span class="n">tData</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">x</span><span class="p">)</span> <span class="p">*</span> <span class="n">xRes</span><span class="p">);</span>
  <span class="kt">int</span> <span class="n">y</span> <span class="p">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)((</span><span class="n">terrainPos</span><span class="p">.</span><span class="n">z</span> <span class="p">/</span> <span class="n">tData</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">z</span><span class="p">)</span> <span class="p">*</span> <span class="n">yRes</span><span class="p">);</span>

  <span class="kt">int</span> <span class="n">r</span> <span class="p">=</span> <span class="n">Mathf</span><span class="p">.</span><span class="nf">RoundToInt</span><span class="p">((</span><span class="n">radius</span> <span class="p">/</span> <span class="n">tData</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">x</span><span class="p">)</span> <span class="p">*</span> <span class="n">xRes</span><span class="p">);</span>
  <span class="kt">float</span><span class="p">[,]</span> <span class="n">heights</span> <span class="p">=</span> <span class="n">tData</span><span class="p">.</span><span class="nf">GetHeights</span><span class="p">(</span><span class="n">x</span> <span class="p">-</span> <span class="n">r</span><span class="p">,</span> <span class="n">y</span> <span class="p">-</span> <span class="n">r</span><span class="p">,</span> <span class="n">r</span> <span class="p">*</span> <span class="m">2</span><span class="p">,</span> <span class="n">r</span> <span class="p">*</span> <span class="m">2</span><span class="p">);</span>

  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">r</span> <span class="p">*</span> <span class="m">2</span><span class="p">;</span> <span class="p">++</span><span class="n">i</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">j</span> <span class="p">&lt;</span> <span class="n">r</span> <span class="p">*</span> <span class="m">2</span><span class="p">;</span> <span class="n">j</span><span class="p">++)</span>
    <span class="p">{</span>
      <span class="kt">float</span> <span class="n">dist</span> <span class="p">=</span> <span class="n">Vector2</span><span class="p">.</span><span class="nf">Distance</span><span class="p">(</span><span class="k">new</span> <span class="nf">Vector2</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">),</span> <span class="k">new</span> <span class="nf">Vector2</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">r</span><span class="p">));</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">dist</span> <span class="p">&lt;</span> <span class="n">r</span><span class="p">)</span> <span class="n">heights</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">]</span> <span class="p">-=</span> <span class="n">depth</span> <span class="p">*</span> <span class="p">(</span><span class="m">1f</span> <span class="p">-</span> <span class="n">dist</span> <span class="p">/</span> <span class="n">r</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="n">tData</span><span class="p">.</span><span class="nf">SetHeights</span><span class="p">(</span><span class="n">x</span> <span class="p">-</span> <span class="n">r</span><span class="p">,</span> <span class="n">y</span> <span class="p">-</span> <span class="n">r</span><span class="p">,</span> <span class="n">heights</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
<p>注意：</p>
<ul>
  <li>每次<code class="language-plaintext highlighter-rouge">SetHeights</code>开销较大，频繁修改可能掉帧</li>
  <li>修改后不会自动更新NavMesh，需要手动<code class="language-plaintext highlighter-rouge">NavMeshSurface.BuildNavMesh()</code></li>
</ul>

<h3 id="方案三自定义mesh地形修改">方案三：自定义Mesh地形修改</h3>
<p>可以用Procedural Mesh创建“可破坏”的Mesh地面，然后直接修改顶点高度</p>

<p>核心点：</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Mesh.vertices</code> + <code class="language-plaintext highlighter-rouge">Mesh.RecalculateNormals()</code></li>
  <li>可用于地形凹陷、打击坑</li>
  <li>可结合Shader实现更复杂视觉反馈</li>
</ul>

<h3 id="gpu地形修改shadercompute-shader">GPU地形修改（Shader/Compute Shader）</h3>
<p>适合需要大量实时修改的场景，如地面波纹、动态地形变化</p>

<p>常用技巧：</p>
<ul>
  <li>通过<code class="language-plaintext highlighter-rouge">RenderTexture</code>存储高度图</li>
  <li>通过Compute Shader修改像素</li>
  <li>在Shader中将高度图应用为<code class="language-plaintext highlighter-rouge">vertex displacement</code></li>
</ul>

<p>可参考：Unity官方例子<code class="language-plaintext highlighter-rouge">GPU Terrain Stamp</code>或Amplify Shader Editor示例</p>

<h2 id="terrain-api">Terrain API</h2>
<h3 id="static-properies">Static Properies</h3>

<table>
  <thead>
    <tr>
      <th>属性名</th>
      <th>中文说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">activeTerrain</code></td>
      <td>当前活动的 Terrain（场景中主地形）</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">activeTerrains</code></td>
      <td>场景中所有激活的 Terrain 列表</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">compressedHolesFormat</code></td>
      <td>压缩后地形洞孔纹理的图形格式</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">compressedHolesTextureFormat</code></td>
      <td>压缩后地形洞孔纹理的纹理格式</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">heightmapFormat</code></td>
      <td>地形高度图的图形格式</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">heightmapRenderTextureFormat</code></td>
      <td>地形高度图的 RenderTextureFormat</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">holesFormat</code></td>
      <td>未压缩的地形洞孔纹理的图形格式</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">holesRenderTextureFormat</code></td>
      <td>地形洞孔纹理的 RenderTextureFormat</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">normalmapFormat</code></td>
      <td>地形法线贴图的图形格式</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">normalmapRenderTextureFormat</code></td>
      <td>地形法线贴图的渲染纹理格式</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">normalmapTextureFormat</code></td>
      <td>地形法线贴图的纹理格式</td>
    </tr>
  </tbody>
</table>

<h3 id="properties">Properties</h3>

<table>
  <thead>
    <tr>
      <th>属性名</th>
      <th>中文说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">allowAutoConnect</code></td>
      <td>是否自动连接邻近地形</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">bakeLightProbesForTrees</code></td>
      <td>是否为树烘焙内部光照探针（仅编辑器）</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">basemapDistance</code></td>
      <td>超过该距离时使用预计算的低分辨率底图</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">bottomNeighbor</code></td>
      <td>下方邻接地形</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">collectDetailPatches</code></td>
      <td>从内存中收集细节贴片</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">deringLightProbesForTrees</code></td>
      <td>去除树上的光照探针振铃（仅编辑器）</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">detailObjectDensity</code></td>
      <td>草和细节对象的密度</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">detailObjectDistance</code></td>
      <td>草和细节对象的最大可视距离</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">drawHeightmap</code></td>
      <td>是否绘制地形几何（高度图）</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">drawInstanced</code></td>
      <td>是否启用 GPU Instancing 渲染地形</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">drawTreesAndFoliage</code></td>
      <td>是否绘制树和细节对象</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">editorRenderFlags</code></td>
      <td>控制地形在编辑器中显示哪些内容</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">enableHeightmapRayTracing</code></td>
      <td>是否启用地形高度图的光线追踪加速结构</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">groupingID</code></td>
      <td>地形自动连接的分组 ID</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">heightmapMaximumLOD</code></td>
      <td>地形最大渲染 LOD 级别</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">heightmapMinimumLODSimplification</code></td>
      <td>最简化的渲染精度</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">heightmapPixelError</code></td>
      <td>LOD 切换时的误差控制</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">ignoreQualitySettings</code></td>
      <td>是否忽略 QualitySettings 中的地形配置</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">keepUnusedRenderingResources</code></td>
      <td>是否在一定帧数后释放未使用的摄像机渲染资源</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">leftNeighbor</code></td>
      <td>左侧邻接地形（X 方向负方向）</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">lightmapIndex</code></td>
      <td>静态光照贴图索引</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">lightmapScaleOffset</code></td>
      <td>静态光照贴图的缩放和偏移</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">materialTemplate</code></td>
      <td>渲染地形使用的材质模板</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">normalmapTexture</code></td>
      <td>从高度图生成的法线贴图</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">patchBoundsMultiplier</code></td>
      <td>地形边界框的缩放倍率</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">preserveTreePrototypeLayers</code></td>
      <td>树实例的图层处理方式</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">realtimeLightmapIndex</code></td>
      <td>实时光照贴图索引</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">realtimeLightmapScaleOffset</code></td>
      <td>实时光照贴图的缩放和偏移</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">reflectionProbeUsage</code></td>
      <td>反射探针使用方式</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">renderingLayerMask</code></td>
      <td>地形渲染器的渲染图层遮罩</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">rightNeighbor</code></td>
      <td>右侧邻接地形（X 方向正方向）</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">shadowCastingMode</code></td>
      <td>地形阴影模式</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">terrainData</code></td>
      <td>地形数据资源，包含高度图、纹理等</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">topNeighbor</code></td>
      <td>上方邻接地形</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">treeBillboardDistance</code></td>
      <td>树木转为 billboard 的距离</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">treeCrossFadeLength</code></td>
      <td>树从 Mesh 到 billboard 的过渡距离</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">treeDistance</code></td>
      <td>树的最大渲染距离</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">treeLODBiasMultiplier</code></td>
      <td>树 LOD 偏差乘数</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">treeMaximumFullLODCount</code></td>
      <td>完整 LOD 树的最大数量</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">treeMotionVectorModeOverride</code></td>
      <td>SpeedTree 的运动矢量渲染模式</td>
    </tr>
  </tbody>
</table>

<h3 id="public-methods">Public Methods</h3>

<table>
  <thead>
    <tr>
      <th>方法名</th>
      <th>中文说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">AddTreeInstance(TreeInstance)</code></td>
      <td>向地形添加一个树实例</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Flush()</code></td>
      <td>强制刷新 Terrain 更改</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">GetClosestReflectionProbes(List)</code></td>
      <td>获取与地形相交的反射探针及其权重</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">GetKeepUnusedCameraRenderingResources()</code></td>
      <td>查询摄像机资源是否被保留</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">GetPosition()</code></td>
      <td>获取地形在世界空间中的位置</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">GetSplatMaterialPropertyBlock()</code></td>
      <td>获取混合材质的参数设置</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">SampleHeight(Vector3)</code></td>
      <td>采样地形在某世界位置的高度</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">SetKeepUnusedCameraRenderingResources(bool)</code></td>
      <td>设置是否保留摄像机的地形资源</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">SetNeighbors(left, top, right, bottom)</code></td>
      <td>设置地形的邻居（用于 LOD 缝合）</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">SetSplatMaterialPropertyBlock()</code></td>
      <td>设置混合材质渲染属性</td>
    </tr>
  </tbody>
</table>

<h3 id="static-methods">Static Methods</h3>

<table>
  <thead>
    <tr>
      <th>方法名</th>
      <th>中文说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">CreateTerrainGameObject(TerrainData)</code></td>
      <td>从 <code class="language-plaintext highlighter-rouge">TerrainData</code> 创建带碰撞器的地形 GameObject</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">GetActiveTerrains(List&lt;Terrain&gt;)</code></td>
      <td>填充一个列表，获取当前激活的所有 Terrain</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">SetConnectivityDirty()</code></td>
      <td>标记当前连接状态为无效（需重新连接）</td>
    </tr>
  </tbody>
</table>

<p><strong>详见<a href="https://docs.unity3d.com/ScriptReference/Terrain.html">UnityScripting Terrain</a></strong></p>]]></content><author><name>ljf12825</name></author><category term="笔记" /><category term="Unity" /><category term="Renderer" /><category term="Unity System" /><category term="Unity Component" /><summary type="html"><![CDATA[在Unity中，Terrain是一个专门用于制作大规模、自然风格场景的强大工具]]></summary></entry><entry><title type="html">TileMap</title><link href="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/TileMap.html" rel="alternate" type="text/html" title="TileMap" /><published>2025-06-01T00:00:00+08:00</published><updated>2025-06-01T00:00:00+08:00</updated><id>http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/TileMap</id><content type="html" xml:base="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/TileMap.html"><![CDATA[]]></content><author><name>ljf12825</name></author><category term="笔记" /><category term="Unity" /><category term="Unity System" /><category term="Unity Component" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Mesh</title><link href="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Mesh.html" rel="alternate" type="text/html" title="Mesh" /><published>2025-06-01T00:00:00+08:00</published><updated>2025-06-01T00:00:00+08:00</updated><id>http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Mesh</id><content type="html" xml:base="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Mesh.html"><![CDATA[<p>Unity中的Mesh（网格）是一切3D模型、地形、角色、道具、甚至某些UI元素的几何基础，是“物体的骨架”<br />
包含顶点、面、法线、UV、颜色等数据，是3D图形渲染的核心单位</p>

<h2 id="mesh的构成">Mesh的构成</h2>

<table>
  <thead>
    <tr>
      <th>数据</th>
      <th>作用</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>顶点（Vertices）</strong></td>
      <td>网格的点，构成形状的基础</td>
    </tr>
    <tr>
      <td><strong>三角形（Triangles）</strong></td>
      <td>每三个顶点组成一个三角面，是渲染最小单元</td>
    </tr>
    <tr>
      <td><strong>法线（Normals）</strong></td>
      <td>每个顶点的方向，用于光照计算</td>
    </tr>
    <tr>
      <td><strong>UV 坐标（UVs）</strong></td>
      <td>纹理坐标，用来决定贴图怎么铺在模型上</td>
    </tr>
    <tr>
      <td><strong>顶点色（Colors）</strong></td>
      <td>每个顶点的颜色，用于特效、调色</td>
    </tr>
    <tr>
      <td><strong>切线（Tangents）</strong></td>
      <td>用于法线贴图的方向辅助向量</td>
    </tr>
  </tbody>
</table>

<p>这些数据最终会交给GPU，进行渲染</p>

<h2 id="mesh在unity中的用途">Mesh在Unity中的用途</h2>

<table>
  <thead>
    <tr>
      <th>用途</th>
      <th>举例</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>渲染模型</td>
      <td>静态模型、角色模型、环境场景</td>
    </tr>
    <tr>
      <td>自定义几何体</td>
      <td>Procedural Mesh（如地形、波浪、水面）</td>
    </tr>
    <tr>
      <td>碰撞体数据</td>
      <td>Mesh Collider 也使用 Mesh</td>
    </tr>
    <tr>
      <td>特效/轨迹</td>
      <td>线性 Mesh（如剑气轨迹、能量波）</td>
    </tr>
    <tr>
      <td>角色换装</td>
      <td>动态换装系统中组合不同 Mesh</td>
    </tr>
  </tbody>
</table>

<h2 id="如何创建操作mesh">如何创建、操作Mesh</h2>
<p>Unity提供<code class="language-plaintext highlighter-rouge">Mesh</code>类，支持自定义几何体</p>

<h3 id="示例创建一个简单三角形mesh">示例：创建一个简单三角形Mesh</h3>
<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Mesh</span> <span class="n">mesh</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Mesh</span><span class="p">();</span>

<span class="n">Vector3</span><span class="p">[]</span> <span class="n">vertices</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Vector3</span><span class="p">[]</span>
<span class="p">{</span>
    <span class="k">new</span> <span class="nf">Vector3</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">),</span>
    <span class="k">new</span> <span class="nf">Vector3</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">0</span><span class="p">),</span>
    <span class="k">new</span> <span class="nf">Vector3</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">)</span>
<span class="p">};</span>

<span class="kt">int</span><span class="p">[]</span> <span class="n">triangles</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">[]</span> <span class="p">{</span><span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">};</span>

<span class="n">mesh</span><span class="p">.</span><span class="n">vertices</span> <span class="p">=</span> <span class="n">vertices</span><span class="p">;</span>
<span class="n">mesh</span><span class="p">.</span><span class="n">triangles</span> <span class="p">=</span> <span class="n">triangles</span><span class="p">;</span>
<span class="n">mesh</span><span class="p">.</span><span class="nf">RecalculateNormals</span><span class="p">();</span> <span class="c1">// 自动生成法线</span>

<span class="n">GetComponent</span><span class="p">&lt;</span><span class="n">MeshFilter</span><span class="p">&gt;().</span><span class="n">mesh</span> <span class="p">=</span> <span class="n">mesh</span><span class="p">;</span>
</code></pre></div></div>
<h2 id="meshfilter-和-meshrenderer">MeshFilter 和 MeshRenderer</h2>
<p>在Unity中，<code class="language-plaintext highlighter-rouge">MeshFilter</code>和<code class="language-plaintext highlighter-rouge">MeshRenderer</code>是构成立体物体（3D模型）渲染的核心组件</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">MeshFilter</code>：提供集合形状（顶点、三角形等）</li>
  <li><code class="language-plaintext highlighter-rouge">MeshRenderer</code>：将形状渲染到屏幕上（使用材质、光照等）</li>
</ul>

<p><img src="/assets/images/MeshFilterandMeshRenderer.jpg" alt="MeshFilterandMeshRenderer" />;</p>

<h3 id="meshfilter提供模型数据">MeshFilter：提供模型数据</h3>
<ul>
  <li>MeshFilter包含一个Mesh对象，这是3D模型的几何体，比如立方体、球体、角色模型等</li>
  <li>这些Mesh是<code class="language-plaintext highlighter-rouge">.fbx</code>、<code class="language-plaintext highlighter-rouge">.obj</code>导入的，或运行时通过代码生成</li>
</ul>

<p>可以通过以下方式获取或赋值Mesh</p>
<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">MeshFilter</span> <span class="n">mf</span> <span class="p">=</span> <span class="n">GetComponenet</span><span class="p">&lt;</span><span class="n">MeshFilter</span><span class="p">&gt;();</span>
<span class="n">Mesh</span> <span class="n">mesh</span> <span class="p">=</span> <span class="n">mf</span><span class="p">.</span><span class="n">mesh</span><span class="p">;</span> <span class="c1">// 当前使用的实例化mesh</span>
<span class="n">mf</span><span class="p">.</span><span class="n">mesh</span> <span class="p">=</span> <span class="n">someOtherMesh</span><span class="p">;</span> <span class="c1">// 替换为新的Mesh</span>
</code></pre></div></div>
<blockquote>
  <p><code class="language-plaintext highlighter-rouge">.mesh</code>是一个实例副本，你修改它不会影响原始资源；<code class="language-plaintext highlighter-rouge">.sharedMesh</code>是共享原始资源</p>
</blockquote>

<h3 id="meshrenderer负责把模型画出来">MeshRenderer：负责把模型画出来</h3>
<ul>
  <li>MeshRenderer负责把<code class="language-plaintext highlighter-rouge">MeshFilter</code>提供的几何体渲染到屏幕上</li>
  <li>控制材质、阴影、光照、剔除、光照探针等参数</li>
</ul>

<h4 id="面板参数">面板参数</h4>
<h5 id="element-0-1">Element 0, 1…</h5>
<ul>
  <li>控制使用哪个材质渲染对应子网格</li>
  <li>通常一个对象只有一个材质，如果是多个SubMesh，会有多个材质槽
适用场景：</li>
  <li>多材质角色：身体/衣服/装备使用不同的材质</li>
  <li>不同部件不同特效：一个材质透明，一个闪光</li>
</ul>

<h5 id="lighting">Lighting</h5>
<p><strong>Cast Shadows(投射阴影)</strong></p>
<ul>
  <li>控制该物体是否想地面等对象投影</li>
  <li>选项：
    <ul>
      <li><code class="language-plaintext highlighter-rouge">On</code>：始终投射阴影</li>
      <li><code class="language-plaintext highlighter-rouge">Off</code>：不投影</li>
      <li><code class="language-plaintext highlighter-rouge">Two Sided</code>：背面也能投影（适用于双面平面）</li>
      <li><code class="language-plaintext highlighter-rouge">Shadows Only</code>：只显示阴影，不渲染模型本体（隐形）</li>
    </ul>
  </li>
</ul>

<p><strong>Receive Shadows(接收阴影)</strong></p>
<ul>
  <li>是否接收其他物体的阴影（比如树被房子挡住时）</li>
  <li>关闭可提升性能，但视觉上可能不真实</li>
</ul>

<h5 id="probes探针相关环境光间接光">Probes（探针相关，环境光/间接光）</h5>
<p>在Unity中，<code class="language-plaintext highlighter-rouge">Probes</code>是一类帮助处理间接光照和环境反射的技术，目的是让动态物体（如角色、道具）在光照和反射效果上看起来更自然，融入环境</p>

<p><strong>为什么需要探针</strong></p>

<p>Unity中有两类光照</p>
<ul>
  <li>直接光照：来自灯光（如Dirctional Light）</li>
  <li>间接光照：来自物体间的反弹、环境照明</li>
</ul>

<p>对于静态物体，Unity可以烘焙光照贴图（Lightmap）来记录间接光照<br />
但动态物体（移动的角色、道具）不能使用烘焙光照贴图，这时候就需要探针来帮它“感受环境的光”</p>

<blockquote>
  <p>探针是一种轻量级采样方式，让动态物体获得类似烘焙光照/环境反射的技术，从而避免使用高开销的实时光照和实时反射</p>
</blockquote>

<p><strong>Light Probes</strong></p>
<ul>
  <li>是否接受光照探针（动态光照采样，用于小物体，如动态角色）</li>
  <li>一般设置为<code class="language-plaintext highlighter-rouge">Blend Probes</code>（自动采样探针）</li>
</ul>

<p><strong>Reflection Probes</strong></p>
<ul>
  <li>是否使用反射探针（环境反射用）</li>
  <li>选项：
    <ul>
      <li><code class="language-plaintext highlighter-rouge">Off</code></li>
      <li><code class="language-plaintext highlighter-rouge">Blend Probes</code>（常用）</li>
      <li><code class="language-plaintext highlighter-rouge">Simple</code>（不混合，只是用最近一个）</li>
    </ul>
  </li>
</ul>

<h5 id="additional-settings附加设置">Additional Settings（附加设置）</h5>
<p><strong>Motion Vectors</strong></p>
<ul>
  <li>控制是否为该物体生成运动矢量（供后处理如动态模糊使用）</li>
  <li>推荐开启：<code class="language-plaintext highlighter-rouge">Per Object Motion</code></li>
</ul>

<p><strong>Lightmap Static</strong></p>
<ul>
  <li>如果你将对象标记为静态，会自动启用Lightmap烘焙支持</li>
  <li>静态光照适用于不动的建筑、地面等</li>
</ul>]]></content><author><name>ljf12825</name></author><category term="笔记" /><category term="Unity" /><category term="Renderer" /><category term="Graphic" /><summary type="html"><![CDATA[Unity中的Mesh（网格）是一切3D模型、地形、角色、道具、甚至某些UI元素的几何基础，是“物体的骨架” 包含顶点、面、法线、UV、颜色等数据，是3D图形渲染的核心单位]]></summary></entry><entry><title type="html">Navigation System</title><link href="http://localhost:4000/posts/2025-06-11-Navigation/" rel="alternate" type="text/html" title="Navigation System" /><published>2025-06-01T00:00:00+08:00</published><updated>2025-06-01T00:00:00+08:00</updated><id>http://localhost:4000/posts/Navigation</id><content type="html" xml:base="http://localhost:4000/posts/2025-06-11-Navigation/"><![CDATA[]]></content><author><name>ljf12825</name></author><category term="笔记" /><category term="Unity" /><category term="Unity System" /><category term="AI" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Import Assets</title><link href="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Import-Assets.html" rel="alternate" type="text/html" title="Import Assets" /><published>2025-06-01T00:00:00+08:00</published><updated>2025-06-01T00:00:00+08:00</updated><id>http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Import-Assets</id><content type="html" xml:base="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Import-Assets.html"><![CDATA[<p>Unity支持多种格式的资源文件，并能自动识别并进行初步处理</p>

<h2 id="资源导入基本流程">资源导入基本流程</h2>
<p><strong>1.将资源文件拖入<code class="language-plaintext highlighter-rouge">Assets</code>目录中（Unity会自动导入）</strong><br />
<strong>2.在Inspector面板中查看导入设置</strong><br />
<strong>3.配置相关参数，比如压缩方式、贴图类型、是否生成碰撞体等</strong><br />
<strong>4.使用资源（拖到场景、作为材质贴图、挂到AudioSource等）</strong></p>

<h2 id="模型">模型</h2>

<h3 id="支持格式">支持格式</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">.fbx</code>推荐</li>
  <li><code class="language-plaintext highlighter-rouge">.obj</code></li>
  <li><code class="language-plaintext highlighter-rouge">.dae</code>（Collada）</li>
  <li><code class="language-plaintext highlighter-rouge">.blend</code>（需要Blender）</li>
</ul>

<h3 id="导入流程">导入流程</h3>
<p>1.拖拽<code class="language-plaintext highlighter-rouge">.fbx</code>文件到<code class="language-plaintext highlighter-rouge">Assets</code>文件夹<br />
2.选中模型文件，查看<code class="language-plaintext highlighter-rouge">Inspector</code>的导入设置</p>
<ul>
  <li>Scale Factor：缩放（一般保持默认）</li>
  <li>Import Animations：是否导入动画</li>
  <li>Import Materials：是否导入材质</li>
  <li>Generate Colliders：是否自动生成碰撞体</li>
</ul>

<h3 id="导入后组成">导入后组成</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Model</code>: 3D网格</li>
  <li><code class="language-plaintext highlighter-rouge">Rig</code>（如果有骨骼）：用于动画绑定</li>
  <li><code class="language-plaintext highlighter-rouge">Animation</code>：包含的动画片段</li>
  <li><code class="language-plaintext highlighter-rouge">Materials</code>：自动生成或关联的材质</li>
</ul>

<h2 id="贴图">贴图</h2>

<h3 id="支持格式-1">支持格式</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">.png</code>、<code class="language-plaintext highlighter-rouge">.jpg</code>、<code class="language-plaintext highlighter-rouge">.tga</code>、<code class="language-plaintext highlighter-rouge">.psd</code>（支持图层）等</li>
</ul>

<h3 id="导入流程-1">导入流程</h3>

<p>1.拖入图片文件
2.在Inspector中设置：</p>
<ul>
  <li>sRGB（Color Texture）：颜色贴图用，法线贴图需取消勾选</li>
  <li>Alpha Is Transparency：如果使用透明通道</li>
  <li>Wrap Mode：Repeat（平铺）或Clamp（拉伸）</li>
  <li>Filter Mode：Bilinear、Trilinear、Point（像素风）</li>
  <li>Compression：高压缩（小体积）还是高质量（清晰）</li>
  <li>Texture Type:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">Default</code>（通用）</li>
      <li><code class="language-plaintext highlighter-rouge">Sprite</code>（用于UI）</li>
      <li><code class="language-plaintext highlighter-rouge">Normal map</code>（法线贴图）</li>
      <li><code class="language-plaintext highlighter-rouge">Lightmap</code>（光照图）</li>
    </ul>
  </li>
</ul>

<h2 id="音频">音频</h2>

<h3 id="支持格式-2">支持格式</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">.mp3</code>（压缩）</li>
  <li><code class="language-plaintext highlighter-rouge">.wav</code>（无损）</li>
  <li><code class="language-plaintext highlighter-rouge">.ogg</code>（高效）</li>
  <li><code class="language-plaintext highlighter-rouge">.aiff</code></li>
</ul>

<h2 id="导入流程-2">导入流程</h2>

<p>1.拖入音频文件<br />
2.在<code class="language-plaintext highlighter-rouge">Inspector</code>中设置：</p>
<ul>
  <li>Load Type：
    <ul>
      <li><code class="language-plaintext highlighter-rouge">Decompress On Load</code>（加载时解压，适合短音效）</li>
      <li><code class="language-plaintext highlighter-rouge">Streaming</code>（边播放边加载，适合背景音乐）</li>
    </ul>
  </li>
  <li>Compression Format:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">Vorbis</code>、<code class="language-plaintext highlighter-rouge">ADPCM</code>、<code class="language-plaintext highlighter-rouge">PCM</code></li>
    </ul>
  </li>
  <li>3D Sound：是否启用3D空间化</li>
  <li>Loop：是否循环播放</li>
</ul>

<blockquote>
  <p><strong>资源组织建议：</strong> 使用好的文件夹结构和命名习惯，可以极大提高开发效率</p>
</blockquote>]]></content><author><name>ljf12825</name></author><category term="笔记" /><category term="Unity" /><summary type="html"><![CDATA[Unity支持多种格式的资源文件，并能自动识别并进行初步处理]]></summary></entry></feed>