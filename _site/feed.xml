<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-06-12T21:43:56+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">ljf12825’s Blog</title><subtitle>Efficient &amp; Elegant</subtitle><author><name>Jeff Lee</name><email>2548278761@qq.com</email></author><entry><title type="html">Unity Profiler</title><link href="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Unity-Profiler.html" rel="alternate" type="text/html" title="Unity Profiler" /><published>2025-06-01T00:00:00+08:00</published><updated>2025-06-01T00:00:00+08:00</updated><id>http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Unity-Profiler</id><content type="html" xml:base="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Unity-Profiler.html"><![CDATA[]]></content><author><name>ljf12825</name></author><category term="笔记" /><category term="Unity" /><category term="Unity Tool" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Thread</title><link href="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Thread.html" rel="alternate" type="text/html" title="Thread" /><published>2025-06-01T00:00:00+08:00</published><updated>2025-06-01T00:00:00+08:00</updated><id>http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Thread</id><content type="html" xml:base="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Thread.html"><![CDATA[<p>Unity中的线程机制和使用方式，包括：</p>
<ul>
  <li>Unity的线程模型概览</li>
  <li>Unity API与线程限制</li>
  <li>在Unity中使用线程的四种方式（Thread/Task/Job System/DOTS）</li>
  <li>回到主线程的方法</li>
</ul>

<h2 id="unity线程模型概览">Unity线程模型概览</h2>
<p>Unity整个运行环境围绕主线程组织，它的执行流程大致如下：</p>
<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">主线程（</span><span class="nt">Unity</span> <span class="nt">Loop</span><span class="err">）：</span>
 <span class="err">├─</span> <span class="nt">Start</span><span class="o">()</span>
 <span class="err">├─</span> <span class="nt">Update</span><span class="o">()</span>
 <span class="err">├─</span> <span class="err">渲染提交</span>
 <span class="err">├─</span> <span class="err">动画更新</span>
 <span class="err">├─</span> <span class="err">物理处理（同步</span> <span class="nt">PhysX</span><span class="err">）</span>
 <span class="err">└─</span> <span class="nt">LateUpdate</span><span class="o">()</span>
</code></pre></div></div>
<p><strong>主线程的作用：</strong></p>
<ul>
  <li>唯一能安全访问大多数Unity API的线程</li>
  <li>游戏逻辑、生命周期函数、事件处理等全部在主线程中执行</li>
</ul>

<h2 id="unity-api的线程限制">Unity API的线程限制</h2>
<blockquote>
  <p>Unity引擎的绝大多数API不是线程安全的，只能在主线程中访问</p>
</blockquote>

<p>常见不可在子线程中调用的内容：</p>

<table>
  <thead>
    <tr>
      <th>类型</th>
      <th>示例</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>场景对象</td>
      <td><code class="language-plaintext highlighter-rouge">transform.position</code>、<code class="language-plaintext highlighter-rouge">gameObject.SetActive()</code></td>
    </tr>
    <tr>
      <td>UI 操作</td>
      <td><code class="language-plaintext highlighter-rouge">Text.text</code>、<code class="language-plaintext highlighter-rouge">Image.sprite</code>、<code class="language-plaintext highlighter-rouge">CanvasGroup.alpha</code></td>
    </tr>
    <tr>
      <td>加载资源</td>
      <td><code class="language-plaintext highlighter-rouge">Resources.Load</code>、<code class="language-plaintext highlighter-rouge">AssetBundle.LoadAsset</code></td>
    </tr>
    <tr>
      <td>UnityEvent</td>
      <td><code class="language-plaintext highlighter-rouge">Invoke()</code>、<code class="language-plaintext highlighter-rouge">AddListener()</code></td>
    </tr>
    <tr>
      <td>摄像机/渲染设置</td>
      <td><code class="language-plaintext highlighter-rouge">Camera.fieldOfView</code>、<code class="language-plaintext highlighter-rouge">RenderSettings.ambientLight</code></td>
    </tr>
  </tbody>
</table>

<h3 id="为什么大多数unity-api不是线程安全的">为什么大多数Unity API不是线程安全的</h3>
<blockquote>
  <p>线程安全是指多个线程同时访问某个资源时，不会出现数据竞争、资源冲突或者状态不一致；
换句话说，线程安全的代码能保证即使多个线程同时调用，也不会导致程序崩溃或出现错误</p>
</blockquote>

<h4 id="1引擎设计的历史和架构">1.引擎设计的历史和架构</h4>
<ul>
  <li>Unity是基于单线程渲染和游戏逻辑设计的引擎</li>
  <li>主线程同时负责游戏逻辑更新、场景管理、物理模拟和渲染指令的提交</li>
  <li>内部实现很多数据结构和资源管理是非并发安全的，没有加锁保护</li>
</ul>

<h4 id="2性能考虑">2.性能考虑</h4>
<ul>
  <li>加锁和同步机制会引入性能开销，尤其在游戏高帧率需求下非常敏感</li>
  <li>Unity为了最大化性能，避免在API层面使用大量锁机制，导致API不是线程安全</li>
  <li>线程安全的实现往往会降低性能，而Unity选择了“主线程访问”策略，性能和复杂度间的平衡</li>
</ul>

<h4 id="3复杂的状态和资源管理">3.复杂的状态和资源管理</h4>
<ul>
  <li>Unity API涉及大量复杂资源（场景、纹理、网格、动画、物理对象等）</li>
  <li>这些资源的状态常常依赖于引擎内部复杂的生命周期管理和渲染管线</li>
  <li>多线程访问同一资源可能导致状态不同步、竞争条件和崩溃</li>
</ul>

<h4 id="4引擎内部很多操作并非原子性">4.引擎内部很多操作并非原子性</h4>
<ul>
  <li>例如<code class="language-plaintext highlighter-rouge">transform.position</code>实际是底层C++引擎中的一个复杂结构体操作</li>
  <li>多线程同时读写可能破坏数据一致性，导致场景物体“错乱”或崩溃</li>
</ul>

<h2 id="unity中使用多线程的四种方式">Unity中使用多线程的四种方式</h2>
<h3 id="1thread类低级方案">1.<code class="language-plaintext highlighter-rouge">Thread</code>类（低级方案）</h3>
<p>适用场景：非常简单的子线程计算任务</p>
<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System.Threading</span><span class="p">;</span>

<span class="k">void</span> <span class="nf">Start</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">Thread</span> <span class="n">t</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Thread</span><span class="p">(()</span> <span class="p">=&gt;{</span>
        <span class="kt">int</span> <span class="n">result</span> <span class="p">=</span> <span class="nf">HeavyCompute</span><span class="p">();</span>
        <span class="n">Debug</span><span class="p">.</span><span class="nf">Log</span><span class="p">(</span><span class="s">"不能再这里操作 Unity API!"</span><span class="p">);</span>
    <span class="p">});</span>
    <span class="n">t</span><span class="p">.</span><span class="nf">Start</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>
<p>缺点：</p>
<ul>
  <li>手动管理生命周期</li>
  <li>无法直接“回主线程”</li>
  <li>不支持返回值</li>
</ul>

<h3 id="2task--asyncawait推荐方式">2.<code class="language-plaintext highlighter-rouge">Task</code> + <code class="language-plaintext highlighter-rouge">async/await</code>（推荐方式）</h3>
<p>适合：异步加载、复杂逻辑封装</p>
<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="k">void</span> <span class="nf">Start</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">Task</span><span class="p">.</span><span class="nf">Run</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="nf">HeavyCompute</span><span class="p">());</span>
    <span class="c1">// 回到主线程，可以安全使用 Unity API</span>
    <span class="n">Debug</span><span class="p">.</span><span class="nf">Log</span><span class="p">(</span><span class="s">$"计算结果：</span><span class="p">{</span><span class="n">result</span><span class="p">}</span><span class="s">"</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
<p>优点：</p>
<ul>
  <li>语法简洁</li>
  <li>自动线程切换</li>
  <li>支持异常处理
注意：</li>
  <li><code class="language-plaintext highlighter-rouge">await</code>后续代码回自动返回主线程（如果是Unity编译器）</li>
</ul>

<h3 id="3unity-job-system高性能并发">3.Unity Job System（高性能并发）</h3>
<p>适用场景：大量数据并发处理（如物理模拟、AI批量计算）</p>
<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Unity.Burst</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Unity.Collections</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Unity.Jobs</span><span class="p">;</span>

<span class="p">[</span><span class="n">BurstCompile</span><span class="p">]</span>
<span class="k">public</span> <span class="k">struct</span> <span class="nc">MyJob</span> <span class="p">:</span> <span class="n">IJob</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="n">NativeArray</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">data</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">void</span> <span class="nf">Execute</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">data</span><span class="p">.</span><span class="n">Length</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span>
            <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="p">=</span> <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="p">*</span> <span class="m">2</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">void</span> <span class="nf">Start</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">NativeArray</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">arr</span> <span class="p">=</span> <span class="k">new</span> <span class="n">NativeArray</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;(</span><span class="m">100</span><span class="p">,</span> <span class="n">Allocator</span><span class="p">.</span><span class="n">TempJob</span><span class="p">);</span>

    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">arr</span><span class="p">.</span><span class="n">Length</span> <span class="p">++</span><span class="n">i</span><span class="p">)</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="p">=</span> <span class="n">i</span><span class="p">;</span>

    <span class="kt">var</span> <span class="n">job</span> <span class="p">=</span> <span class="k">new</span> <span class="n">MyJob</span> <span class="p">{</span> <span class="n">data</span> <span class="p">=</span> <span class="n">arr</span> <span class="p">};</span>
    <span class="n">JobHandle</span> <span class="n">handle</span> <span class="p">=</span> <span class="n">job</span><span class="p">.</span><span class="nf">Schedule</span><span class="p">();</span>
    <span class="n">handle</span><span class="p">.</span><span class="nf">Complete</span><span class="p">();</span>

    <span class="n">Debug</span><span class="p">.</span><span class="nf">Log</span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="m">10</span><span class="p">]);</span>
    <span class="n">arr</span><span class="p">.</span><span class="nf">Dispose</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>
<p>特点：</p>
<ul>
  <li>Job数据结构需使用<code class="language-plaintext highlighter-rouge">NativeArray</code></li>
  <li>不支持引用类型（string, class, GameObject）</li>
  <li>高性能（支持Burst编译器）</li>
</ul>

<h3 id="4unity-dots-ecs--job--burst">4.Unity DOTS （ECS + Job + Burst）</h3>
<p>适用场景：高度并发的大型项目（如模拟类游戏、成千上万个实体）<br />
ECS配合Job System形成完整的数据驱动架构<br />
优点：</p>
<ul>
  <li>极致性能</li>
  <li>自动调度系统和Job</li>
  <li>易于并行化和分布式
缺点：</li>
  <li>和传统GameObject不兼容</li>
</ul>

<h2 id="回到主线程的方法">回到主线程的方法</h2>
<h3 id="场景你在子线程或task中获得数据想更新ui或gameobject">场景：你在子线程或Task中获得数据，想更新UI或GameObject</h3>
<h4 id="方法一使用asyncawait自动切换回主线程">方法一、使用<code class="language-plaintext highlighter-rouge">async/await</code>自动切换回主线程</h4>
<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="k">void</span> <span class="nf">LoadData</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">string</span> <span class="n">json</span> <span class="p">=</span> <span class="k">await</span> <span class="n">Task</span><span class="p">.</span><span class="nf">Run</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">File</span><span class="p">.</span><span class="nf">ReadAllText</span><span class="p">(</span><span class="s">"config.json"</span><span class="p">));</span>
    <span class="n">myText</span><span class="p">.</span><span class="n">text</span> <span class="p">=</span> <span class="n">json</span><span class="p">;</span> <span class="c1">// 主线程</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="方法二自己封装一个主线程执行器">方法二、自己封装一个主线程执行器</h4>
<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">class</span> <span class="nc">MainThreadDispatcher</span> <span class="p">:</span> <span class="n">MonoBehaviour</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="k">static</span> <span class="k">readonly</span> <span class="n">Queue</span><span class="p">&lt;</span><span class="n">Action</span><span class="p">&gt;</span> <span class="n">actions</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Queue</span><span class="p">&lt;</span><span class="n">Action</span><span class="p">&gt;();</span>

    <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Enqueue</span><span class="p">(</span><span class="n">Action</span> <span class="n">action</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">lock</span> <span class="p">(</span><span class="n">actions</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">actions</span><span class="p">.</span><span class="nf">Enqueue</span><span class="p">(</span><span class="n">action</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">void</span> <span class="nf">Update</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">lock</span> <span class="p">(</span><span class="n">actions</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">while</span> <span class="p">(</span><span class="n">actions</span><span class="p">.</span><span class="n">Count</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span>
                <span class="n">actions</span><span class="p">.</span><span class="nf">Dequeue</span><span class="p">()?.</span><span class="nf">Invoke</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>使用：</p>
<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ThreadPool</span><span class="p">.</span><span class="nf">QueueUserWorkItem</span><span class="p">(</span><span class="n">_</span> <span class="p">=&gt;</span> <span class="p">{</span>
    <span class="kt">string</span> <span class="n">data</span> <span class="p">=</span> <span class="nf">HeavyLoad</span><span class="p">();</span>
    <span class="n">MainThreadDispatcher</span><span class="p">.</span><span class="nf">Enqueue</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">myText</span><span class="p">.</span><span class="n">text</span> <span class="p">=</span> <span class="n">data</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>

<h2 id="使用多线程的场景">使用多线程的场景</h2>
<ul>
  <li>重计算任务（如路径寻路、AI、噪声生成）</li>
  <li>网络请求、数据库访问</li>
  <li>文件读写、图片压缩等I/O操作</li>
  <li>海量数据处理（如ECS中的大量实体模型）
    <blockquote>
      <p>主线程外只用于非Unity API的计算，不允许访问Unity对象，执行完毕后记得退回主线程</p>
    </blockquote>
  </li>
</ul>

<h3 id="unity引擎内部是多线程的">Unity引擎内部是多线程的</h3>
<p>虽热大多数逻辑跑在主线程，但Unity引擎内部会使用多线程来提升性能</p>

<table>
  <thead>
    <tr>
      <th>功能</th>
      <th>是否多线程</th>
      <th>说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>PhysX 物理引擎</td>
      <td>多线程</td>
      <td>Unity 会自动并行化处理</td>
    </tr>
    <tr>
      <td>Audio 音频系统</td>
      <td>多线程</td>
      <td>音频解码、播放管理在后台</td>
    </tr>
    <tr>
      <td>渲染管线（SRP）</td>
      <td>多线程</td>
      <td>在某些平台支持多线程提交渲染指令</td>
    </tr>
    <tr>
      <td>Animation 系统</td>
      <td>多线程（部分）</td>
      <td>有些姿态计算在 Job 系统中进行</td>
    </tr>
  </tbody>
</table>]]></content><author><name>ljf12825</name></author><category term="笔记" /><category term="Unity" /><category term="Unity System" /><summary type="html"><![CDATA[Unity中的线程机制和使用方式，包括： Unity的线程模型概览 Unity API与线程限制 在Unity中使用线程的四种方式（Thread/Task/Job System/DOTS） 回到主线程的方法]]></summary></entry><entry><title type="html">Unity NetWork</title><link href="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Unity-NetWork.html" rel="alternate" type="text/html" title="Unity NetWork" /><published>2025-06-01T00:00:00+08:00</published><updated>2025-06-01T00:00:00+08:00</updated><id>http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Unity-NetWork</id><content type="html" xml:base="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Unity-NetWork.html"><![CDATA[]]></content><author><name>ljf12825</name></author><category term="笔记" /><category term="Unity" /><category term="Unity NetWork" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">TileMap</title><link href="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/TileMap.html" rel="alternate" type="text/html" title="TileMap" /><published>2025-06-01T00:00:00+08:00</published><updated>2025-06-01T00:00:00+08:00</updated><id>http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/TileMap</id><content type="html" xml:base="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/TileMap.html"><![CDATA[]]></content><author><name>ljf12825</name></author><category term="笔记" /><category term="Unity" /><category term="Unity System" /><category term="Unity Component" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Terrain</title><link href="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Terrain.html" rel="alternate" type="text/html" title="Terrain" /><published>2025-06-01T00:00:00+08:00</published><updated>2025-06-01T00:00:00+08:00</updated><id>http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Terrain</id><content type="html" xml:base="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Terrain.html"><![CDATA[]]></content><author><name>ljf12825</name></author><category term="笔记" /><category term="Unity" /><category term="Renderer" /><category term="Unity System" /><category term="Unity Component" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Mesh</title><link href="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Mesh.html" rel="alternate" type="text/html" title="Mesh" /><published>2025-06-01T00:00:00+08:00</published><updated>2025-06-01T00:00:00+08:00</updated><id>http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Mesh</id><content type="html" xml:base="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Mesh.html"><![CDATA[<p>Unity中的Mesh（网格）是一切3D模型、地形、角色、道具、甚至某些UI元素的几何基础，是“物体的骨架”<br />
包含顶点、面、法线、UV、颜色等数据，是3D图形渲染的核心单位</p>

<h2 id="mesh的构成">Mesh的构成</h2>

<table>
  <thead>
    <tr>
      <th>数据</th>
      <th>作用</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>顶点（Vertices）</strong></td>
      <td>网格的点，构成形状的基础</td>
    </tr>
    <tr>
      <td><strong>三角形（Triangles）</strong></td>
      <td>每三个顶点组成一个三角面，是渲染最小单元</td>
    </tr>
    <tr>
      <td><strong>法线（Normals）</strong></td>
      <td>每个顶点的方向，用于光照计算</td>
    </tr>
    <tr>
      <td><strong>UV 坐标（UVs）</strong></td>
      <td>纹理坐标，用来决定贴图怎么铺在模型上</td>
    </tr>
    <tr>
      <td><strong>顶点色（Colors）</strong></td>
      <td>每个顶点的颜色，用于特效、调色</td>
    </tr>
    <tr>
      <td><strong>切线（Tangents）</strong></td>
      <td>用于法线贴图的方向辅助向量</td>
    </tr>
  </tbody>
</table>

<p>这些数据最终会交给GPU，进行渲染</p>

<h2 id="mesh在unity中的用途">Mesh在Unity中的用途</h2>

<table>
  <thead>
    <tr>
      <th>用途</th>
      <th>举例</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>渲染模型</td>
      <td>静态模型、角色模型、环境场景</td>
    </tr>
    <tr>
      <td>自定义几何体</td>
      <td>Procedural Mesh（如地形、波浪、水面）</td>
    </tr>
    <tr>
      <td>碰撞体数据</td>
      <td>Mesh Collider 也使用 Mesh</td>
    </tr>
    <tr>
      <td>特效/轨迹</td>
      <td>线性 Mesh（如剑气轨迹、能量波）</td>
    </tr>
    <tr>
      <td>角色换装</td>
      <td>动态换装系统中组合不同 Mesh</td>
    </tr>
  </tbody>
</table>

<h2 id="如何创建操作mesh">如何创建、操作Mesh</h2>
<p>Unity提供<code class="language-plaintext highlighter-rouge">Mesh</code>类，支持自定义几何体</p>

<h3 id="示例创建一个简单三角形mesh">示例：创建一个简单三角形Mesh</h3>
<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Mesh</span> <span class="n">mesh</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Mesh</span><span class="p">();</span>

<span class="n">Vector3</span><span class="p">[]</span> <span class="n">vertices</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Vector3</span><span class="p">[]</span>
<span class="p">{</span>
    <span class="k">new</span> <span class="nf">Vector3</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">),</span>
    <span class="k">new</span> <span class="nf">Vector3</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">0</span><span class="p">),</span>
    <span class="k">new</span> <span class="nf">Vector3</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">)</span>
<span class="p">};</span>

<span class="kt">int</span><span class="p">[]</span> <span class="n">triangles</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">[]</span> <span class="p">{</span><span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">};</span>

<span class="n">mesh</span><span class="p">.</span><span class="n">vertices</span> <span class="p">=</span> <span class="n">vertices</span><span class="p">;</span>
<span class="n">mesh</span><span class="p">.</span><span class="n">triangles</span> <span class="p">=</span> <span class="n">triangles</span><span class="p">;</span>
<span class="n">mesh</span><span class="p">.</span><span class="nf">RecalculateNormals</span><span class="p">();</span> <span class="c1">// 自动生成法线</span>

<span class="n">GetComponent</span><span class="p">&lt;</span><span class="n">MeshFilter</span><span class="p">&gt;().</span><span class="n">mesh</span> <span class="p">=</span> <span class="n">mesh</span><span class="p">;</span>
</code></pre></div></div>
<h2 id="meshfilter-和-meshrenderer">MeshFilter 和 MeshRenderer</h2>
<p>在Unity中，<code class="language-plaintext highlighter-rouge">MeshFilter</code>和<code class="language-plaintext highlighter-rouge">MeshRenderer</code>是构成立体物体（3D模型）渲染的核心组件</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">MeshFilter</code>：提供集合形状（顶点、三角形等）</li>
  <li><code class="language-plaintext highlighter-rouge">MeshRenderer</code>：将形状渲染到屏幕上（使用材质、光照等）</li>
</ul>

<p><img src="/assets/images/MeshFilterandMeshRenderer.jpg" alt="MeshFilterandMeshRenderer" />;</p>

<h3 id="meshfilter提供模型数据">MeshFilter：提供模型数据</h3>
<ul>
  <li>MeshFilter包含一个Mesh对象，这是3D模型的几何体，比如立方体、球体、角色模型等</li>
  <li>这些Mesh是<code class="language-plaintext highlighter-rouge">.fbx</code>、<code class="language-plaintext highlighter-rouge">.obj</code>导入的，或运行时通过代码生成</li>
</ul>

<p>可以通过以下方式获取或赋值Mesh</p>
<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">MeshFilter</span> <span class="n">mf</span> <span class="p">=</span> <span class="n">GetComponenet</span><span class="p">&lt;</span><span class="n">MeshFilter</span><span class="p">&gt;();</span>
<span class="n">Mesh</span> <span class="n">mesh</span> <span class="p">=</span> <span class="n">mf</span><span class="p">.</span><span class="n">mesh</span><span class="p">;</span> <span class="c1">// 当前使用的实例化mesh</span>
<span class="n">mf</span><span class="p">.</span><span class="n">mesh</span> <span class="p">=</span> <span class="n">someOtherMesh</span><span class="p">;</span> <span class="c1">// 替换为新的Mesh</span>
</code></pre></div></div>
<blockquote>
  <p><code class="language-plaintext highlighter-rouge">.mesh</code>是一个实例副本，你修改它不会影响原始资源；<code class="language-plaintext highlighter-rouge">.sharedMesh</code>是共享原始资源</p>
</blockquote>

<h3 id="meshrenderer负责把模型画出来">MeshRenderer：负责把模型画出来</h3>
<ul>
  <li>MeshRenderer负责把<code class="language-plaintext highlighter-rouge">MeshFilter</code>提供的几何体渲染到屏幕上</li>
  <li>控制材质、阴影、光照、剔除、光照探针等参数</li>
</ul>

<h4 id="面板参数">面板参数</h4>
<h5 id="element-0-1">Element 0, 1…</h5>
<ul>
  <li>控制使用哪个材质渲染对应子网格</li>
  <li>通常一个对象只有一个材质，如果是多个SubMesh，会有多个材质槽
适用场景：</li>
  <li>多材质角色：身体/衣服/装备使用不同的材质</li>
  <li>不同部件不同特效：一个材质透明，一个闪光</li>
</ul>

<h5 id="lighting">Lighting</h5>
<p><strong>Cast Shadows(投射阴影)</strong></p>
<ul>
  <li>控制该物体是否想地面等对象投影</li>
  <li>选项：
    <ul>
      <li><code class="language-plaintext highlighter-rouge">On</code>：始终投射阴影</li>
      <li><code class="language-plaintext highlighter-rouge">Off</code>：不投影</li>
      <li><code class="language-plaintext highlighter-rouge">Two Sided</code>：背面也能投影（适用于双面平面）</li>
      <li><code class="language-plaintext highlighter-rouge">Shadows Only</code>：只显示阴影，不渲染模型本体（隐形）</li>
    </ul>
  </li>
</ul>

<p><strong>Receive Shadows(接收阴影)</strong></p>
<ul>
  <li>是否接收其他物体的阴影（比如树被房子挡住时）</li>
  <li>关闭可提升性能，但视觉上可能不真实</li>
</ul>

<h5 id="probes探针相关环境光间接光">Probes（探针相关，环境光/间接光）</h5>
<p>在Unity中，<code class="language-plaintext highlighter-rouge">Probes</code>是一类帮助处理间接光照和环境反射的技术，目的是让动态物体（如角色、道具）在光照和反射效果上看起来更自然，融入环境</p>

<p><strong>为什么需要探针</strong></p>

<p>Unity中有两类光照</p>
<ul>
  <li>直接光照：来自灯光（如Dirctional Light）</li>
  <li>间接光照：来自物体间的反弹、环境照明</li>
</ul>

<p>对于静态物体，Unity可以烘焙光照贴图（Lightmap）来记录间接光照<br />
但动态物体（移动的角色、道具）不能使用烘焙光照贴图，这时候就需要探针来帮它“感受环境的光”</p>

<blockquote>
  <p>探针是一种轻量级采样方式，让动态物体获得类似烘焙光照/环境反射的技术，从而避免使用高开销的实时光照和实时反射</p>
</blockquote>

<p><strong>Light Probes</strong></p>
<ul>
  <li>是否接受光照探针（动态光照采样，用于小物体，如动态角色）</li>
  <li>一般设置为<code class="language-plaintext highlighter-rouge">Blend Probes</code>（自动采样探针）</li>
</ul>

<p><strong>Reflection Probes</strong></p>
<ul>
  <li>是否使用反射探针（环境反射用）</li>
  <li>选项：
    <ul>
      <li><code class="language-plaintext highlighter-rouge">Off</code></li>
      <li><code class="language-plaintext highlighter-rouge">Blend Probes</code>（常用）</li>
      <li><code class="language-plaintext highlighter-rouge">Simple</code>（不混合，只是用最近一个）</li>
    </ul>
  </li>
</ul>

<h5 id="additional-settings附加设置">Additional Settings（附加设置）</h5>
<p><strong>Motion Vectors</strong></p>
<ul>
  <li>控制是否为该物体生成运动矢量（供后处理如动态模糊使用）</li>
  <li>推荐开启：<code class="language-plaintext highlighter-rouge">Per Object Motion</code></li>
</ul>

<p><strong>Lightmap Static</strong></p>
<ul>
  <li>如果你将对象标记为静态，会自动启用Lightmap烘焙支持</li>
  <li>静态光照适用于不动的建筑、地面等</li>
</ul>]]></content><author><name>ljf12825</name></author><category term="笔记" /><category term="Unity" /><category term="Renderer" /><category term="Graphic" /><summary type="html"><![CDATA[Unity中的Mesh（网格）是一切3D模型、地形、角色、道具、甚至某些UI元素的几何基础，是“物体的骨架” 包含顶点、面、法线、UV、颜色等数据，是3D图形渲染的核心单位]]></summary></entry><entry><title type="html">Navigation System</title><link href="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Navigation.html" rel="alternate" type="text/html" title="Navigation System" /><published>2025-06-01T00:00:00+08:00</published><updated>2025-06-01T00:00:00+08:00</updated><id>http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Navigation</id><content type="html" xml:base="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Navigation.html"><![CDATA[]]></content><author><name>ljf12825</name></author><category term="笔记" /><category term="Unity" /><category term="Unity System" /><category term="AI" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Layout</title><link href="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Layout.html" rel="alternate" type="text/html" title="Layout" /><published>2025-06-01T00:00:00+08:00</published><updated>2025-06-01T00:00:00+08:00</updated><id>http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Layout</id><content type="html" xml:base="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Layout.html"><![CDATA[]]></content><author><name>ljf12825</name></author><category term="笔记" /><category term="Unity" /><category term="Unity System" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Import Assets</title><link href="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Import-Assets.html" rel="alternate" type="text/html" title="Import Assets" /><published>2025-06-01T00:00:00+08:00</published><updated>2025-06-01T00:00:00+08:00</updated><id>http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Import-Assets</id><content type="html" xml:base="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Import-Assets.html"><![CDATA[<p>Unity支持多种格式的资源文件，并能自动识别并进行初步处理</p>

<h2 id="资源导入基本流程">资源导入基本流程</h2>
<p><strong>1.将资源文件拖入<code class="language-plaintext highlighter-rouge">Assets</code>目录中（Unity会自动导入）</strong><br />
<strong>2.在Inspector面板中查看导入设置</strong><br />
<strong>3.配置相关参数，比如压缩方式、贴图类型、是否生成碰撞体等</strong><br />
<strong>4.使用资源（拖到场景、作为材质贴图、挂到AudioSource等）</strong></p>

<h2 id="模型">模型</h2>

<h3 id="支持格式">支持格式</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">.fbx</code>推荐</li>
  <li><code class="language-plaintext highlighter-rouge">.obj</code></li>
  <li><code class="language-plaintext highlighter-rouge">.dae</code>（Collada）</li>
  <li><code class="language-plaintext highlighter-rouge">.blend</code>（需要Blender）</li>
</ul>

<h3 id="导入流程">导入流程</h3>
<p>1.拖拽<code class="language-plaintext highlighter-rouge">.fbx</code>文件到<code class="language-plaintext highlighter-rouge">Assets</code>文件夹<br />
2.选中模型文件，查看<code class="language-plaintext highlighter-rouge">Inspector</code>的导入设置</p>
<ul>
  <li>Scale Factor：缩放（一般保持默认）</li>
  <li>Import Animations：是否导入动画</li>
  <li>Import Materials：是否导入材质</li>
  <li>Generate Colliders：是否自动生成碰撞体</li>
</ul>

<h3 id="导入后组成">导入后组成</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Model</code>: 3D网格</li>
  <li><code class="language-plaintext highlighter-rouge">Rig</code>（如果有骨骼）：用于动画绑定</li>
  <li><code class="language-plaintext highlighter-rouge">Animation</code>：包含的动画片段</li>
  <li><code class="language-plaintext highlighter-rouge">Materials</code>：自动生成或关联的材质</li>
</ul>

<h2 id="贴图">贴图</h2>

<h3 id="支持格式-1">支持格式</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">.png</code>、<code class="language-plaintext highlighter-rouge">.jpg</code>、<code class="language-plaintext highlighter-rouge">.tga</code>、<code class="language-plaintext highlighter-rouge">.psd</code>（支持图层）等</li>
</ul>

<h3 id="导入流程-1">导入流程</h3>

<p>1.拖入图片文件
2.在Inspector中设置：</p>
<ul>
  <li>sRGB（Color Texture）：颜色贴图用，法线贴图需取消勾选</li>
  <li>Alpha Is Transparency：如果使用透明通道</li>
  <li>Wrap Mode：Repeat（平铺）或Clamp（拉伸）</li>
  <li>Filter Mode：Bilinear、Trilinear、Point（像素风）</li>
  <li>Compression：高压缩（小体积）还是高质量（清晰）</li>
  <li>Texture Type:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">Default</code>（通用）</li>
      <li><code class="language-plaintext highlighter-rouge">Sprite</code>（用于UI）</li>
      <li><code class="language-plaintext highlighter-rouge">Normal map</code>（法线贴图）</li>
      <li><code class="language-plaintext highlighter-rouge">Lightmap</code>（光照图）</li>
    </ul>
  </li>
</ul>

<h2 id="音频">音频</h2>

<h3 id="支持格式-2">支持格式</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">.mp3</code>（压缩）</li>
  <li><code class="language-plaintext highlighter-rouge">.wav</code>（无损）</li>
  <li><code class="language-plaintext highlighter-rouge">.ogg</code>（高效）</li>
  <li><code class="language-plaintext highlighter-rouge">.aiff</code></li>
</ul>

<h2 id="导入流程-2">导入流程</h2>

<p>1.拖入音频文件<br />
2.在<code class="language-plaintext highlighter-rouge">Inspector</code>中设置：</p>
<ul>
  <li>Load Type：
    <ul>
      <li><code class="language-plaintext highlighter-rouge">Decompress On Load</code>（加载时解压，适合短音效）</li>
      <li><code class="language-plaintext highlighter-rouge">Streaming</code>（边播放边加载，适合背景音乐）</li>
    </ul>
  </li>
  <li>Compression Format:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">Vorbis</code>、<code class="language-plaintext highlighter-rouge">ADPCM</code>、<code class="language-plaintext highlighter-rouge">PCM</code></li>
    </ul>
  </li>
  <li>3D Sound：是否启用3D空间化</li>
  <li>Loop：是否循环播放</li>
</ul>

<blockquote>
  <p><strong>资源组织建议：</strong> 使用好的文件夹结构和命名习惯，可以极大提高开发效率</p>
</blockquote>]]></content><author><name>ljf12825</name></author><category term="笔记" /><category term="Unity" /><summary type="html"><![CDATA[Unity支持多种格式的资源文件，并能自动识别并进行初步处理]]></summary></entry><entry><title type="html">Layer</title><link href="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Layer.html" rel="alternate" type="text/html" title="Layer" /><published>2025-06-01T00:00:00+08:00</published><updated>2025-06-01T00:00:00+08:00</updated><id>http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Layer</id><content type="html" xml:base="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Layer.html"><![CDATA[<p>在Unity中，Layer是要给非常重要的系统<br />
它主要用于：</p>
<ul>
  <li>控制物体的渲染与相机的可见性</li>
  <li>控制物理碰撞（配合Layer Collision Matrix）</li>
  <li>通过脚本进行物体分类和筛选</li>
</ul>

<h2 id="什么是layer">什么是Layer</h2>

<p>Layer是给GameObject打的“标签”，但它和<code class="language-plaintext highlighter-rouge">Tag</code>不一样，Layer是用于功能性控制的，特别在：</p>
<ul>
  <li>摄像机的Culling Mask</li>
  <li>光照影响（Light Culling）</li>
  <li>物理碰撞（Physics Layer）</li>
  <li>射线检测（Raycast Layer）</li>
</ul>

<h2 id="layer的使用场景">Layer的使用场景</h2>
<h3 id="1摄像机视野控制culling-mask">1.摄像机视野控制（Culling Mask）</h3>
<p>在Camera组件中，你可以设置</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Culling Mask -&gt; 选择哪些Layer可以被该相机看到
</code></pre></div></div>

<p><strong>用途：</strong></p>
<ul>
  <li>UI相机只看UI层</li>
  <li>小地图相机只看敌人层</li>
  <li>分屏镜头每个只看自己的部分</li>
</ul>

<h3 id="2物理碰撞控制layer-collision-matrix">2.物理碰撞控制（Layer Collision Matrix）</h3>
<p>在菜单中：</p>

<div class="language-nginx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">Edit</span> <span class="s">-&gt;</span> <span class="s">Project</span> <span class="s">Settings</span> <span class="s">-&gt;</span> <span class="s">Physics</span>
</code></pre></div></div>

<p>你可以看到Layer Collision Matrix，它控制：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>哪些Layer和哪些Layer能发生物理碰撞
</code></pre></div></div>

<p><strong>用途：</strong></p>
<ul>
  <li>玩家层与敌人层可以碰撞，但不和自身碰撞</li>
  <li>子弹不撞自己</li>
  <li>角色不被UI的Collider打断</li>
</ul>

<h3 id="3射线检测">3.射线检测</h3>
<p>可以通过Layer来控制射线是否命中某个对象</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">layerMask</span> <span class="p">=</span> <span class="m">1</span> <span class="p">&lt;&lt;</span> <span class="n">LayerMask</span><span class="p">.</span><span class="nf">NameToLayer</span><span class="p">(</span><span class="s">"Enemy"</span><span class="p">);</span>
<span class="k">if</span> <span class="p">(</span><span class="n">Physics</span><span class="p">.</span><span class="nf">Raycast</span><span class="p">(</span><span class="n">ray</span><span class="p">,</span> <span class="k">out</span> <span class="n">hit</span><span class="p">,</span> <span class="m">100f</span><span class="p">,</span> <span class="n">layerMask</span><span class="p">))</span> <span class="n">Debug</span><span class="p">.</span><span class="nf">Log</span><span class="p">(</span><span class="s">"Hit enemy"</span><span class="p">);</span>
</code></pre></div></div>

<p>也可以多层合并：</p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">mask</span> <span class="p">=</span> <span class="p">(</span><span class="m">1</span> <span class="p">&lt;&lt;</span> <span class="n">LayerMask</span><span class="p">.</span><span class="nf">NameToLayer</span><span class="p">(</span><span class="s">"Enemy"</span><span class="p">))</span> <span class="p">|</span> <span class="p">(</span><span class="m">1</span> <span class="p">&lt;&lt;</span> <span class="n">LayerMask</span><span class="p">.</span><span class="nf">NameToLayer</span><span class="p">(</span><span class="s">"NPC"</span><span class="p">));</span>
</code></pre></div></div>
<h2 id="内置与自定义layer">内置与自定义Layer</h2>

<h3 id="内置layerunity默认的">内置Layer（Unity默认的）</h3>

<table>
  <thead>
    <tr>
      <th>编号</th>
      <th>名称</th>
      <th>说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>Default</td>
      <td>默认层</td>
    </tr>
    <tr>
      <td>4</td>
      <td>Water</td>
      <td>水体特效</td>
    </tr>
    <tr>
      <td>5</td>
      <td>UI</td>
      <td>UI 专用</td>
    </tr>
  </tbody>
</table>

<h3 id="自定义layer">自定义Layer</h3>
<p>Unity允许你最多使用32个Layer（编号 0~31），其中前几个是保留的<br />
自定义方式：</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">选中</span> <span class="n">GameObject</span> <span class="o">-&gt;</span> <span class="n">Inspector</span> <span class="o">-&gt;</span> <span class="n">Layer</span> <span class="o">-&gt;</span> <span class="k">Add</span> <span class="n">Layer</span><span class="p">...</span>
</code></pre></div></div>
<p>添加后可为GameObject设置：</p>
<div class="language-nginx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">Layer</span> <span class="s">-&gt;</span> <span class="s">你刚添加的层名</span>
</code></pre></div></div>
<h2 id="layer与tag的区别">Layer与Tag的区别</h2>

<table>
  <thead>
    <tr>
      <th>特性</th>
      <th>Layer</th>
      <th>Tag</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>数量限制</td>
      <td>最多 32 个</td>
      <td>无限制</td>
    </tr>
    <tr>
      <td>用于渲染控制</td>
      <td>✅</td>
      <td>❌</td>
    </tr>
    <tr>
      <td>用于物理控制</td>
      <td>✅</td>
      <td>❌</td>
    </tr>
    <tr>
      <td>用于分类查找</td>
      <td>有限制（用 LayerMask）</td>
      <td>✅（用 CompareTag 等）</td>
    </tr>
    <tr>
      <td>性能优化</td>
      <td>✅（用于剔除、射线过滤）</td>
      <td>❌</td>
    </tr>
  </tbody>
</table>

<h3 id="建议">建议</h3>
<ul>
  <li>给每种功能的对象分配专属Layer</li>
  <li>摄像机、光源、UI、Trigger检测都应依赖Layer控制逻辑</li>
</ul>]]></content><author><name>ljf12825</name></author><category term="笔记" /><category term="Unity" /><category term="Unity System" /><summary type="html"><![CDATA[在Unity中，Layer是要给非常重要的系统 它主要用于： 控制物体的渲染与相机的可见性 控制物理碰撞（配合Layer Collision Matrix） 通过脚本进行物体分类和筛选]]></summary></entry></feed>