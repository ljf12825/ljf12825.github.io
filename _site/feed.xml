<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-07-10T15:40:55+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">ljf12825’s Blog</title><subtitle>Efficient &amp; Elegant</subtitle><author><name>Jeff Lee</name><email>2548278761@qq.com</email></author><entry><title type="html">Unity Rendering Principle</title><link href="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Unity-Rendering-Principle.html" rel="alternate" type="text/html" title="Unity Rendering Principle" /><published>2025-06-01T00:00:00+08:00</published><updated>2025-06-01T00:00:00+08:00</updated><id>http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Unity-Rendering-Principle</id><content type="html" xml:base="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Unity-Rendering-Principle.html"><![CDATA[]]></content><author><name>ljf12825</name></author><category term="笔记" /><category term="Unity" /><category term="Render" /><category term="Graphics" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Character Controller</title><link href="http://localhost:4000/posts/2025-06-07-Character-Controller/" rel="alternate" type="text/html" title="Character Controller" /><published>2025-06-01T00:00:00+08:00</published><updated>2025-06-01T00:00:00+08:00</updated><id>http://localhost:4000/posts/Character-Controller</id><content type="html" xml:base="http://localhost:4000/posts/2025-06-07-Character-Controller/"><![CDATA[<p>Character Controller是专为角色移动设计的物理组件，适合用于第一人称、第三人称角色控制，尤其适合需要“脚贴地”“走坡不滑”的场景<br />
它和Rigidbody不同，不依赖物理引擎施加力，而是手动控制角色移动的逻辑，更稳定、精准、游戏性更强</p>

<h2 id="character-controller组件概览">Character Controller组件概览</h2>
<p>它本质是一个内置Capsule Collider + 内部碰撞处理器，支持走地、上坡、碰撞、阻挡等功能</p>

<p><img src="/assets/images/CharacterControllerPanel.jpg" alt="CharacterControllerPanel" /></p>

<p><strong>主要属性</strong></p>

<table>
  <thead>
    <tr>
      <th>属性</th>
      <th>描述</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>Center</strong></td>
      <td>控制胶囊体中心位置</td>
    </tr>
    <tr>
      <td><strong>Radius</strong></td>
      <td>胶囊体的半径</td>
    </tr>
    <tr>
      <td><strong>Height</strong></td>
      <td>胶囊体高度</td>
    </tr>
    <tr>
      <td><strong>Slope Limit</strong></td>
      <td>可行走的最大坡度角（超过会滑下来）</td>
    </tr>
    <tr>
      <td><strong>Step Offset</strong></td>
      <td>可“跨越”的台阶高度</td>
    </tr>
    <tr>
      <td><strong>Skin Width</strong></td>
      <td>贴地/贴墙容差，过小会穿透，过大会卡住</td>
    </tr>
    <tr>
      <td><strong>Min Move Distance</strong></td>
      <td>小于这个值的移动会被忽略</td>
    </tr>
  </tbody>
</table>

<p><a href="https://docs.unity3d.com/Manual/class-CharacterController.html">UnityManual CharacterController</a></p>

<h3 id="常用方法">常用方法</h3>
<p><code class="language-plaintext highlighter-rouge">Move(Vector3 motion)</code><br />
移动角色，内部会自动处理碰撞，返回碰撞信息</p>
<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">controller</span><span class="p">.</span><span class="nf">Move</span><span class="p">(</span><span class="n">Vector3</span> <span class="n">motion</span> <span class="p">*</span> <span class="n">Time</span><span class="p">.</span><span class="n">deltaTime</span><span class="p">);</span>
</code></pre></div></div>
<blockquote>
  <p>支持斜坡、台阶检测、滑动、墙体推开等逻辑</p>
</blockquote>

<p><code class="language-plaintext highlighter-rouge">SimpleMobe(Vector3 motion)</code><br />
简化版移动，自动应用重力，不需要乘以<code class="language-plaintext highlighter-rouge">Time.deltaTime</code></p>
<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">controller</span><span class="p">.</span><span class="nf">SimpleMove</span><span class="p">(</span><span class="k">new</span> <span class="nf">Vector3</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="n">z</span><span class="p">));</span>
</code></pre></div></div>
<p>适合简单控制，不建议用于精细角色控制</p>

<h3 id="示例">示例</h3>
<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">class</span> <span class="nc">PlayerMove</span> <span class="p">:</span> <span class="n">MonoBehaviour</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="kt">float</span> <span class="n">speed</span> <span class="p">=</span> <span class="m">5f</span><span class="p">;</span>
    <span class="k">public</span> <span class="kt">float</span> <span class="n">gravity</span> <span class="p">=</span> <span class="p">-</span><span class="m">9.81f</span><span class="p">;</span>
    <span class="k">public</span> <span class="kt">float</span> <span class="n">jumpHeight</span> <span class="p">=</span> <span class="m">1.5f</span><span class="p">;</span>

    <span class="k">private</span> <span class="n">CharacterController</span> <span class="n">controller</span><span class="p">;</span>
    <span class="k">private</span> <span class="n">Vector3</span> <span class="n">velocity</span><span class="p">;</span>
    <span class="k">private</span> <span class="kt">bool</span> <span class="n">isGrounded</span><span class="p">;</span>

    <span class="k">public</span> <span class="n">Transform</span> <span class="n">groundCheck</span><span class="p">;</span>
    <span class="k">public</span> <span class="kt">float</span> <span class="n">groundDistance</span> <span class="p">=</span> <span class="m">0.4f</span><span class="p">;</span>
    <span class="k">public</span> <span class="n">LayerMask</span> <span class="n">groundMask</span><span class="p">;</span>

    <span class="k">void</span> <span class="nf">Start</span><span class="p">()</span> <span class="p">=&gt;</span> <span class="n">controller</span> <span class="p">=</span> <span class="n">GetComponent</span><span class="p">&lt;</span><span class="n">CharacterController</span><span class="p">&gt;();</span>

    <span class="n">voie</span> <span class="nf">Update</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">isGrounded</span> <span class="p">=</span> <span class="n">Physics</span><span class="p">.</span><span class="nf">CheckSphere</span><span class="p">(</span><span class="n">groundCheck</span><span class="p">.</span><span class="n">position</span><span class="p">,</span> <span class="n">groundDistance</span><span class="p">,</span> <span class="n">groundMask</span><span class="p">);</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">isGrounded</span> <span class="p">&amp;&amp;</span> <span class="n">velocity</span><span class="p">.</span><span class="n">y</span> <span class="p">&lt;</span> <span class="m">0</span><span class="p">)</span> <span class="n">velocity</span><span class="p">.</span><span class="n">y</span> <span class="p">=</span> <span class="p">-</span><span class="m">2f</span><span class="p">;</span>

        <span class="kt">float</span> <span class="n">x</span> <span class="p">=</span> <span class="n">Input</span><span class="p">.</span><span class="nf">GetAxis</span><span class="p">(</span><span class="s">"Horizontal"</span><span class="p">);</span>
        <span class="kt">float</span> <span class="n">z</span> <span class="p">=</span> <span class="n">Input</span><span class="p">.</span><span class="nf">GetAxis</span><span class="p">(</span><span class="s">"Vertical"</span><span class="p">);</span>

        <span class="n">Vector3</span> <span class="n">move</span> <span class="p">=</span> <span class="n">transform</span><span class="p">.</span><span class="n">right</span> <span class="p">*</span> <span class="n">x</span> <span class="p">+</span> <span class="n">transform</span><span class="p">.</span><span class="n">forward</span> <span class="p">*</span> <span class="n">z</span><span class="p">;</span>

        <span class="n">controller</span><span class="p">.</span><span class="nf">Move</span><span class="p">(</span><span class="n">move</span> <span class="p">*</span> <span class="n">speed</span> <span class="p">*</span> <span class="n">Time</span><span class="p">.</span><span class="n">deltaTime</span><span class="p">);</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">Input</span><span class="p">.</span><span class="nf">GetButtonDown</span><span class="p">(</span><span class="s">"Jump"</span><span class="p">)</span> <span class="p">&amp;&amp;</span> <span class="n">isGrounded</span><span class="p">)</span>
            <span class="n">velocity</span><span class="p">.</span><span class="n">y</span> <span class="p">=</span> <span class="n">Mathf</span><span class="p">.</span><span class="nf">Sqrt</span><span class="p">(</span><span class="n">jumpHeight</span> <span class="p">*</span> <span class="p">-</span><span class="m">2f</span> <span class="p">*</span> <span class="n">gravity</span><span class="p">);</span>
        
        <span class="n">velocity</span><span class="p">.</span><span class="n">y</span> <span class="p">+=</span> <span class="n">gravity</span> <span class="p">*</span> <span class="n">Time</span><span class="p">.</span><span class="n">deltaTime</span><span class="p">;</span>
        <span class="n">controller</span><span class="p">.</span><span class="nf">Move</span><span class="p">(</span><span class="n">velocity</span> <span class="p">*</span> <span class="n">Time</span><span class="p">.</span><span class="n">deltaTime</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<h3 id="chractercontroller-vs-rigidbody">ChracterController vs Rigidbody</h3>

<table>
  <thead>
    <tr>
      <th>特性</th>
      <th>CharacterController</th>
      <th>Rigidbody</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>物理碰撞响应</td>
      <td>自动响应</td>
      <td>更精确</td>
    </tr>
    <tr>
      <td>控制移动方式</td>
      <td>手动调用 Move</td>
      <td>通过力或 velocity</td>
    </tr>
    <tr>
      <td>支持旋转</td>
      <td>需要手动转动 transform</td>
      <td>支持</td>
    </tr>
    <tr>
      <td>上坡台阶检测</td>
      <td>自动处理</td>
      <td>需要额外实现</td>
    </tr>
    <tr>
      <td>重力</td>
      <td>需手动实现</td>
      <td>内建</td>
    </tr>
  </tbody>
</table>

<h3 id="api">API</h3>

<p><a href="https://docs.unity3d.com/ScriptReference/CharacterController.html">UnityScripting CharacterController</a></p>]]></content><author><name>ljf12825</name></author><category term="笔记" /><category term="Unity" /><category term="Unity Component" /><category term="Physics System" /><summary type="html"><![CDATA[Character Controller是专为角色移动设计的物理组件，适合用于第一人称、第三人称角色控制，尤其适合需要“脚贴地”“走坡不滑”的场景 它和Rigidbody不同，不依赖物理引擎施加力，而是手动控制角色移动的逻辑，更稳定、精准、游戏性更强]]></summary></entry><entry><title type="html">Shader</title><link href="http://localhost:4000/posts/2025-07-02-Shader/" rel="alternate" type="text/html" title="Shader" /><published>2025-06-01T00:00:00+08:00</published><updated>2025-06-01T00:00:00+08:00</updated><id>http://localhost:4000/posts/Shader</id><content type="html" xml:base="http://localhost:4000/posts/2025-07-02-Shader/"><![CDATA[]]></content><author><name>ljf12825</name></author><category term="笔记" /><category term="Unity" /><category term="Render" /><category term="Graphics" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Particle System</title><link href="http://localhost:4000/posts/2025-07-02-Particle-System/" rel="alternate" type="text/html" title="Particle System" /><published>2025-06-01T00:00:00+08:00</published><updated>2025-06-01T00:00:00+08:00</updated><id>http://localhost:4000/posts/Particle-System</id><content type="html" xml:base="http://localhost:4000/posts/2025-07-02-Particle-System/"><![CDATA[]]></content><author><name>ljf12825</name></author><category term="笔记" /><category term="Unity" /><category term="Render" /><category term="Graphics" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Engineering Mathematics</title><link href="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Engineering-Mathematics.html" rel="alternate" type="text/html" title="Engineering Mathematics" /><published>2025-06-01T00:00:00+08:00</published><updated>2025-06-01T00:00:00+08:00</updated><id>http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Engineering-Mathematics</id><content type="html" xml:base="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Engineering-Mathematics.html"><![CDATA[<p>图形开发中的常用数学</p>

<h2 id="向量">向量</h2>

<h2 id="三角函数">三角函数</h2>

<h2 id="线性代数">线性代数</h2>
<h3 id="向量空间">向量空间</h3>
<h3 id="矩阵乘法">矩阵乘法</h3>
<h3 id="变换矩阵">变换矩阵</h3>
<h3 id="正交">正交</h3>
<h3 id="特征向量">特征向量</h3>
<h3 id="线性变换本质">线性变换本质</h3>

<h2 id="齐次坐标">齐次坐标</h2>
<h3 id="44矩阵">4×4矩阵</h3>
<h3 id="w分量">w分量</h3>
<h3 id="透视投影">透视投影</h3>

<h2 id="空间几何">空间几何</h2>
<h3 id="点线面关系">点线面关系</h3>
<h3 id="空间夹角">空间夹角</h3>
<h3 id="包围盒">包围盒</h3>
<h3 id="相交检测">相交检测</h3>

<h2 id="物理数学">物理数学</h2>
<h3 id="速度">速度</h3>
<h3 id="加速度">加速度</h3>
<h3 id="抛物线公式">抛物线公式</h3>

<h2 id="曲线曲面">曲线曲面</h2>
<h3 id="bézier">Bézier</h3>
<h3 id="catmull-rom">Catmull-Rom</h3>
<h3 id="样条曲线">样条曲线</h3>

<h2 id="概率统计">概率统计</h2>
<h3 id="概率分布">概率分布</h3>
<h3 id="采样">采样</h3>
<h3 id="蒙特卡洛">蒙特卡洛</h3>

<h2 id="微积分">微积分</h2>
<h3 id="导数">导数</h3>
<h3 id="函数斜率">函数斜率</h3>
<h3 id="积分思想">积分思想</h3>]]></content><author><name>ljf12825</name></author><category term="笔记" /><category term="Graphics" /><category term="Mathematics" /><summary type="html"><![CDATA[图形开发中的常用数学]]></summary></entry><entry><title type="html">UI Event System</title><link href="http://localhost:4000/posts/2025-06-29-UI-Event-System/" rel="alternate" type="text/html" title="UI Event System" /><published>2025-06-01T00:00:00+08:00</published><updated>2025-06-01T00:00:00+08:00</updated><id>http://localhost:4000/posts/UI-Event-System</id><content type="html" xml:base="http://localhost:4000/posts/2025-06-29-UI-Event-System/"><![CDATA[<p><code class="language-plaintext highlighter-rouge">Event System</code>是Unity UI System中的核心交互管理器，掌控了所有鼠标点击、键盘输入、触摸事件、UI导航的逻辑</p>

<p>Unity的Event System是一个处理用户输入事件的系统，用于发送“点击了谁”“选中了谁”之类的事件，属于UnityEngine.EventSystems命名空间</p>

<p><img src="/assets/images/EventSystemPanel.jpg" alt="EventSystemPanel" /></p>

<table>
  <thead>
    <tr>
      <th>组件</th>
      <th>用途</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>Event System</strong></td>
      <td>整个输入系统的“大脑”</td>
    </tr>
    <tr>
      <td><strong>Input Module</strong></td>
      <td>输入方式模块，比如处理鼠标、键盘、手柄（你可以切换）</td>
    </tr>
    <tr>
      <td><strong>Raycaster（挂在 Canvas 或 3D 对象上）</strong></td>
      <td>实际检测点击了哪个物体，比如：<code class="language-plaintext highlighter-rouge">GraphicRaycaster</code>, <code class="language-plaintext highlighter-rouge">PhysicsRaycaster</code></td>
    </tr>
    <tr>
      <td><strong>Event Trigger</strong></td>
      <td>通过Inspector可视化配置多种事件响应</td>
    </tr>
    <tr>
      <td><strong>Touch Input Module</strong></td>
      <td>输入方式模块，专门负责处理触摸输入事件，适用于手机、平板等触控设备</td>
    </tr>
  </tbody>
</table>

<p>EventSystem会追踪以下交互：</p>

<table>
  <thead>
    <tr>
      <th>类型</th>
      <th>描述</th>
      <th>接口</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>点击 Click</td>
      <td>鼠标/触摸点击 UI</td>
      <td><code class="language-plaintext highlighter-rouge">IPointerClickHandler</code></td>
    </tr>
    <tr>
      <td>拖拽 Drag</td>
      <td>拖拽 ScrollRect、物品、滑块</td>
      <td><code class="language-plaintext highlighter-rouge">IDragHandler</code>, <code class="language-plaintext highlighter-rouge">IBeginDragHandler</code>, <code class="language-plaintext highlighter-rouge">IEndDragHandler</code></td>
    </tr>
    <tr>
      <td>悬停 Hover</td>
      <td>鼠标移动到 UI 上</td>
      <td><code class="language-plaintext highlighter-rouge">IPointerEnterHandler</code>, <code class="language-plaintext highlighter-rouge">IPointerExitHandler</code></td>
    </tr>
    <tr>
      <td>按钮按下</td>
      <td>长按、释放</td>
      <td><code class="language-plaintext highlighter-rouge">IPointerDownHandler</code>, <code class="language-plaintext highlighter-rouge">IPointerUpHandler</code></td>
    </tr>
    <tr>
      <td>键盘导航</td>
      <td>方向键移动焦点</td>
      <td><code class="language-plaintext highlighter-rouge">IMoveHandler</code></td>
    </tr>
    <tr>
      <td>输入</td>
      <td>表单输入</td>
      <td><code class="language-plaintext highlighter-rouge">ISubmitHandler</code>, <code class="language-plaintext highlighter-rouge">ISelectHandler</code></td>
    </tr>
  </tbody>
</table>

<p>任何的UI交互脚本，都是通过这些接口连接到Event System</p>

<h2 id="eventsystem的工作流程图">EventSystem的工作流程图</h2>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span><span class="nt">鼠标</span><span class="o">/</span><span class="nt">键盘</span><span class="o">/</span><span class="nt">触摸输入</span><span class="o">]</span>
      <span class="err">↓</span>
<span class="o">[</span><span class="nt">Input</span> <span class="nt">Module</span><span class="o">]</span> <span class="err">→</span> <span class="nt">分析输入</span><span class="err">（</span><span class="nt">比如点击</span><span class="err">、</span><span class="nt">拖动</span><span class="err">、</span><span class="nt">导航</span><span class="err">）</span>
      <span class="err">↓</span>
<span class="o">[</span><span class="nt">Raycaster</span><span class="o">]</span> <span class="err">→</span> <span class="nt">检测点击了哪个</span> <span class="nt">UI</span> <span class="nt">元素</span>
      <span class="err">↓</span>
<span class="o">[</span><span class="nt">EventSystem</span><span class="o">]</span> <span class="err">→</span> <span class="nt">通知对应的组件执行接口函数</span><span class="err">（</span><span class="nt">如</span> <span class="nt">OnClick</span><span class="err">）</span>
</code></pre></div></div>

<h2 id="eventsystem-component">EventSystem Component</h2>
<h3 id="eventsystem"><code class="language-plaintext highlighter-rouge">EventSystem</code></h3>
<p>挂载在GameObject上，只有一个<br />
功能：</p>
<ul>
  <li>管理当前选中的UI对象</li>
  <li>管理输入模块</li>
  <li>分发事件：比如点击、拖动、选中等</li>
</ul>

<h3 id="eventsystem-panel">EventSystem Panel</h3>

<table>
  <thead>
    <tr>
      <th>属性</th>
      <th>含义</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>First Selected</strong></td>
      <td>初始选中的 UI 对象（用于导航/手柄）</td>
    </tr>
    <tr>
      <td><strong>Send Navigation Events</strong></td>
      <td>是否允许方向键或手柄移动选中项</td>
    </tr>
    <tr>
      <td><strong>Drag Threshold</strong></td>
      <td>拖拽时鼠标/手指移动多少才视为“拖拽”</td>
    </tr>
  </tbody>
</table>

<h3 id="standalone-input-module"><code class="language-plaintext highlighter-rouge">Standalone Input Module</code></h3>
<p>适合：鼠标 + 键盘控制<br />
Unity默认生成<br />
功能：把输入映射为事件（点击、拖动、导航）</p>

<table>
  <thead>
    <tr>
      <th>属性</th>
      <th>说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Send Pointer Hover To Parent</td>
      <td>是否强制启用这个模块</td>
    </tr>
    <tr>
      <td>Horizontal Axis / Vertical Axis</td>
      <td>对应键盘方向键（默认是 “Horizontal” 和 “Vertical”）</td>
    </tr>
    <tr>
      <td>Submit Button / Cancel Button</td>
      <td>默认是 “Submit”（Enter）和 “Cancel”（Esc）</td>
    </tr>
    <tr>
      <td>Input Actions Per Second</td>
      <td>每秒导航几次</td>
    </tr>
    <tr>
      <td>Repeat Delay</td>
      <td>长按导航前的延迟时间</td>
    </tr>
  </tbody>
</table>

<h3 id="input-system-ui-input-module新系统"><code class="language-plaintext highlighter-rouge">Input System UI Input Module</code>（新系统）</h3>

<p>详见<a href="/posts/2025-06-03-Input-System/">Input System</a></p>

<p>适合：新版Unity Input System（使用<code class="language-plaintext highlighter-rouge">Input Actions</code>的）</p>

<table>
  <thead>
    <tr>
      <th>属性</th>
      <th>说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Actions Asset</td>
      <td>你设置好的 <code class="language-plaintext highlighter-rouge">.inputactions</code> 文件</td>
    </tr>
    <tr>
      <td>Point / Click / Navigate / Submit 等</td>
      <td>分别绑定触摸、点击、方向等操作</td>
    </tr>
    <tr>
      <td>Move Repeat Rate / Delay</td>
      <td>同样是手柄方向键长按节奏</td>
    </tr>
  </tbody>
</table>

<h3 id="raycaster">Raycaster</h3>
<p>EventSystem本身不会知道你点到谁，它需要Raycaster组件配合UI或3D元素</p>

<h4 id="graphic-raycaster用于canvas-ui"><code class="language-plaintext highlighter-rouge">Graphic Raycaster</code>（用于Canvas UI）</h4>
<p>挂在<code class="language-plaintext highlighter-rouge">Canvas</code>上，专门检测UI元素是否被点中</p>

<p><a href="#graphic-raycaster">Canvas Graphic Raycaster</a></p>

<h4 id="physics-raycaster用于3d物体"><code class="language-plaintext highlighter-rouge">Physics Raycaster</code>（用于3D物体）</h4>
<p>挂在摄像机上，配合3D对象（带Collider）使用，检测鼠标是否点击到物体</p>

<h4 id="physics2d-raycaster用于2d物体"><code class="language-plaintext highlighter-rouge">Physics2D Raycaster</code>（用于2D物体）</h4>
<p>配合2D Collider检测点击或拖动等交互</p>

<h3 id="event-trigger">Event Trigger</h3>
<ul>
  <li>方便地给一个UI元素或者任何GameObject绑定多种事件回调</li>
  <li>支持的事件类型包括点击、拖拽、指针进入、指针离开等常用事件</li>
  <li>不需要写代码实现接口，只需要在Inspector面板力配置回调函数（比如拖拽一个脚本组件的方法）</li>
</ul>

<h4 id="内部原理">内部原理</h4>
<ul>
  <li>EventTrigger继承自MonoBehaviour，实现了<code class="language-plaintext highlighter-rouge">IEventSystemHandler</code>中所有相关事件接口（如<code class="language-plaintext highlighter-rouge">IPointerClickHandler</code>、<code class="language-plaintext highlighter-rouge">IDragHandler</code>等）</li>
  <li>当事件被派发到该GameObject时，EventTrigger会收到回调（例如<code class="language-plaintext highlighter-rouge">OnPointerClick</code>）</li>
  <li>EventTrigger根据收到的事件类型，在它的事件列表中查找对应的<code class="language-plaintext highlighter-rouge">Entry</code>，然后调用所有绑定的回调函数</li>
</ul>

<table>
  <thead>
    <tr>
      <th>优点</th>
      <th>缺点</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>方便快捷，适合快速绑定事件</td>
      <td>性能稍差，复杂项目不建议大量使用</td>
    </tr>
    <tr>
      <td>无需写代码，设计灵活</td>
      <td>事件流程不透明，调试困难</td>
    </tr>
    <tr>
      <td>适合简单交互原型</td>
      <td>绑定过多事件会影响维护和阅读</td>
    </tr>
  </tbody>
</table>

<p>EventTrigger适用于设计师或非程序员，使其能够在Inspector里直接配置各种事件响应</p>

<h3 id="touch-input-module">Touch Input Module</h3>
<h4 id="工作原理">工作原理</h4>
<p>1.检测触摸事件<br />
<code class="language-plaintext highlighter-rouge">TouchInputModule</code>监听<code class="language-plaintext highlighter-rouge">Input.touches</code>，获取当前所有触摸点<br />
2.生成PointerEventData<br />
每个触摸点对应一个PointerEventData，包含位置、按下时间、手指ID等信息<br />
3.射线检测 <br />
根据触摸点位置对场景进行射线检测，找到被触摸的UI或物体<br />
4.事件分发<br />
通过<code class="language-plaintext highlighter-rouge">ExecuteEvents</code>把对应事件派发给目标物体的事件处理接口<br />
5.处理多点触控<br />
支持同时跟踪多个触摸点，分别生成和管理多个PointerEventData</p>

<ul>
  <li>早期Unity中，StandaloneInputModule主要处理键鼠，TouchInputModule专门处理触摸</li>
  <li>现在，StandaloneInputModule已经扩展支持触摸事件</li>
  <li>使用新版Unity输入系统时，推荐用<code class="language-plaintext highlighter-rouge">Input System UI Input Module</code></li>
</ul>

<h2 id="api">API</h2>
<h3 id="static-properties">Static Properties</h3>

<table>
  <thead>
    <tr>
      <th>属性</th>
      <th>描述</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">current</code></td>
      <td>返回当前EventSystem</td>
    </tr>
  </tbody>
</table>

<h3 id="properties">Properties</h3>

<table>
  <thead>
    <tr>
      <th>属性</th>
      <th>类型</th>
      <th>说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">alreadySelecting</code></td>
      <td><code class="language-plaintext highlighter-rouge">bool</code></td>
      <td><strong>只读</strong>属性，表示 EventSystem 当前是否正在执行 <code class="language-plaintext highlighter-rouge">SetSelectedGameObject()</code>。<br /> 一般用于内部防止递归调用选中事件。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">currentInputModule</code></td>
      <td><code class="language-plaintext highlighter-rouge">BaseInputModule</code></td>
      <td>当前正在使用的输入模块（如 <code class="language-plaintext highlighter-rouge">StandaloneInputModule</code> 或 <code class="language-plaintext highlighter-rouge">InputSystemUIInputModule</code>）。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">currentSelectedGameObject</code></td>
      <td><code class="language-plaintext highlighter-rouge">GameObject</code></td>
      <td>当前选中的 UI 对象（例如当前焦点在某个按钮上时，这就是那个按钮）。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">firstSelectedGameObject</code></td>
      <td><code class="language-plaintext highlighter-rouge">GameObject</code></td>
      <td>场景加载或 EventSystem 启动时最初被选中的对象（通常用于手柄/键盘导航）。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">isFocused</code></td>
      <td><code class="language-plaintext highlighter-rouge">bool</code></td>
      <td>表示 EventSystem 是否处于“聚焦”状态。<br />在 PC 上，这通常意味着游戏窗口是否处于激活状态（失焦时不响应输入）。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">pixelDragThreshold</code></td>
      <td><code class="language-plaintext highlighter-rouge">int</code></td>
      <td>拖动时鼠标或手指要移动多少像素才算开始拖拽（用来防止误触拖动）。默认是 5。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">sendNavigationEvents</code></td>
      <td><code class="language-plaintext highlighter-rouge">bool</code></td>
      <td>是否启用方向键/手柄的导航事件（如按 ↑↓←→ 移动 UI 选择框）。关闭后不能用方向键移动焦点。</td>
    </tr>
  </tbody>
</table>

<h3 id="public-methods">Public Methods</h3>

<table>
  <thead>
    <tr>
      <th>方法</th>
      <th>作用</th>
      <th>常见用途</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">IsPointerOverGameObject()</code></td>
      <td>判断鼠标/手指是否悬停在 UI 上</td>
      <td>做点击穿透判断</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">RaycastAll()</code></td>
      <td>手动执行一次 UI 射线检测</td>
      <td>获取所有命中的 UI 元素</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">SetSelectedGameObject()</code></td>
      <td>设置当前聚焦的 UI</td>
      <td>控制导航焦点</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">UpdateModules()</code></td>
      <td>刷新输入模块</td>
      <td>很少手动用，一般系统自动处理</td>
    </tr>
  </tbody>
</table>

<h2 id="focus">Focus</h2>
<p>在UI系统中，焦点（Focus）是指当前“被选中、正在响应输入”的UI元素</p>

<p>它表现为：</p>
<ul>
  <li>手柄/键盘控制时，按钮会被“高亮”</li>
  <li>输入框获得焦点后，可以输入文字</li>
  <li>焦点组件会响应<code class="language-plaintext highlighter-rouge">OnSelect</code>、<code class="language-plaintext highlighter-rouge">OnDeselect</code>、<code class="language-plaintext highlighter-rouge">ISubmitHandler</code>等接口</li>
</ul>

<p><strong>焦点只对以下操作有效：</strong></p>

<table>
  <thead>
    <tr>
      <th>操作</th>
      <th>依赖焦点</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>按方向键移动 UI 选择</td>
      <td>依赖</td>
    </tr>
    <tr>
      <td>按 Enter 提交按钮</td>
      <td>依赖</td>
    </tr>
    <tr>
      <td>输入框自动聚焦后可打字</td>
      <td>依赖</td>
    </tr>
    <tr>
      <td>鼠标点击按钮</td>
      <td>不依赖焦点（靠点击 Raycast）</td>
    </tr>
  </tbody>
</table>

<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">EventSystem</span><span class="p">.</span><span class="n">current</span><span class="p">.</span><span class="n">currentSelectedGameObject</span>
</code></pre></div></div>
<p>这就是当前拥有焦点的那个UI元素</p>

<h3 id="示例">示例</h3>
<p>1.打开页面时设置初始焦点</p>

<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="n">GameObject</span> <span class="n">defaultButton</span><span class="p">;</span>

<span class="k">void</span> <span class="nf">OnEnable</span><span class="p">()</span>
<span class="p">{</span>
  <span class="n">EventSystem</span><span class="p">.</span><span class="n">current</span><span class="p">.</span><span class="nf">SetSelectedGameObject</span><span class="p">(</span><span class="k">null</span><span class="p">);</span> <span class="c1">// 清空旧焦点</span>
  <span class="n">EventSystem</span><span class="p">.</span><span class="n">current</span><span class="p">.</span><span class="nf">SetSelectedGameObject</span><span class="p">(</span><span class="n">defaultButton</span><span class="p">);</span>
<span class="p">}</span>

</code></pre></div></div>

<p>2.按键触发当前焦点的“提交”</p>

<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">void</span> <span class="nf">Update</span><span class="p">()</span>
<span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">Input</span><span class="p">.</span><span class="nf">GetKeyDown</span><span class="p">(</span><span class="n">KeyCode</span><span class="p">.</span><span class="n">Return</span><span class="p">))</span>
  <span class="p">{</span>
    <span class="kt">var</span> <span class="n">go</span> <span class="p">=</span> <span class="n">EventSystem</span><span class="p">.</span><span class="n">currentSelectedGameObject</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">go</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
        <span class="n">ExecuteEvents</span><span class="p">.</span><span class="n">Execute</span><span class="p">&lt;</span><span class="n">ISubmitHandler</span><span class="p">&gt;(</span><span class="n">go</span><span class="p">,</span> <span class="k">new</span> <span class="nf">BaseEventData</span><span class="p">(</span><span class="n">EventSystem</span><span class="p">.</span><span class="n">current</span><span class="p">),</span> <span class="n">ExecuteEvents</span><span class="p">.</span><span class="n">submitHandler</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<h3 id="焦点与导航方向键控制">焦点与导航（方向键控制）</h3>
<p>每个<code class="language-plaintext highlighter-rouge">Selectable</code>UI（比如 Button、Toggle、InputField）都有导航设置</p>

<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Navigation</span> <span class="n">nav</span> <span class="p">=</span> <span class="n">myButton</span><span class="p">.</span><span class="n">navigation</span><span class="p">;</span>
<span class="n">nav</span><span class="p">.</span><span class="n">mode</span> <span class="p">=</span> <span class="n">Navigation</span><span class="p">.</span><span class="n">Mode</span><span class="p">.</span><span class="n">Eplicit</span><span class="p">;</span>
<span class="n">nav</span><span class="p">.</span><span class="n">delectOnRight</span> <span class="p">=</span> <span class="n">anotherButton</span><span class="p">;</span>
<span class="n">myButton</span><span class="p">.</span><span class="n">navigation</span> <span class="p">=</span> <span class="n">nav</span><span class="p">;</span>
</code></pre></div></div>
<p>按下方向键，跳转到指定的UI元素</p>

<h2 id="navigation">Navigation</h2>
<p>用户可以通过键盘、手柄、遥控器等输入设备，在UI组件之间切换焦点并触发交互</p>

<p>导航的核心是EventSystem，它负责追踪当前的Selected GameObject，处理导航方向输入</p>

<p>Selectable系列组件包含导航信息，决定方向键或手柄移动时焦点跳转到哪个元素，UI组件都继承自Selectable类</p>

<p>属性：</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Navigation</code>：定义导航方式和目标
    <ul>
      <li>None：禁用导航</li>
      <li>Horizontal/Vertical：自动寻找相邻组件</li>
      <li>Automatic：Unity自动推断相邻组件</li>
      <li>Explicit：手动指定每个方向的目标组件</li>
    </ul>
  </li>
</ul>

<h3 id="建议">建议</h3>
<ul>
  <li>尽量在PC/主机UI中设置清晰的导航路径</li>
  <li>尽可能使用Explicit导航，避免自动导航出错</li>
  <li>初始界面时设置默认选中项（通过<code class="language-plaintext highlighter-rouge">EventSystem.current.SetSelectedGameObjct</code>）</li>
  <li>遇到复杂导航需求时，可自定义导航逻辑</li>
</ul>

<h3 id="常见问题">常见问题</h3>
<ul>
  <li>EventSystem丢失或禁用，导致导航无效</li>
  <li>同一帧中多个<code class="language-plaintext highlighter-rouge">SetSelectedGameObject</code>造成焦点混乱</li>
  <li>Navigation设置为None/Automatic导致意外行为</li>
  <li>多个可交互对象重叠或遮挡，Unity自动导航判定错误</li>
</ul>]]></content><author><name>ljf12825</name></author><category term="笔记" /><category term="Unity" /><category term="Unity Component" /><category term="UGUI" /><summary type="html"><![CDATA[Event System是Unity UI System中的核心交互管理器，掌控了所有鼠标点击、键盘输入、触摸事件、UI导航的逻辑]]></summary></entry><entry><title type="html">Unity Projects Examples</title><link href="http://localhost:4000/posts/2025-06-29-Unity-Projects-Examples/" rel="alternate" type="text/html" title="Unity Projects Examples" /><published>2025-06-01T00:00:00+08:00</published><updated>2025-06-01T00:00:00+08:00</updated><id>http://localhost:4000/posts/Unity-Projects-Examples</id><content type="html" xml:base="http://localhost:4000/posts/2025-06-29-Unity-Projects-Examples/"><![CDATA[<p>项目管理</p>

<h2 id="quick-list">Quick List</h2>

<blockquote>
  <p>状态说明：</p>
  <ul>
    <li><code class="language-plaintext highlighter-rouge">Planning</code>：规划中，生成需求和说明文档</li>
    <li><code class="language-plaintext highlighter-rouge">TODO</code>：已立项，未开始</li>
    <li><code class="language-plaintext highlighter-rouge">In Progress</code>：开发中</li>
    <li><code class="language-plaintext highlighter-rouge">Code Review</code>：审查</li>
    <li><code class="language-plaintext highlighter-rouge">Testing</code>：测试</li>
    <li><code class="language-plaintext highlighter-rouge">Bugfixing</code>：缺陷修复</li>
    <li><code class="language-plaintext highlighter-rouge">Paused</code>：暂停</li>
    <li><code class="language-plaintext highlighter-rouge">Cancelled</code>：已取消</li>
    <li><code class="language-plaintext highlighter-rouge">Archived</code> : 已归档</li>
  </ul>
</blockquote>

<blockquote>
  <p>标签说明：</p>
  <ul>
    <li><code class="language-plaintext highlighter-rouge">Unity GamePlay</code>：Unity游戏逻辑实现</li>
    <li><code class="language-plaintext highlighter-rouge">Unity Graph</code>：Unity图形学实现</li>
    <li><code class="language-plaintext highlighter-rouge">Primary</code>：初级</li>
    <li><code class="language-plaintext highlighter-rouge">Intermediate</code>：中级</li>
    <li><code class="language-plaintext highlighter-rouge">Advanced</code>：进阶</li>
    <li><code class="language-plaintext highlighter-rouge">High Rank</code>：高级</li>
  </ul>
</blockquote>

<table>
  <thead>
    <tr>
      <th>项目</th>
      <th>简介</th>
      <th>要点</th>
      <th>标签</th>
      <th>状态</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>滚动球 BallRoll</td>
      <td>WASD控制球滚动，捡起金币</td>
      <td>物理系统、Rigidbody、输入系统</td>
      <td><code class="language-plaintext highlighter-rouge">Unity GamePlay</code> <code class="language-plaintext highlighter-rouge">Primary</code></td>
      <td><code class="language-plaintext highlighter-rouge">In Progress</code></td>
    </tr>
    <tr>
      <td>打砖块 Breakout</td>
      <td>实现经典打砖块玩法</td>
      <td>2D物理、碰撞、射线检测、UI</td>
      <td><code class="language-plaintext highlighter-rouge">Unity GamePlay</code> <code class="language-plaintext highlighter-rouge">Primary</code></td>
      <td><code class="language-plaintext highlighter-rouge">Planning</code></td>
    </tr>
    <tr>
      <td>Flappy Bird</td>
      <td>鸟穿越管道、简单随机化</td>
      <td>2D动画、Trigger触发、对象池</td>
      <td><code class="language-plaintext highlighter-rouge">Unity GamePlay</code> <code class="language-plaintext highlighter-rouge">Primary</code></td>
      <td><code class="language-plaintext highlighter-rouge">Planning</code></td>
    </tr>
    <tr>
      <td>计时小游戏</td>
      <td>倒计时 + 得分显示</td>
      <td>UI、Text、Button、Timer</td>
      <td><code class="language-plaintext highlighter-rouge">Unity GamePlay</code> <code class="language-plaintext highlighter-rouge">Primary</code></td>
      <td><code class="language-plaintext highlighter-rouge">Planning</code></td>
    </tr>
    <tr>
      <td>第一人称走路模拟</td>
      <td>基础FPS移动逻辑</td>
      <td>CharacterController、摄像机控制</td>
      <td><code class="language-plaintext highlighter-rouge">Unity GamePlay</code> <code class="language-plaintext highlighter-rouge">Primary</code></td>
      <td><code class="language-plaintext highlighter-rouge">Planning</code></td>
    </tr>
    <tr>
      <td>任务系统</td>
      <td>任务分类、接受/完成任务、进度追踪</td>
      <td>数据来源、存档机制、事件系统、任务链</td>
      <td><code class="language-plaintext highlighter-rouge">Unity GamePlay</code> <code class="language-plaintext highlighter-rouge">System</code> <code class="language-plaintext highlighter-rouge">Intermediate</code></td>
      <td><code class="language-plaintext highlighter-rouge">Planning</code></td>
    </tr>
    <tr>
      <td>成就系统</td>
      <td>完成特定条件自动解锁成就</td>
      <td>模块化架构、事件驱动、进度追踪、数据持久化</td>
      <td><code class="language-plaintext highlighter-rouge">Unity GamePlay</code> <code class="language-plaintext highlighter-rouge">System</code> <code class="language-plaintext highlighter-rouge">Intermediate</code></td>
      <td><code class="language-plaintext highlighter-rouge">Planning</code></td>
    </tr>
    <tr>
      <td>技能系统</td>
      <td>统一管理技能相关功能</td>
      <td>静态数据 + 运行时状态、冷却&amp;消耗管理、逻辑流</td>
      <td><code class="language-plaintext highlighter-rouge">Unity GamePlay</code> <code class="language-plaintext highlighter-rouge">System</code> <code class="language-plaintext highlighter-rouge">Intermediate</code></td>
      <td><code class="language-plaintext highlighter-rouge">Planning</code></td>
    </tr>
    <tr>
      <td>状态机系统</td>
      <td>管理对象在不同状态间切换和行为控制</td>
      <td>多角色状态、AI状态、战斗状态解耦</td>
      <td><code class="language-plaintext highlighter-rouge">Unity GamePlay</code> <code class="language-plaintext highlighter-rouge">System</code> <code class="language-plaintext highlighter-rouge">Intermediate</code></td>
      <td><code class="language-plaintext highlighter-rouge">Planning</code></td>
    </tr>
    <tr>
      <td>道具拾取 + 背包系统</td>
      <td>游戏内拾取，物品存储和管理</td>
      <td>拖拽、叠加、存储、装备栏</td>
      <td><code class="language-plaintext highlighter-rouge">Unity GamePlay</code> <code class="language-plaintext highlighter-rouge">System</code> <code class="language-plaintext highlighter-rouge">Intermediate</code></td>
      <td><code class="language-plaintext highlighter-rouge">Planning</code></td>
    </tr>
    <tr>
      <td>Save/Load存档系统</td>
      <td>持久化保存游戏的关键数据</td>
      <td>本地JSON/二进制保存、读取场景状态</td>
      <td><code class="language-plaintext highlighter-rouge">Unity GamePlay</code> <code class="language-plaintext highlighter-rouge">System</code> <code class="language-plaintext highlighter-rouge">Intermediate</code></td>
      <td><code class="language-plaintext highlighter-rouge">Planning</code></td>
    </tr>
    <tr>
      <td>抽卡、开箱、开包类</td>
      <td>随机概率 + 权重算法、奖池管理、玩家消耗</td>
      <td>奖池设计和概率控制、抽取逻辑、消耗与次数管理</td>
      <td><code class="language-plaintext highlighter-rouge">Unity GamePlay</code> <code class="language-plaintext highlighter-rouge">System</code> <code class="language-plaintext highlighter-rouge">Intermediate</code></td>
      <td><code class="language-plaintext highlighter-rouge">Planning</code></td>
    </tr>
    <tr>
      <td>Rouge-like</td>
      <td>强调随机生成地图、资源和事件，Permadeath</td>
      <td>程序生成地图、道具系统</td>
      <td><code class="language-plaintext highlighter-rouge">Unity GamePlay</code> <code class="language-plaintext highlighter-rouge">System</code> <code class="language-plaintext highlighter-rouge">Intermediate</code></td>
      <td><code class="language-plaintext highlighter-rouge">Planning</code></td>
    </tr>
    <tr>
      <td>节奏点击游戏</td>
      <td>根据音乐节奏，在指定时间点点击、滑动或长按</td>
      <td>节奏匹配、音频事件绑定</td>
      <td><code class="language-plaintext highlighter-rouge">Unity GamePlay</code> <code class="language-plaintext highlighter-rouge">System</code> <code class="language-plaintext highlighter-rouge">Intermediate</code></td>
      <td><code class="language-plaintext highlighter-rouge">Planning</code></td>
    </tr>
    <tr>
      <td>平台跳跃 Platformer</td>
      <td>可拓展成高级动作系统</td>
      <td>动画、状态机、跳跃逻辑、碰撞检测</td>
      <td><code class="language-plaintext highlighter-rouge">Unity GamePlay</code> <code class="language-plaintext highlighter-rouge">Intermediate</code></td>
      <td><code class="language-plaintext highlighter-rouge">Planning</code></td>
    </tr>
    <tr>
      <td>塔防游戏 Tower Defense</td>
      <td>使用导航网格或自定义路径系统</td>
      <td>路径系统、对象池、攻击逻辑</td>
      <td><code class="language-plaintext highlighter-rouge">Unity GamePlay</code> <code class="language-plaintext highlighter-rouge">Intermediate</code></td>
      <td><code class="language-plaintext highlighter-rouge">Planning</code></td>
    </tr>
    <tr>
      <td>基础RPG Demo</td>
      <td>包含拾取、装备、攻击等</td>
      <td>Inventory、UI、任务系统、简单AI</td>
      <td><code class="language-plaintext highlighter-rouge">Unity GamePlay</code> <code class="language-plaintext highlighter-rouge">Intermediate</code></td>
      <td><code class="language-plaintext highlighter-rouge">Planning</code></td>
    </tr>
    <tr>
      <td>TopDown射击</td>
      <td>包括Boss逻辑、多种敌人</td>
      <td>射线检测、特效、敌人AI</td>
      <td><code class="language-plaintext highlighter-rouge">Unity GamePlay</code> <code class="language-plaintext highlighter-rouge">Intermediate</code></td>
      <td><code class="language-plaintext highlighter-rouge">Planning</code></td>
    </tr>
    <tr>
      <td>Unity UI交互系统</td>
      <td>侧重交互与UI动效</td>
      <td>UnityEvent、Button、EventSystem</td>
      <td><code class="language-plaintext highlighter-rouge">Unity GamePlay</code> <code class="language-plaintext highlighter-rouge">Intermediate</code></td>
      <td><code class="language-plaintext highlighter-rouge">Planning</code></td>
    </tr>
    <tr>
      <td>第三人称动作游戏</td>
      <td>可使用Animation Rigging提升表现</td>
      <td>Blend Tree、Root Motion、攻击系统、受击反馈</td>
      <td><code class="language-plaintext highlighter-rouge">Unity GamePlay</code> <code class="language-plaintext highlighter-rouge">Advanced</code></td>
      <td><code class="language-plaintext highlighter-rouge">Planning</code></td>
    </tr>
    <tr>
      <td>回合制战斗系统（战棋）</td>
      <td>逻辑结构较为复杂</td>
      <td>网格管理、战斗管理器、状态系统</td>
      <td><code class="language-plaintext highlighter-rouge">Unity GamePlay</code> <code class="language-plaintext highlighter-rouge">Advanced</code></td>
      <td><code class="language-plaintext highlighter-rouge">Planning</code></td>
    </tr>
    <tr>
      <td>简易MMO Demo</td>
      <td>适合入门多人联机项目</td>
      <td>多人同步、角色同步、基本聊天系统、房间机制</td>
      <td><code class="language-plaintext highlighter-rouge">Unity GamePlay</code> <code class="language-plaintext highlighter-rouge">Advanced</code></td>
      <td><code class="language-plaintext highlighter-rouge">Planning</code></td>
    </tr>
    <tr>
      <td>城市模拟/建设类游戏</td>
      <td>游戏逻辑和状态同步挑战大</td>
      <td>地图系统、建筑放置、数据持久化</td>
      <td><code class="language-plaintext highlighter-rouge">Unity GamePlay</code> <code class="language-plaintext highlighter-rouge">Advanced</code></td>
      <td><code class="language-plaintext highlighter-rouge">Planning</code></td>
    </tr>
    <tr>
      <td>虚拟摄像机系统</td>
      <td>更适合图形学表现和演示项目</td>
      <td>Cinemachine、Timeline、关键帧控制</td>
      <td><code class="language-plaintext highlighter-rouge">Unity Graph</code> <code class="language-plaintext highlighter-rouge">Advanced</code></td>
      <td><code class="language-plaintext highlighter-rouge">Planning</code></td>
    </tr>
    <tr>
      <td>Open World (mini)</td>
      <td>需考虑资源管理、加载逻辑</td>
      <td>Streaming、世界管理、AI导航、场景优化</td>
      <td><code class="language-plaintext highlighter-rouge">Unity GamePlay</code> <code class="language-plaintext highlighter-rouge">High Rank</code></td>
      <td><code class="language-plaintext highlighter-rouge">Planning</code></td>
    </tr>
    <tr>
      <td>ARPG(DMC-like)</td>
      <td>动作响应和打击感难度大</td>
      <td>Combo系统、时间轴管理、动画事件</td>
      <td><code class="language-plaintext highlighter-rouge">Unity GamePlay</code> <code class="language-plaintext highlighter-rouge">High Rank</code></td>
      <td><code class="language-plaintext highlighter-rouge">Planning</code></td>
    </tr>
    <tr>
      <td>Shader Collection</td>
      <td>图形学展示</td>
      <td>自定义Shader、VFX Graph、Render Feature</td>
      <td><code class="language-plaintext highlighter-rouge">Unity Graph</code> <code class="language-plaintext highlighter-rouge">High Rank</code></td>
      <td><code class="language-plaintext highlighter-rouge">Planning</code></td>
    </tr>
    <tr>
      <td>Visual Novel System</td>
      <td>更偏向结构设计与数据处理</td>
      <td>数据驱动、UI演出、状态管理</td>
      <td><code class="language-plaintext highlighter-rouge">Unity GamePlay</code> <code class="language-plaintext highlighter-rouge">High Rank</code></td>
      <td><code class="language-plaintext highlighter-rouge">Planning</code></td>
    </tr>
    <tr>
      <td>SRP</td>
      <td>高度定制，图形学开发方向</td>
      <td>图形学、SRP、Render Graph</td>
      <td><code class="language-plaintext highlighter-rouge">Unity Graph</code> <code class="language-plaintext highlighter-rouge">High Rank</code></td>
      <td><code class="language-plaintext highlighter-rouge">Planning</code></td>
    </tr>
  </tbody>
</table>

<h2 id="details">Details</h2>

<h3 id="滚动球-ballroll">滚动球 BallRoll</h3>
<p><a href="https://github.com/ljf12825/HowUnity/blob/main/UnityProjectIndex/%E6%BB%9A%E5%8A%A8%E7%90%83-BallRoll.md">项目文档</a></p>]]></content><author><name>ljf12825</name></author><category term="笔记" /><category term="Unity" /><category term="Project" /><summary type="html"><![CDATA[项目管理]]></summary></entry><entry><title type="html">Texture</title><link href="http://localhost:4000/posts/2025-06-29-Texture/" rel="alternate" type="text/html" title="Texture" /><published>2025-06-01T00:00:00+08:00</published><updated>2025-06-01T00:00:00+08:00</updated><id>http://localhost:4000/posts/Texture</id><content type="html" xml:base="http://localhost:4000/posts/2025-06-29-Texture/"><![CDATA[<p><code class="language-plaintext highlighter-rouge">Texture</code>是图形学开发中的一个核心概念，用于在3D模型、UI、地形等物体表面显示图像或图案<br />
它不仅包含颜色信息，还可能包含法线、位移、金属度、粗糙度等各种数据，用于实现丰富的视觉效果</p>

<h2 id="基本概念">基本概念</h2>
<ul>
  <li>Texture本质上是一张图片，用于“贴”在模型表面，使其看起来更真实</li>
  <li>在GPU层面，是一个二维数组，存储颜色或其他类型的数据</li>
</ul>

<h2 id="texture类型">Texture类型</h2>

<table>
  <thead>
    <tr>
      <th>类型</th>
      <th>描述</th>
      <th>常见用途</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>Texture2D</strong></td>
      <td>最常见的二维纹理</td>
      <td>UI、模型贴图、Sprite</td>
    </tr>
    <tr>
      <td><strong>Texture3D</strong></td>
      <td>三维纹理</td>
      <td>体积渲染、噪声函数</td>
    </tr>
    <tr>
      <td><strong>Texture2DArray</strong></td>
      <td>一组相同大小的2D纹理</td>
      <td>批量渲染、材质变体</td>
    </tr>
    <tr>
      <td><strong>Cubemap</strong></td>
      <td>六面贴图的立方体</td>
      <td>天空盒、反射</td>
    </tr>
    <tr>
      <td><strong>RenderTexture</strong></td>
      <td>可以被摄像机写入的纹理</td>
      <td>后处理、实时渲染结果</td>
    </tr>
    <tr>
      <td><strong>MovieTexture</strong>（已废弃）</td>
      <td>视频纹理</td>
      <td>使用 <code class="language-plaintext highlighter-rouge">VideoPlayer</code> 替代</td>
    </tr>
  </tbody>
</table>

<h2 id="导入">导入</h2>
<p>在Unity中，图片导入后会成为Texture，可以通过Inspector查看其属性</p>

<p><img src="/assets/images/TextureInspector.jpg" alt="TextureInspector" /></p>

<p>1.Texture Type（纹理类型）</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Default</code>：普通模型贴图</li>
  <li><code class="language-plaintext highlighter-rouge">Normal Map</code>：法线贴图，用于模拟表面细节</li>
  <li><code class="language-plaintext highlighter-rouge">Sprite（2D and UI）</code>：用于2D项目和UI</li>
  <li><code class="language-plaintext highlighter-rouge">Cursor</code>：用于鼠标指针</li>
  <li><code class="language-plaintext highlighter-rouge">Lightmap</code>：烘焙光照图</li>
  <li><code class="language-plaintext highlighter-rouge">Single Channel</code>：单通道纹理，如Mask</li>
</ul>

<p>2.Alpha Source</p>
<ul>
  <li>从图片的Alpha通道提取透明度信息</li>
</ul>

<p>3.Wrap Mode（包裹模式）</p>
<ul>
  <li>Repeat：超出部分重复</li>
  <li>Clamp：超出部分拉伸边缘</li>
  <li>Mirror：镜像重复</li>
</ul>

<p>4.Filter Mode（滤波模式）</p>
<ul>
  <li>Point（无滤波）：像素风格，清晰、锯齿明显</li>
  <li>Bilinear：线性插值，柔和</li>
  <li>Trilinear：加上Mipmap，适用于远处材质</li>
</ul>

<p>5.Aniso Level（各向异性过滤）</p>
<ul>
  <li>提高斜视角下的清晰度（对地板类纹理有用）</li>
</ul>

<p>6.Max Size &amp; Compression</p>
<ul>
  <li>控制纹理的最大尺寸和压缩格式，影响内存和质量</li>
</ul>

<h2 id="使用">使用</h2>
<h3 id="脚本加载texture">脚本加载Texture</h3>
<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="n">Texture2D</span> <span class="n">tex</span><span class="p">;</span>

<span class="k">void</span> <span class="nf">Start</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">Renderer</span> <span class="n">renderer</span> <span class="p">=</span> <span class="n">GetComponent</span><span class="p">&lt;</span><span class="n">Renderer</span><span class="p">&gt;();</span>
    <span class="n">renderer</span><span class="p">.</span><span class="n">material</span><span class="p">.</span><span class="n">mainTexture</span> <span class="p">=</span> <span class="n">tex</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>或者动态加载</p>
<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Texture2D</span> <span class="n">tex</span> <span class="p">=</span> <span class="n">Resources</span><span class="p">.</span><span class="n">Load</span><span class="p">&lt;</span><span class="n">Texture2D</span><span class="p">&gt;(</span><span class="s">"Textures/MyTexture"</span><span class="p">);</span>
</code></pre></div></div>

<h3 id="从文件读取图片为texture">从文件读取图片为Texture</h3>
<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">byte</span><span class="p">[]</span> <span class="n">bytes</span> <span class="p">=</span> <span class="n">File</span><span class="p">.</span><span class="nf">ReadAllBytes</span><span class="p">(</span><span class="s">"path/to/image.png"</span><span class="p">);</span>
<span class="n">Texture2D</span> <span class="n">tex</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Texture2D</span><span class="p">(</span><span class="m">2</span><span class="p">,</span> <span class="m">2</span><span class="p">);</span>
<span class="n">tex</span><span class="p">.</span><span class="nf">LoadImage</span><span class="p">(</span><span class="n">bytes</span><span class="p">);</span>
</code></pre></div></div>

<h2 id="rendertexture与动态渲染">RenderTexture与动态渲染</h2>
<p><code class="language-plaintext highlighter-rouge">RenderTexture</code>是可以被摄像机实时写入的纹理，用于：</p>
<ul>
  <li>后处理特效（Post Processing）</li>
  <li>小地图</li>
  <li>反射镜面</li>
  <li>安全摄像头</li>
</ul>

<p>示例</p>
<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">RenderTexture</span> <span class="n">rt</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">RenderTexture</span><span class="p">(</span><span class="m">256</span><span class="p">,</span> <span class="m">256</span><span class="p">,</span> <span class="m">16</span><span class="p">);</span>
<span class="n">Camera</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="n">targetTexture</span> <span class="p">=</span> <span class="n">rt</span><span class="p">;</span>
</code></pre></div></div>

<h2 id="texture-in-graphics">Texture in Graphics</h2>
<h3 id="shader中采样texture">Shader中采样Texture</h3>
<div class="language-hlsl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sampler2D</span> <span class="n">_MainTex</span><span class="p">;</span>
<span class="n">float</span> <span class="nf">frag</span><span class="p">(</span><span class="n">v2f</span> <span class="n">i</span><span class="p">)</span> <span class="o">:</span> <span class="n">SV_Target</span>
<span class="p">{</span>
    <span class="kt">float4</span> <span class="n">color</span> <span class="o">=</span> <span class="nb">tex2D</span><span class="p">(</span><span class="n">_MainTex</span><span class="p">,</span> <span class="n">i</span><span class="p">.</span><span class="n">uv</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">color</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="多通道用途">多通道用途</h3>
<ul>
  <li>RGBA四个通道可以分别存储不同的数据
    <ul>
      <li>R:高度</li>
      <li>G:金属度</li>
      <li>B:粗糙度</li>
      <li>A:遮罩</li>
    </ul>
  </li>
</ul>

<p>这样节省资源，减少Texture数量</p>

<h2 id="texture的内存占用">Texture的内存占用</h2>
<p>计算方式（未压缩）：<br />
宽度 * 高度 * 通道数 * 每通道字节数</p>

<p>压缩后依赖于压缩格式，比如：</p>
<ul>
  <li>DXT1：适合无透明度贴图（约1/8压缩）</li>
  <li>DXT5：支持透明度（约1/4）</li>
  <li>ASTC、ETC2：移动端更合适</li>
</ul>

<h2 id="建议">建议</h2>
<ul>
  <li>合理压缩纹理，避免内存爆炸</li>
  <li>同一材质尽量使用Texture Atlas（图集）</li>
  <li>UI尽量使用<code class="language-plaintext highlighter-rouge">Sprite Atlas</code></li>
  <li>使用Mipmap减少远距离采样时的闪烁</li>
  <li>不要在频繁更新的场景中使用<code class="language-plaintext highlighter-rouge">Texture2D.SetPixel</code>，效率低下</li>
</ul>]]></content><author><name>ljf12825</name></author><category term="笔记" /><category term="Unity" /><category term="Unity Component" /><category term="Render" /><category term="Graphics" /><summary type="html"><![CDATA[Texture是图形学开发中的一个核心概念，用于在3D模型、UI、地形等物体表面显示图像或图案 它不仅包含颜色信息，还可能包含法线、位移、金属度、粗糙度等各种数据，用于实现丰富的视觉效果]]></summary></entry><entry><title type="html">Import Assets</title><link href="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Import-Assets.html" rel="alternate" type="text/html" title="Import Assets" /><published>2025-06-01T00:00:00+08:00</published><updated>2025-06-01T00:00:00+08:00</updated><id>http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Import-Assets</id><content type="html" xml:base="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Import-Assets.html"><![CDATA[<p>Unity支持多种格式的资源文件，并能自动识别并进行初步处理</p>

<h2 id="资源导入基本流程">资源导入基本流程</h2>
<p><strong>1.将资源文件拖入<code class="language-plaintext highlighter-rouge">Assets</code>目录中（Unity会自动导入）</strong><br />
<strong>2.在Inspector面板中查看导入设置</strong><br />
<strong>3.配置相关参数，比如压缩方式、贴图类型、是否生成碰撞体等</strong><br />
<strong>4.使用资源（拖到场景、作为材质贴图、挂到AudioSource等）</strong></p>

<h2 id="模型">模型</h2>

<h3 id="支持格式">支持格式</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">.fbx</code>推荐</li>
  <li><code class="language-plaintext highlighter-rouge">.obj</code></li>
  <li><code class="language-plaintext highlighter-rouge">.dae</code>（Collada）</li>
  <li><code class="language-plaintext highlighter-rouge">.blend</code>（需要Blender）</li>
</ul>

<h3 id="导入流程">导入流程</h3>
<p>1.拖拽<code class="language-plaintext highlighter-rouge">.fbx</code>文件到<code class="language-plaintext highlighter-rouge">Assets</code>文件夹<br />
2.选中模型文件，查看<code class="language-plaintext highlighter-rouge">Inspector</code>的导入设置</p>
<ul>
  <li>Scale Factor：缩放（一般保持默认）</li>
  <li>Import Animations：是否导入动画</li>
  <li>Import Materials：是否导入材质</li>
  <li>Generate Colliders：是否自动生成碰撞体</li>
</ul>

<h3 id="导入后组成">导入后组成</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Model</code>: 3D网格</li>
  <li><code class="language-plaintext highlighter-rouge">Rig</code>（如果有骨骼）：用于动画绑定</li>
  <li><code class="language-plaintext highlighter-rouge">Animation</code>：包含的动画片段</li>
  <li><code class="language-plaintext highlighter-rouge">Materials</code>：自动生成或关联的材质</li>
</ul>

<h2 id="贴图">贴图</h2>

<h3 id="支持格式-1">支持格式</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">.png</code>、<code class="language-plaintext highlighter-rouge">.jpg</code>、<code class="language-plaintext highlighter-rouge">.tga</code>、<code class="language-plaintext highlighter-rouge">.psd</code>（支持图层）等</li>
</ul>

<h3 id="导入流程-1">导入流程</h3>

<p>1.拖入图片文件
2.在Inspector中设置：</p>
<ul>
  <li>sRGB（Color Texture）：颜色贴图用，法线贴图需取消勾选</li>
  <li>Alpha Is Transparency：如果使用透明通道</li>
  <li>Wrap Mode：Repeat（平铺）或Clamp（拉伸）</li>
  <li>Filter Mode：Bilinear、Trilinear、Point（像素风）</li>
  <li>Compression：高压缩（小体积）还是高质量（清晰）</li>
  <li>Texture Type:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">Default</code>（通用）</li>
      <li><code class="language-plaintext highlighter-rouge">Sprite</code>（用于UI）</li>
      <li><code class="language-plaintext highlighter-rouge">Normal map</code>（法线贴图）</li>
      <li><code class="language-plaintext highlighter-rouge">Lightmap</code>（光照图）</li>
    </ul>
  </li>
</ul>

<h2 id="音频">音频</h2>

<h3 id="支持格式-2">支持格式</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">.mp3</code>（压缩）</li>
  <li><code class="language-plaintext highlighter-rouge">.wav</code>（无损）</li>
  <li><code class="language-plaintext highlighter-rouge">.ogg</code>（高效）</li>
  <li><code class="language-plaintext highlighter-rouge">.aiff</code></li>
</ul>

<h2 id="导入流程-2">导入流程</h2>

<p>1.拖入音频文件<br />
2.在<code class="language-plaintext highlighter-rouge">Inspector</code>中设置：</p>
<ul>
  <li>Load Type：
    <ul>
      <li><code class="language-plaintext highlighter-rouge">Decompress On Load</code>（加载时解压，适合短音效）</li>
      <li><code class="language-plaintext highlighter-rouge">Streaming</code>（边播放边加载，适合背景音乐）</li>
    </ul>
  </li>
  <li>Compression Format:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">Vorbis</code>、<code class="language-plaintext highlighter-rouge">ADPCM</code>、<code class="language-plaintext highlighter-rouge">PCM</code></li>
    </ul>
  </li>
  <li>3D Sound：是否启用3D空间化</li>
  <li>Loop：是否循环播放</li>
</ul>

<blockquote>
  <p><strong>资源组织建议：</strong> 使用好的文件夹结构和命名习惯，可以极大提高开发效率</p>
</blockquote>]]></content><author><name>ljf12825</name></author><category term="笔记" /><category term="Unity" /><summary type="html"><![CDATA[Unity支持多种格式的资源文件，并能自动识别并进行初步处理]]></summary></entry><entry><title type="html">Layer</title><link href="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Layer.html" rel="alternate" type="text/html" title="Layer" /><published>2025-06-01T00:00:00+08:00</published><updated>2025-06-01T00:00:00+08:00</updated><id>http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Layer</id><content type="html" xml:base="http://localhost:4000/%E7%AC%94%E8%AE%B0/2025/06/01/Layer.html"><![CDATA[<p>在Unity中，Layer是要给非常重要的系统<br />
它主要用于：</p>
<ul>
  <li>控制物体的渲染与相机的可见性</li>
  <li>控制物理碰撞（配合Layer Collision Matrix）</li>
  <li>通过脚本进行物体分类和筛选</li>
</ul>

<h2 id="什么是layer">什么是Layer</h2>

<p>Layer是给GameObject打的“标签”，但它和<code class="language-plaintext highlighter-rouge">Tag</code>不一样，Layer是用于功能性控制的，特别在：</p>
<ul>
  <li>摄像机的Culling Mask</li>
  <li>光照影响（Light Culling）</li>
  <li>物理碰撞（Physics Layer）</li>
  <li>射线检测（Raycast Layer）</li>
</ul>

<h2 id="layer的使用场景">Layer的使用场景</h2>
<h3 id="1摄像机视野控制culling-mask">1.摄像机视野控制（Culling Mask）</h3>
<p>在Camera组件中，你可以设置</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Culling Mask -&gt; 选择哪些Layer可以被该相机看到
</code></pre></div></div>

<p><strong>用途：</strong></p>
<ul>
  <li>UI相机只看UI层</li>
  <li>小地图相机只看敌人层</li>
  <li>分屏镜头每个只看自己的部分</li>
</ul>

<h3 id="2物理碰撞控制layer-collision-matrix">2.物理碰撞控制（Layer Collision Matrix）</h3>
<p>在菜单中：</p>

<div class="language-nginx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">Edit</span> <span class="s">-&gt;</span> <span class="s">Project</span> <span class="s">Settings</span> <span class="s">-&gt;</span> <span class="s">Physics</span>
</code></pre></div></div>

<p>你可以看到Layer Collision Matrix，它控制：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>哪些Layer和哪些Layer能发生物理碰撞
</code></pre></div></div>

<p><strong>用途：</strong></p>
<ul>
  <li>玩家层与敌人层可以碰撞，但不和自身碰撞</li>
  <li>子弹不撞自己</li>
  <li>角色不被UI的Collider打断</li>
</ul>

<h3 id="3射线检测">3.射线检测</h3>
<p>可以通过Layer来控制射线是否命中某个对象</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">layerMask</span> <span class="p">=</span> <span class="m">1</span> <span class="p">&lt;&lt;</span> <span class="n">LayerMask</span><span class="p">.</span><span class="nf">NameToLayer</span><span class="p">(</span><span class="s">"Enemy"</span><span class="p">);</span>
<span class="k">if</span> <span class="p">(</span><span class="n">Physics</span><span class="p">.</span><span class="nf">Raycast</span><span class="p">(</span><span class="n">ray</span><span class="p">,</span> <span class="k">out</span> <span class="n">hit</span><span class="p">,</span> <span class="m">100f</span><span class="p">,</span> <span class="n">layerMask</span><span class="p">))</span> <span class="n">Debug</span><span class="p">.</span><span class="nf">Log</span><span class="p">(</span><span class="s">"Hit enemy"</span><span class="p">);</span>
</code></pre></div></div>

<p>也可以多层合并：</p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">mask</span> <span class="p">=</span> <span class="p">(</span><span class="m">1</span> <span class="p">&lt;&lt;</span> <span class="n">LayerMask</span><span class="p">.</span><span class="nf">NameToLayer</span><span class="p">(</span><span class="s">"Enemy"</span><span class="p">))</span> <span class="p">|</span> <span class="p">(</span><span class="m">1</span> <span class="p">&lt;&lt;</span> <span class="n">LayerMask</span><span class="p">.</span><span class="nf">NameToLayer</span><span class="p">(</span><span class="s">"NPC"</span><span class="p">));</span>
</code></pre></div></div>
<h2 id="内置与自定义layer">内置与自定义Layer</h2>

<h3 id="内置layerunity默认的">内置Layer（Unity默认的）</h3>

<table>
  <thead>
    <tr>
      <th>编号</th>
      <th>名称</th>
      <th>说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>Default</td>
      <td>默认层</td>
    </tr>
    <tr>
      <td>4</td>
      <td>Water</td>
      <td>水体特效</td>
    </tr>
    <tr>
      <td>5</td>
      <td>UI</td>
      <td>UI 专用</td>
    </tr>
  </tbody>
</table>

<h3 id="自定义layer">自定义Layer</h3>
<p>Unity允许你最多使用32个Layer（编号 0~31），其中前几个是保留的<br />
自定义方式：</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">选中</span> <span class="n">GameObject</span> <span class="o">-&gt;</span> <span class="n">Inspector</span> <span class="o">-&gt;</span> <span class="n">Layer</span> <span class="o">-&gt;</span> <span class="k">Add</span> <span class="n">Layer</span><span class="p">...</span>
</code></pre></div></div>
<p>添加后可为GameObject设置：</p>
<div class="language-nginx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">Layer</span> <span class="s">-&gt;</span> <span class="s">你刚添加的层名</span>
</code></pre></div></div>
<h2 id="layer与tag的区别">Layer与Tag的区别</h2>

<table>
  <thead>
    <tr>
      <th>特性</th>
      <th>Layer</th>
      <th>Tag</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>数量限制</td>
      <td>最多 32 个</td>
      <td>无限制</td>
    </tr>
    <tr>
      <td>用于渲染控制</td>
      <td>是</td>
      <td>否</td>
    </tr>
    <tr>
      <td>用于物理控制</td>
      <td>是</td>
      <td>否</td>
    </tr>
    <tr>
      <td>用于分类查找</td>
      <td>有限制（用 LayerMask）</td>
      <td>可以（用 CompareTag 等）</td>
    </tr>
    <tr>
      <td>性能优化</td>
      <td>优化（用于剔除、射线过滤）</td>
      <td>无优化</td>
    </tr>
  </tbody>
</table>

<h3 id="建议">建议</h3>
<ul>
  <li>给每种功能的对象分配专属Layer</li>
  <li>摄像机、光源、UI、Trigger检测都应依赖Layer控制逻辑</li>
</ul>]]></content><author><name>ljf12825</name></author><category term="笔记" /><category term="Unity" /><category term="Unity System" /><summary type="html"><![CDATA[在Unity中，Layer是要给非常重要的系统 它主要用于： 控制物体的渲染与相机的可见性 控制物理碰撞（配合Layer Collision Matrix） 通过脚本进行物体分类和筛选]]></summary></entry></feed>