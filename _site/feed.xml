<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-08-02T23:49:02+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">ljf12825’s Blog</title><subtitle>Efficient &amp; Elegant</subtitle><author><name>Jeff Lee</name><email>2548278761@qq.com</email></author><entry><title type="html">Service Locator</title><link href="http://localhost:4000/posts/2025-08-02-Service-Locator/" rel="alternate" type="text/html" title="Service Locator" /><published>2025-06-01T00:00:00+08:00</published><updated>2025-06-01T00:00:00+08:00</updated><id>http://localhost:4000/posts/Service-Locator</id><content type="html" xml:base="http://localhost:4000/posts/2025-08-02-Service-Locator/"><![CDATA[]]></content><author><name>ljf12825</name></author><category term="笔记" /><category term="Unity" /><category term="Architecture" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Unity Profiler</title><link href="http://localhost:4000/posts/2025-06-11-Unity-Profiler/" rel="alternate" type="text/html" title="Unity Profiler" /><published>2025-06-01T00:00:00+08:00</published><updated>2025-06-01T00:00:00+08:00</updated><id>http://localhost:4000/posts/Unity-Profiler</id><content type="html" xml:base="http://localhost:4000/posts/2025-06-11-Unity-Profiler/"><![CDATA[]]></content><author><name>ljf12825</name></author><category term="笔记" /><category term="Unity" /><category term="Unity Tool" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Service Locator</title><link href="http://localhost:4000/posts/2025-08-02-Mono-and-IL2CPP/" rel="alternate" type="text/html" title="Service Locator" /><published>2025-06-01T00:00:00+08:00</published><updated>2025-06-01T00:00:00+08:00</updated><id>http://localhost:4000/posts/Mono-and-IL2CPP</id><content type="html" xml:base="http://localhost:4000/posts/2025-08-02-Mono-and-IL2CPP/"><![CDATA[]]></content><author><name>ljf12825</name></author><category term="笔记" /><category term="Unity" /><category term="Complie" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Job System</title><link href="http://localhost:4000/posts/2025-08-02-Mono-and-IL2CPP/" rel="alternate" type="text/html" title="Job System" /><published>2025-06-01T00:00:00+08:00</published><updated>2025-06-01T00:00:00+08:00</updated><id>http://localhost:4000/posts/Job-System</id><content type="html" xml:base="http://localhost:4000/posts/2025-08-02-Mono-and-IL2CPP/"><![CDATA[]]></content><author><name>ljf12825</name></author><category term="笔记" /><category term="Unity" /><category term="MultiThreading" /><category term="High Performance" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Hot Update</title><link href="http://localhost:4000/posts/2025-08-02-Hot-Update/" rel="alternate" type="text/html" title="Hot Update" /><published>2025-06-01T00:00:00+08:00</published><updated>2025-06-01T00:00:00+08:00</updated><id>http://localhost:4000/posts/Hot-Update</id><content type="html" xml:base="http://localhost:4000/posts/2025-08-02-Hot-Update/"><![CDATA[]]></content><author><name>ljf12825</name></author><category term="笔记" /><category term="Unity" /><category term="Hot Update" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">ECS</title><link href="http://localhost:4000/posts/2025-08-02-ECS/" rel="alternate" type="text/html" title="ECS" /><published>2025-06-01T00:00:00+08:00</published><updated>2025-06-01T00:00:00+08:00</updated><id>http://localhost:4000/posts/ECS</id><content type="html" xml:base="http://localhost:4000/posts/2025-08-02-ECS/"><![CDATA[]]></content><author><name>ljf12825</name></author><category term="笔记" /><category term="Unity" /><category term="Architecture" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Event Bus/Aggregator</title><link href="http://localhost:4000/posts/2025-08-02-Event-Bus-Event-Aggregator/" rel="alternate" type="text/html" title="Event Bus/Aggregator" /><published>2025-06-01T00:00:00+08:00</published><updated>2025-06-01T00:00:00+08:00</updated><id>http://localhost:4000/posts/Event-Bus-Event-Aggregator</id><content type="html" xml:base="http://localhost:4000/posts/2025-08-02-Event-Bus-Event-Aggregator/"><![CDATA[]]></content><author><name>ljf12825</name></author><category term="笔记" /><category term="Unity" /><category term="Architecture" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Dependency Injection</title><link href="http://localhost:4000/posts/2025-08-02-Dependency-Injection/" rel="alternate" type="text/html" title="Dependency Injection" /><published>2025-06-01T00:00:00+08:00</published><updated>2025-06-01T00:00:00+08:00</updated><id>http://localhost:4000/posts/Dependency-Injection</id><content type="html" xml:base="http://localhost:4000/posts/2025-08-02-Dependency-Injection/"><![CDATA[]]></content><author><name>ljf12825</name></author><category term="笔记" /><category term="Unity" /><category term="Architecture" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Layer</title><link href="http://localhost:4000/posts/2025-06-01-Layer/" rel="alternate" type="text/html" title="Layer" /><published>2025-06-01T00:00:00+08:00</published><updated>2025-06-01T00:00:00+08:00</updated><id>http://localhost:4000/posts/Layer</id><content type="html" xml:base="http://localhost:4000/posts/2025-06-01-Layer/"><![CDATA[<p>在Unity中，Layer是要给非常重要的系统<br />
它主要用于：</p>
<ul>
  <li>控制物体的渲染与相机的可见性</li>
  <li>控制物理碰撞（配合Layer Collision Matrix）</li>
  <li>通过脚本进行物体分类和筛选</li>
</ul>

<h2 id="什么是layer">什么是Layer</h2>

<p>Layer是给GameObject打的“标签”，但它和<code class="language-plaintext highlighter-rouge">Tag</code>不一样，Layer是用于功能性控制的，特别在：</p>
<ul>
  <li>摄像机的Culling Mask</li>
  <li>光照影响（Light Culling）</li>
  <li>物理碰撞（Physics Layer）</li>
  <li>射线检测（Raycast Layer）</li>
</ul>

<h2 id="layer的使用场景">Layer的使用场景</h2>
<h3 id="1摄像机视野控制culling-mask">1.摄像机视野控制（Culling Mask）</h3>
<p>在Camera组件中，你可以设置</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Culling Mask -&gt; 选择哪些Layer可以被该相机看到
</code></pre></div></div>

<p><strong>用途：</strong></p>
<ul>
  <li>UI相机只看UI层</li>
  <li>小地图相机只看敌人层</li>
  <li>分屏镜头每个只看自己的部分</li>
</ul>

<p>Layer不仅能控制每个物体是否被摄像机看到，还能与多个摄像机协作实现更加复杂的视图效果</p>

<p>例如，在多人游戏中，你可以为每个玩家设置独立的摄像机，每个摄像机通过不同的Culling Mask来渲染不同的场景部分</p>

<p>示例：多摄像头分屏控制</p>

<p>在分屏游戏中，可以设置多个摄像机，每个摄像机只渲染属于特定玩家的物体</p>
<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">camera1</span><span class="p">.</span><span class="n">cullingMask</span> <span class="p">=</span> <span class="m">1</span> <span class="p">&lt;&lt;</span> <span class="n">LayerMask</span><span class="p">.</span><span class="nf">NameToLayer</span><span class="p">(</span><span class="s">"Player1"</span><span class="p">);</span>
<span class="n">camera2</span><span class="p">.</span><span class="n">cullingMask</span> <span class="p">=</span> <span class="m">1</span> <span class="p">&lt;&lt;</span> <span class="n">LaeryMask</span><span class="p">.</span><span class="nf">NameToLayer</span><span class="p">(</span><span class="s">"Player2"</span><span class="p">);</span>
</code></pre></div></div>
<p>通过这种方式，你能够在同一个场景中显示不同的物体，仅限于特定玩家的视野</p>

<h3 id="2物理碰撞控制layer-collision-matrix">2.物理碰撞控制（Layer Collision Matrix）</h3>
<p>在菜单中：</p>

<div class="language-nginx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">Edit</span> <span class="s">-&gt;</span> <span class="s">Project</span> <span class="s">Settings</span> <span class="s">-&gt;</span> <span class="s">Physics</span>
</code></pre></div></div>

<p>你可以看到Layer Collision Matrix，它控制哪些Layer和哪些Layer能发生物理碰撞</p>

<p>如果在游戏中有多个物体不需要彼此发生碰撞，可以通过Layer来减少不必要的碰撞检测，提高性能</p>

<p><strong>用途：</strong></p>
<ul>
  <li>玩家层与敌人层可以碰撞，但不和自身碰撞</li>
  <li>子弹不撞自己</li>
  <li>角色不被UI的Collider打断</li>
</ul>

<h3 id="3射线检测">3.射线检测</h3>
<p>可以通过Layer来控制射线是否命中某个对象</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">layerMask</span> <span class="p">=</span> <span class="m">1</span> <span class="p">&lt;&lt;</span> <span class="n">LayerMask</span><span class="p">.</span><span class="nf">NameToLayer</span><span class="p">(</span><span class="s">"Enemy"</span><span class="p">);</span>
<span class="k">if</span> <span class="p">(</span><span class="n">Physics</span><span class="p">.</span><span class="nf">Raycast</span><span class="p">(</span><span class="n">ray</span><span class="p">,</span> <span class="k">out</span> <span class="n">hit</span><span class="p">,</span> <span class="m">100f</span><span class="p">,</span> <span class="n">layerMask</span><span class="p">))</span> <span class="n">Debug</span><span class="p">.</span><span class="nf">Log</span><span class="p">(</span><span class="s">"Hit enemy"</span><span class="p">);</span>
</code></pre></div></div>

<p>也可以多层合并：</p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">mask</span> <span class="p">=</span> <span class="p">(</span><span class="m">1</span> <span class="p">&lt;&lt;</span> <span class="n">LayerMask</span><span class="p">.</span><span class="nf">NameToLayer</span><span class="p">(</span><span class="s">"Enemy"</span><span class="p">))</span> <span class="p">|</span> <span class="p">(</span><span class="m">1</span> <span class="p">&lt;&lt;</span> <span class="n">LayerMask</span><span class="p">.</span><span class="nf">NameToLayer</span><span class="p">(</span><span class="s">"NPC"</span><span class="p">));</span>
</code></pre></div></div>
<h2 id="内置与自定义layer">内置与自定义Layer</h2>

<h3 id="内置layerunity默认的">内置Layer（Unity默认的）</h3>

<table>
  <thead>
    <tr>
      <th>编号</th>
      <th>名称</th>
      <th>说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>Default</td>
      <td>默认层</td>
    </tr>
    <tr>
      <td>4</td>
      <td>Water</td>
      <td>水体特效</td>
    </tr>
    <tr>
      <td>5</td>
      <td>UI</td>
      <td>UI 专用</td>
    </tr>
  </tbody>
</table>

<h3 id="自定义layer">自定义Layer</h3>
<p>Unity允许你最多使用32个Layer（编号 0~31），其中前几个是保留的<br />
自定义方式：</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">选中</span> <span class="n">GameObject</span> <span class="o">-&gt;</span> <span class="n">Inspector</span> <span class="o">-&gt;</span> <span class="n">Layer</span> <span class="o">-&gt;</span> <span class="k">Add</span> <span class="n">Layer</span><span class="p">...</span>
</code></pre></div></div>
<p>添加后可为GameObject设置：</p>
<div class="language-nginx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">Layer</span> <span class="s">-&gt;</span> <span class="s">你刚添加的层名</span>
</code></pre></div></div>
<h2 id="layer与tag的区别">Layer与Tag的区别</h2>

<table>
  <thead>
    <tr>
      <th>特性</th>
      <th>Layer</th>
      <th>Tag</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>数量限制</td>
      <td>最多 32 个</td>
      <td>无限制</td>
    </tr>
    <tr>
      <td>用于渲染控制</td>
      <td>是</td>
      <td>否</td>
    </tr>
    <tr>
      <td>用于物理控制</td>
      <td>是</td>
      <td>否</td>
    </tr>
    <tr>
      <td>用于分类查找</td>
      <td>有限制（用 LayerMask）</td>
      <td>可以（用 CompareTag 等）</td>
    </tr>
    <tr>
      <td>性能优化</td>
      <td>优化（用于剔除、射线过滤）</td>
      <td>无优化</td>
    </tr>
  </tbody>
</table>

<h3 id="建议">建议</h3>
<ul>
  <li>给每种功能的对象分配专属Layer</li>
  <li>摄像机、光源、UI、Trigger检测都应依赖Layer控制逻辑</li>
</ul>

<h2 id="layer性能优化与管理">Layer性能优化与管理</h2>
<h3 id="layer管理的最佳实践">Layer管理的最佳实践</h3>
<ul>
  <li>避免过多的Layer：虽然Unity最多允许32个Layer，但不建议频繁使用大量的Layer。过多的Layer会增加管理和维护的难度，且可能会影响性能。建议将层次结构设计得尽量简洁，避免无谓的冗余</li>
  <li>分层管理：根据物体的功能将其分配到不同的Layer中，例如：
    <ul>
      <li>游戏角色：<code class="language-plaintext highlighter-rouge">Player</code>,<code class="language-plaintext highlighter-rouge">Enemy</code></li>
      <li>UI界面：<code class="language-plaintext highlighter-rouge">UI</code>,<code class="language-plaintext highlighter-rouge">Menu</code></li>
      <li>特效：<code class="language-plaintext highlighter-rouge">PerticleEffects</code></li>
      <li>背景：<code class="language-plaintext highlighter-rouge">Background</code></li>
    </ul>
  </li>
</ul>

<p>通过合理的分层，既能提高渲染效率，也便于后期维护</p>

<h3 id="动态控制layer">动态控制Layer</h3>
<p>在一些场景中，可能需要根据物体的状态动态改变其Layer。比如，当玩家接触到某个特殊的物体时，可以改变其Layer，使其在某些摄像机的视野中不可见或不可碰撞</p>

<p>示例：动态更改Layer：</p>
<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">gameObject</span><span class="p">.</span><span class="n">layer</span> <span class="p">=</span> <span class="n">LayerMask</span><span class="p">.</span><span class="nf">NameToLayer</span><span class="p">(</span><span class="s">"Invisible"</span><span class="p">);</span>
</code></pre></div></div>
<p>通过动态修改Layer，能够灵活控制物体的行为和渲染效果</p>]]></content><author><name>ljf12825</name></author><category term="笔记" /><category term="Unity" /><category term="Unity System" /><summary type="html"><![CDATA[在Unity中，Layer是要给非常重要的系统 它主要用于： 控制物体的渲染与相机的可见性 控制物理碰撞（配合Layer Collision Matrix） 通过脚本进行物体分类和筛选]]></summary></entry><entry><title type="html">Tag</title><link href="http://localhost:4000/posts/2025-06-01-Tag/" rel="alternate" type="text/html" title="Tag" /><published>2025-06-01T00:00:00+08:00</published><updated>2025-06-01T00:00:00+08:00</updated><id>http://localhost:4000/posts/Tag</id><content type="html" xml:base="http://localhost:4000/posts/2025-06-01-Tag/"><![CDATA[<p>在Unity中，Tag是用来标记和分类GameObject的一种轻量级方法，主要用于在代码中查找和判断物体的类型或身份</p>

<h2 id="tag的核心作用">Tag的核心作用</h2>

<table>
  <thead>
    <tr>
      <th>功能</th>
      <th>示例</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>分类物体</td>
      <td>Player、Enemy、Item、UI 等</td>
    </tr>
    <tr>
      <td>逻辑判断</td>
      <td>判断一个物体是不是玩家</td>
    </tr>
    <tr>
      <td>查找特定对象</td>
      <td><code class="language-plaintext highlighter-rouge">GameObject.FindWithTag()</code></td>
    </tr>
    <tr>
      <td>触发器/碰撞器逻辑判断</td>
      <td><code class="language-plaintext highlighter-rouge">if (other.CompareTag("Enemy"))</code></td>
    </tr>
  </tbody>
</table>

<h2 id="tag的使用方法">Tag的使用方法</h2>

<h3 id="1设置tag">1.设置Tag</h3>
<p>1.选中一个 GameObject
2.Inspector 面板 → 上方的 “Tag” 下拉菜单
3.如果没有想要的标签 → 点击 Add Tag… → 添加一个新的字符串
4.回到物体，设置为刚才新建的 Tag</p>
<blockquote>
  <p><strong>注意：</strong> Tag是字符串类型，但Unity会为你管理列表，不用硬编码</p>
</blockquote>

<h3 id="2使用tag查找对象">2.使用Tag查找对象</h3>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">GameObject</span> <span class="n">player</span> <span class="p">=</span> <span class="n">GameObject</span><span class="p">.</span><span class="nf">FindWithTag</span><span class="p">(</span><span class="s">"Player"</span><span class="p">);</span>
</code></pre></div></div>
<p>或者查找多个对象：</p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">GameObject</span><span class="p">[]</span> <span class="n">enemies</span> <span class="p">=</span> <span class="n">GameObject</span><span class="p">.</span><span class="nf">FindGameObjectsWithTag</span><span class="p">(</span><span class="s">"Enemy"</span><span class="p">);</span>
</code></pre></div></div>

<h3 id="3在触发器或碰撞中判断tag">3.在触发器或碰撞中判断Tag</h3>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">void</span> <span class="nf">OnTriggerEnter</span><span class="p">(</span><span class="n">Collider</span> <span class="n">other</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="k">if</span> <span class="p">(</span><span class="n">other</span><span class="p">.</span><span class="nf">CompareTag</span><span class="p">(</span><span class="s">"Enemy"</span><span class="p">))</span> <span class="n">Debug</span><span class="p">.</span><span class="nf">Log</span><span class="p">(</span><span class="s">"撞到敌人了！"</span><span class="p">);</span>
</code></pre></div></div>

<blockquote>
  <p>推荐使用CompareTag()，而不是<code class="language-plaintext highlighter-rouge">other.tag == "Enemy"</code>，性能更好，也可避免拼写错误引发异常</p>
</blockquote>

<h2 id="示例">示例</h2>
<h3 id="标记玩家">标记玩家</h3>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="n">other</span><span class="p">.</span><span class="nf">CompareTag</span><span class="p">(</span><span class="s">"Player"</span><span class="p">))</span>
<span class="p">{</span>
    <span class="n">PlayerHealth</span> <span class="n">hp</span> <span class="p">=</span> <span class="n">other</span><span class="p">.</span><span class="n">GetComponent</span><span class="p">&lt;</span><span class="n">PlayerHealth</span><span class="p">&gt;();</span>
    <span class="n">hp</span><span class="p">.</span><span class="nf">TakeDamage</span><span class="p">(</span><span class="m">10</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
<h3 id="标记子弹敌人道具等">标记子弹、敌人、道具等</h3>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="n">collision</span><span class="p">.</span><span class="nf">CompareTag</span><span class="p">(</span><span class="s">"Projectile"</span><span class="p">))</span> <span class="nf">Destroy</span><span class="p">(</span><span class="n">collision</span><span class="p">.</span><span class="n">gameObject</span><span class="p">);</span>
</code></pre></div></div>
<h3 id="用于全局查找对象比如ui控件">用于全局查找对象（比如UI控件）</h3>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">GameObject</span> <span class="n">healthBar</span> <span class="p">=</span> <span class="n">GameObject</span><span class="p">.</span><span class="nf">FindWithTag</span><span class="p">(</span><span class="s">"HealthBar"</span><span class="p">);</span>
</code></pre></div></div>

<h2 id="建议">建议</h2>
<ul>
  <li>Tag符合逻辑判断</li>
  <li>不适合控制物理、渲染行为，应交由Layer完成</li>
  <li>避免硬编码字符串，建议自定义一个Tag常量类</li>
</ul>

<h2 id="tag-vs-layer">Tag vs Layer</h2>
<h3 id="主要功能">主要功能</h3>
<ul>
  <li>
    <p>Tag：
用于标记和分类物体。Tag是要给字符串类型，主要用于逻辑上的分类，帮助在代码中识别不同的物体。它适用于标记物体的类型或身份</p>
  </li>
  <li>
    <p>Layer：
用于物理和渲染的分类。Layer用于将物体分配到不同的物理层或渲染层。它通常用于碰撞检测、摄像机的渲染、遮挡剔除等方面</p>
  </li>
</ul>

<h3 id="应用场景">应用场景</h3>

<table>
  <thead>
    <tr>
      <th>功能</th>
      <th>Tag</th>
      <th>Layer</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>逻辑分类</strong></td>
      <td>逻辑上的分类（如<code class="language-plaintext highlighter-rouge">Player</code>、<code class="language-plaintext highlighter-rouge">Enemy</code>、<code class="language-plaintext highlighter-rouge">NPC</code>等）</td>
      <td>不适合做逻辑分类</td>
    </tr>
    <tr>
      <td><strong>物理交互</strong></td>
      <td>无直接影响</td>
      <td>控制物体与物理系统的交互（如碰撞、触发）</td>
    </tr>
    <tr>
      <td><strong>渲染控制</strong></td>
      <td>无直接影响</td>
      <td>控制哪些物体由摄像机渲染，或者被物理引擎处理</td>
    </tr>
    <tr>
      <td><strong>代码查找</strong></td>
      <td>可以通过代码查找特定标签的物体（<code class="language-plaintext highlighter-rouge">FindWithTag()</code>）</td>
      <td>不支持通过代码直接查找物体</td>
    </tr>
    <tr>
      <td><strong>数量限制</strong></td>
      <td>默认有7个内置标签，可自由添加自定义标签</td>
      <td>内置5个层，支持最多32个层（Layer）</td>
    </tr>
  </tbody>
</table>

<h2 id="性能优化">性能优化</h2>
<p><code class="language-plaintext highlighter-rouge">GameObject.FindWithTag()</code>和<code class="language-plaintext highlighter-rouge">GameObject.Find()</code>性能差异</p>

<h3 id="1gameobjectfind">1.GameObject.Find()</h3>
<p>`GameObject.Find()用于根据物体的名字查找游戏对象。它的工作原理时遍历当前场景中的所有游戏对象，并检查它们的名字是否与给定的字符串匹配。由于它们是基于字符串的比较来查找物体，查找过程中需要遍历所有场景中的物体，并逐一比较名字，性能相对较低，尤其是在场景中有大量物体时</p>

<p>性能特点：</p>
<ul>
  <li>遍历所有物体：它会遍历场景中的每个物体并进行字符串比较，直到找到匹配的物体</li>
  <li>性能消耗大：尤其在场景中物体数量较多时，<code class="language-plaintext highlighter-rouge">Find()</code>的性能较差。每次调用都会产生额外的性能开销</li>
  <li>不建议在Update中频繁使用：如果你在<code class="language-plaintext highlighter-rouge">Update()</code>或其他频繁调用的函数中使用<code class="language-plaintext highlighter-rouge">Find()</code>，会导致帧率下降</li>
</ul>

<p>适用场景：<br />
适用于场景中物体不多，或者物体名字是唯一且不需要频繁查找的场景</p>

<h3 id="2gameobjectfindwithtag">2.GameObject.FindWithTag()</h3>
<p><code class="language-plaintext highlighter-rouge">GameObject.FindWithTag()</code>是根据物体的Tag查找物体。Unity内部对标签进行了优化处理，标签通常是通过整数索引来管理，而不是字符串比较，因此比<code class="language-plaintext highlighter-rouge">Find()</code>更高效</p>

<p>性能特点：</p>
<ul>
  <li>标签优化：Unity通过内部索引表来管理标签，查找时直接使用整数值进行对比，性能比<code class="language-plaintext highlighter-rouge">Find()</code>要好</li>
  <li>只查找有特定标签的物体：<code class="language-plaintext highlighter-rouge">FindWithTag()</code>只会查找那些拥有特定标签的物体，这减少了查找范围，避免了遍历所有物体</li>
  <li>更高效：相比<code class="language-plaintext highlighter-rouge">Find()</code>，<code class="language-plaintext highlighter-rouge">FindWithTag()</code>的性能开销要小得多，尤其在场景中有大量物体时，它仍能保持较好的性能</li>
</ul>

<p>适用场景：<br />
适用于当你需要按类型查找物体时，比如查找所有敌人、玩家或道具等。尤其当场景中有大量物体时，<code class="language-plaintext highlighter-rouge">FindWithTag()</code>能显著提高查找效率</p>

<h2 id="高级tag管理方法">高级Tag管理方法</h2>
<p>在大型项目中，游戏对象的数量通常非常庞大，简单的Tag管理可能会导致代码混乱、性能瓶颈等问题。因此，合理的Tag管理变得尤为重要</p>

<h3 id="避免硬编码tag字符串">避免硬编码Tag字符串</h3>
<p>虽然Unity允许在<code class="language-plaintext highlighter-rouge">Inspector</code>中设置Tag，但使用字符串类型的Tag容易导致代码中出现硬编码，导致在后期修改时很不方便。</p>

<p>硬编码（Hardcoding）是指在程序代码中直接使用固定值，而不是通过变量、常量、配置文件等灵活方式配置。这种做法会导致编码的可维护性差，一旦需要修改这些值，开发者就需要修改代码本身，甚至重新编译程序</p>

<p>示例：</p>
<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="n">gameObject</span><span class="p">.</span><span class="nf">CompareTag</span><span class="p">(</span><span class="s">"Enemy"</span><span class="p">))</span> <span class="c1">// Enemry就是硬编码</span>
<span class="p">{</span>
    <span class="c1">// 做一些敌人的处理</span>
<span class="p">}</span>
</code></pre></div></div>

<p>为了解决这个问题，可以使用常量类来管理所有的Tag</p>

<p>示例：</p>
<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">Tags</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">const</span> <span class="kt">string</span> <span class="n">Player</span> <span class="p">=</span> <span class="s">"Player"</span><span class="p">;</span>
    <span class="k">public</span> <span class="k">const</span> <span class="kt">string</span> <span class="n">Enemy</span> <span class="p">=</span> <span class="s">"Enemy"</span><span class="p">;</span>
    <span class="k">public</span> <span class="k">const</span> <span class="kt">string</span> <span class="n">Item</span> <span class="p">=</span> <span class="s">"Item"</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>使用常量类可以避免拼写错误，并使代码更具可维护性。例如：</p>
<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">GameObject</span> <span class="n">player</span> <span class="p">=</span> <span class="n">GameObject</span><span class="p">.</span><span class="nf">FindWithTag</span><span class="p">(</span><span class="n">Tags</span><span class="p">.</span><span class="n">Player</span><span class="p">);</span>
</code></pre></div></div>

<h3 id="统一的tag命名规则">统一的Tag命名规则</h3>
<p>在多人开发的项目中，多个开发者可能会使用不同的命名方式来为物体指定Tag，这容易造成命名冲突或不一致的情况。为了避免这种情况，可以提前指定一个统一的Tag命名规则。<br />
例如，可以按照功能、类型等进行分类：</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Player</code>,<code class="language-plaintext highlighter-rouge">Enemy</code>等可以归类为“角色”</li>
  <li><code class="language-plaintext highlighter-rouge">Projectile</code>,<code class="language-plaintext highlighter-rouge">Item</code>等可以归类为“道具”</li>
  <li><code class="language-plaintext highlighter-rouge">UI</code>，<code class="language-plaintext highlighter-rouge">Background</code>等可以归类为“UI”或“场景”元素</li>
</ul>

<p>通过规范化命名，能够提高项目的可读性和协作效率</p>

<h2 id="tag与其他unity功能的结合">Tag与其他Unity功能的结合</h2>
<h3 id="tag与事件系统结合">Tag与事件系统结合</h3>
<p>在游戏开发中，很多逻辑需要根据物体的类型来触发不同的事件。使用Tag可以帮助我们快速识别不同类型的物体，并在适当的时候触发事件</p>

<p>示例：使用Tag触发事件</p>
<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">void</span> <span class="nf">OnCollisionEnter</span><span class="p">(</span><span class="n">Collision</span> <span class="n">collision</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">collision</span><span class="p">.</span><span class="n">gameObject</span><span class="p">.</span><span class="nf">CompareTag</span><span class="p">(</span><span class="n">Tags</span><span class="p">.</span><span class="n">Player</span><span class="p">))</span>
    <span class="p">{</span>
        <span class="c1">// 触发玩家碰撞事件</span>
        <span class="n">EventManager</span><span class="p">.</span><span class="nf">TriggerEvent</span><span class="p">(</span><span class="s">"PlayerHit"</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">collision</span><span class="p">.</span><span class="n">gameObject</span><span class="p">.</span><span class="nf">CompareTag</span><span class="p">(</span><span class="n">Tags</span><span class="p">.</span><span class="n">Enemy</span><span class="p">))</span>
    <span class="p">{</span>
        <span class="c1">// 触发敌人碰撞事件</span>
        <span class="n">EventManager</span><span class="p">.</span><span class="nf">TriggerEvent</span><span class="p">(</span><span class="s">"EnemyHit"</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>这种方法不仅能提高代码的可读性，还能使事件管理更加灵活</p>

<h3 id="tag与layer结合使用">Tag与Layer结合使用</h3>
<p>有时，Unity中需要将物体分类以控制它们与物理引擎的交互，或者控制它们的渲染。通过将Tag和Layer结合使用，可以达到更精细的控制</p>

<p>示例：使用Layer控制物理交互</p>
<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">void</span> <span class="nf">OnCollisionEnter</span><span class="p">(</span><span class="n">Collision</span> <span class="n">collision</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// 如果碰撞对象是敌人，并且它属于特定的Layer</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">collision</span><span class="p">.</span><span class="n">gameObject</span><span class="p">.</span><span class="nf">CompareTag</span><span class="p">(</span><span class="n">Tags</span><span class="p">.</span><span class="n">Enemy</span><span class="p">)</span> <span class="p">&amp;&amp;</span> <span class="n">collision</span><span class="p">.</span><span class="n">gameObject</span><span class="p">.</span><span class="n">layer</span> <span class="p">==</span> <span class="n">LayerMask</span><span class="p">.</span><span class="nf">NameToLayer</span><span class="p">(</span><span class="s">"EnemyLayer"</span><span class="p">))</span>
    <span class="p">{</span>
        <span class="c1">// 执行敌人的死亡逻辑</span>
        <span class="nf">Destroy</span><span class="p">(</span><span class="n">collision</span><span class="p">.</span><span class="n">gameObject</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>通过这种方式，可以使用Layer来精确控制物体的碰撞检测和物理交互，而使用Tag来区分物体的身份和类型</p>

<h2 id="tag的性能优化">Tag的性能优化</h2>
<h3 id="避免频繁调用find和findwithtag">避免频繁调用Find()和FindWithTag()</h3>
<p>在大型项目中，频繁调用<code class="language-plaintext highlighter-rouge">GameObject.Find()</code>和<code class="language-plaintext highlighter-rouge">GameObject.FindWithTag()</code>会对性能造成不小的影响。尤其是在<code class="language-plaintext highlighter-rouge">Update()</code>中反复调用这些方法时，可能会导致游戏的帧率大幅下降</p>

<p>解决方案：缓存查找结果
如果某个物体会被频繁访问，可以考虑将其引用存储在一个变量中，从而避免每次都进行查找</p>

<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">private</span> <span class="n">GameObejct</span> <span class="n">palyer</span><span class="p">;</span>

<span class="k">void</span> <span class="nf">Start</span><span class="p">()</span> <span class="p">=&gt;</span> <span class="n">palyer</span> <span class="p">=</span> <span class="n">GameObject</span><span class="p">.</span><span class="nf">FindWithTag</span><span class="p">(</span><span class="n">Tags</span><span class="p">.</span><span class="n">Player</span><span class="p">);</span> <span class="c1">// 缓存查找结果</span>

<span class="k">void</span> <span class="nf">Update</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">player</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="c1">// 在这里使用缓存的player引用</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="使用对象池object-pooling优化查找性能">使用对象池（Object Pooling）优化查找性能</h3>
<p>对于需要频繁查找的物体，使用对象池是要给不错的选择。对象池能够避免频繁地实例化和销毁对象，减少性能开销，同时提高代码的可复用性</p>

<p>示例：对象池模式</p>
<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">class</span> <span class="nc">EnemyPool</span> <span class="p">:</span> <span class="n">MonoBehaviour</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="n">GameObject</span> <span class="n">enemyPrefab</span><span class="p">;</span>
    <span class="k">private</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">GameObject</span><span class="p">&gt;</span> <span class="n">enemyPool</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">GameObject</span><span class="p">&gt;();</span>

    <span class="k">public</span> <span class="n">GameObject</span> <span class="nf">GetEnemy</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">enemy</span> <span class="k">in</span> <span class="n">enemyPool</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(!</span><span class="n">enemy</span><span class="p">.</span><span class="n">activeInHierarchy</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">enemy</span><span class="p">.</span><span class="nf">SetActive</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>
                <span class="k">return</span> <span class="n">enemy</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="kt">var</span> <span class="n">newEnemy</span> <span class="p">=</span> <span class="nf">Instantiate</span><span class="p">(</span><span class="n">enemyPrefab</span><span class="p">);</span>
        <span class="n">enemyPool</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">newEnemy</span><span class="p">);</span>
        <span class="k">return</span> <span class="n">newEnemy</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>对象池能够使得<code class="language-plaintext highlighter-rouge">FindWithTag()</code>等查找操作不再频繁发生，从而提升性能</p>]]></content><author><name>ljf12825</name></author><category term="笔记" /><category term="Unity" /><category term="Unity System" /><summary type="html"><![CDATA[在Unity中，Tag是用来标记和分类GameObject的一种轻量级方法，主要用于在代码中查找和判断物体的类型或身份]]></summary></entry></feed>